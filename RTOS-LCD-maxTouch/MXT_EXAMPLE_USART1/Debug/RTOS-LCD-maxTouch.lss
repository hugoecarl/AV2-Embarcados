
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f318  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f318  0040f318  0001f318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  0040f320  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000beec  204009c8  0040fce8  000209c8  2**2
                  ALLOC
  4 .stack        00002004  2040c8b4  0041bbd4  000209c8  2**0
                  ALLOC
  5 .heap         00000200  2040e8b8  0041dbd8  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002a629  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005907  00000000  00000000  0004b078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012c0  00000000  00000000  0005097f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000266b3  00000000  00000000  00051c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016a6c  00000000  00000000  000782f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009e36e  00000000  00000000  0008ed5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dd10  00000000  00000000  0012d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  0013addc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bc4  00000000  00000000  0013c32c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 e8 40 20 e5 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@ ..@...@...@.
  400010:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	bd 21 40 00 e3 1d 40 00 00 00 00 00 5d 22 40 00     .!@...@.....]"@.
  40003c:	c5 22 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ."@...@...@...@.
  40004c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  40005c:	e3 1d 40 00 e3 1d 40 00 00 00 00 00 5d 17 40 00     ..@...@.....].@.
  40006c:	71 17 40 00 85 17 40 00 e3 1d 40 00 e3 1d 40 00     q.@...@...@...@.
  40007c:	e3 1d 40 00 99 17 40 00 ad 17 40 00 e3 1d 40 00     ..@...@...@...@.
  40008c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  40009c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  4000ac:	e3 1d 40 00 e3 1d 40 00 21 04 40 00 e3 1d 40 00     ..@...@.!.@...@.
  4000bc:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  4000cc:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  4000dc:	e3 1d 40 00 35 04 40 00 e3 1d 40 00 e3 1d 40 00     ..@.5.@...@...@.
  4000ec:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  4000fc:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  40010c:	e3 1d 40 00 e3 1d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ......@...@...@.
  40012c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  40013c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  40014c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00 e3 1d 40 00     ..@...@...@...@.
  40015c:	e3 1d 40 00 e3 1d 40 00 e3 1d 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c8 	.word	0x204009c8
  400184:	00000000 	.word	0x00000000
  400188:	0040f320 	.word	0x0040f320

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040f320 	.word	0x0040f320
  4001c8:	204009cc 	.word	0x204009cc
  4001cc:	0040f320 	.word	0x0040f320
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c7a4 	.word	0x2040c7a4
  400258:	40064000 	.word	0x40064000

0040025c <afec_ch_set_config>:
{
  40025c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40025e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400260:	2301      	movs	r3, #1
  400262:	408b      	lsls	r3, r1
  400264:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400268:	7815      	ldrb	r5, [r2, #0]
  40026a:	2d00      	cmp	r5, #0
  40026c:	bf08      	it	eq
  40026e:	2300      	moveq	r3, #0
  400270:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400272:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400274:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400276:	004b      	lsls	r3, r1, #1
  400278:	2103      	movs	r1, #3
  40027a:	4099      	lsls	r1, r3
  40027c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400280:	7851      	ldrb	r1, [r2, #1]
  400282:	4099      	lsls	r1, r3
  400284:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400286:	6541      	str	r1, [r0, #84]	; 0x54
}
  400288:	bc30      	pop	{r4, r5}
  40028a:	4770      	bx	lr

0040028c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  40028c:	2200      	movs	r2, #0
  40028e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400290:	4b08      	ldr	r3, [pc, #32]	; (4002b4 <afec_get_config_defaults+0x28>)
  400292:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400294:	4b08      	ldr	r3, [pc, #32]	; (4002b8 <afec_get_config_defaults+0x2c>)
  400296:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40029c:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40029e:	2302      	movs	r3, #2
  4002a0:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4002a2:	2301      	movs	r3, #1
  4002a4:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4002a6:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4002a8:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4002aa:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4002ac:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4002ae:	7583      	strb	r3, [r0, #22]
  4002b0:	4770      	bx	lr
  4002b2:	bf00      	nop
  4002b4:	11e1a300 	.word	0x11e1a300
  4002b8:	005b8d80 	.word	0x005b8d80

004002bc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002bc:	2300      	movs	r3, #0
  4002be:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002c0:	2301      	movs	r3, #1
  4002c2:	7043      	strb	r3, [r0, #1]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	2040c7a0 	.word	0x2040c7a0
  40038c:	2040c7e4 	.word	0x2040c7e4

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	2040c7a4 	.word	0x2040c7a4
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001d5 	.word	0x004001d5

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001d5 	.word	0x004001d5

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	004018e1 	.word	0x004018e1
  4004a4:	2040c79c 	.word	0x2040c79c
  4004a8:	2040000a 	.word	0x2040000a

004004ac <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4004ae:	b087      	sub	sp, #28
  4004b0:	4604      	mov	r4, r0
  4004b2:	460e      	mov	r6, r1
  4004b4:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4004b6:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4004b8:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4004ba:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4004bc:	2500      	movs	r5, #0
  4004be:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4004c0:	2007      	movs	r0, #7
  4004c2:	4b9d      	ldr	r3, [pc, #628]	; (400738 <mxt_init_device+0x28c>)
  4004c4:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4004c6:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4004c8:	9501      	str	r5, [sp, #4]
  4004ca:	9505      	str	r5, [sp, #20]
  4004cc:	2302      	movs	r3, #2
  4004ce:	9302      	str	r3, [sp, #8]
  4004d0:	9003      	str	r0, [sp, #12]
  4004d2:	2307      	movs	r3, #7
  4004d4:	9304      	str	r3, [sp, #16]
  4004d6:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4004da:	a901      	add	r1, sp, #4
  4004dc:	4630      	mov	r0, r6
  4004de:	4b97      	ldr	r3, [pc, #604]	; (40073c <mxt_init_device+0x290>)
  4004e0:	4798      	blx	r3
  4004e2:	1b40      	subs	r0, r0, r5
  4004e4:	bf18      	it	ne
  4004e6:	2001      	movne	r0, #1
  4004e8:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  4004ea:	b108      	cbz	r0, 4004f0 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  4004ec:	b007      	add	sp, #28
  4004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  4004f0:	6825      	ldr	r5, [r4, #0]
  4004f2:	79a8      	ldrb	r0, [r5, #6]
  4004f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4004f8:	0040      	lsls	r0, r0, #1
  4004fa:	4b8f      	ldr	r3, [pc, #572]	; (400738 <mxt_init_device+0x28c>)
  4004fc:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  4004fe:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400500:	2300      	movs	r3, #0
  400502:	9301      	str	r3, [sp, #4]
  400504:	9304      	str	r3, [sp, #16]
  400506:	9305      	str	r3, [sp, #20]
  400508:	2307      	movs	r3, #7
  40050a:	f88d 3004 	strb.w	r3, [sp, #4]
  40050e:	2302      	movs	r3, #2
  400510:	9302      	str	r3, [sp, #8]
  400512:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400514:	79ab      	ldrb	r3, [r5, #6]
  400516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40051a:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  40051c:	9304      	str	r3, [sp, #16]
  40051e:	7b23      	ldrb	r3, [r4, #12]
  400520:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400524:	a901      	add	r1, sp, #4
  400526:	68a0      	ldr	r0, [r4, #8]
  400528:	4b84      	ldr	r3, [pc, #528]	; (40073c <mxt_init_device+0x290>)
  40052a:	4798      	blx	r3
  40052c:	3000      	adds	r0, #0
  40052e:	bf18      	it	ne
  400530:	2001      	movne	r0, #1
  400532:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400534:	2800      	cmp	r0, #0
  400536:	d1d9      	bne.n	4004ec <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400538:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40053a:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  40053c:	79bb      	ldrb	r3, [r7, #6]
  40053e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400542:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400544:	3607      	adds	r6, #7
  400546:	b2b6      	uxth	r6, r6
  400548:	463a      	mov	r2, r7
  40054a:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  40054c:	2100      	movs	r1, #0
		result ^= crcpoly;
  40054e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400740 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400552:	f892 e001 	ldrb.w	lr, [r2, #1]
  400556:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400558:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  40055c:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400560:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400564:	bf18      	it	ne
  400566:	ea81 010c 	eorne.w	r1, r1, ip
  40056a:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  40056c:	42ba      	cmp	r2, r7
  40056e:	d1f0      	bne.n	400552 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400570:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400572:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400576:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  40057a:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  40057e:	d003      	beq.n	400588 <mxt_init_device+0xdc>
		result ^= crcpoly;
  400580:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  400584:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  400588:	f1a6 0708 	sub.w	r7, r6, #8
  40058c:	2f01      	cmp	r7, #1
  40058e:	dd12      	ble.n	4005b6 <mxt_init_device+0x10a>
  400590:	2301      	movs	r3, #1
		result ^= crcpoly;
  400592:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400740 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  400596:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400598:	784d      	ldrb	r5, [r1, #1]
  40059a:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40059c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4005a0:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4005a4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4005a8:	bf18      	it	ne
  4005aa:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4005ae:	3302      	adds	r3, #2
  4005b0:	b29b      	uxth	r3, r3
  4005b2:	42bb      	cmp	r3, r7
  4005b4:	dbef      	blt.n	400596 <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4005b6:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4005b8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4005bc:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4005c0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4005c4:	d003      	beq.n	4005ce <mxt_init_device+0x122>
		result ^= crcpoly;
  4005c6:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4005ca:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4005ce:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4005d2:	2300      	movs	r3, #0
  4005d4:	9301      	str	r3, [sp, #4]
  4005d6:	9305      	str	r3, [sp, #20]
  4005d8:	f88d 6004 	strb.w	r6, [sp, #4]
  4005dc:	0a36      	lsrs	r6, r6, #8
  4005de:	f88d 6005 	strb.w	r6, [sp, #5]
  4005e2:	2302      	movs	r3, #2
  4005e4:	9302      	str	r3, [sp, #8]
  4005e6:	f8cd d00c 	str.w	sp, [sp, #12]
  4005ea:	2303      	movs	r3, #3
  4005ec:	9304      	str	r3, [sp, #16]
  4005ee:	7b23      	ldrb	r3, [r4, #12]
  4005f0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4005f4:	a901      	add	r1, sp, #4
  4005f6:	68a0      	ldr	r0, [r4, #8]
  4005f8:	4b50      	ldr	r3, [pc, #320]	; (40073c <mxt_init_device+0x290>)
  4005fa:	4798      	blx	r3
  4005fc:	b328      	cbz	r0, 40064a <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  4005fe:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400602:	42ab      	cmp	r3, r5
  400604:	f040 808b 	bne.w	40071e <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400608:	6825      	ldr	r5, [r4, #0]
  40060a:	79a8      	ldrb	r0, [r5, #6]
  40060c:	b198      	cbz	r0, 400636 <mxt_init_device+0x18a>
  40060e:	2300      	movs	r3, #0
  400610:	3301      	adds	r3, #1
  400612:	b2da      	uxtb	r2, r3
  400614:	4290      	cmp	r0, r2
  400616:	d8fb      	bhi.n	400610 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400618:	6862      	ldr	r2, [r4, #4]
  40061a:	1e43      	subs	r3, r0, #1
  40061c:	b2db      	uxtb	r3, r3
  40061e:	3301      	adds	r3, #1
  400620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400624:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400628:	2000      	movs	r0, #0
  40062a:	7953      	ldrb	r3, [r2, #5]
  40062c:	4418      	add	r0, r3
  40062e:	b2c0      	uxtb	r0, r0
  400630:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400632:	4291      	cmp	r1, r2
  400634:	d1f9      	bne.n	40062a <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  400636:	0040      	lsls	r0, r0, #1
  400638:	4b3f      	ldr	r3, [pc, #252]	; (400738 <mxt_init_device+0x28c>)
  40063a:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  40063c:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40063e:	79ab      	ldrb	r3, [r5, #6]
  400640:	b173      	cbz	r3, 400660 <mxt_init_device+0x1b4>
  400642:	2700      	movs	r7, #0
  400644:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400646:	46be      	mov	lr, r7
  400648:	e037      	b.n	4006ba <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40064a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40064e:	f89d 3000 	ldrb.w	r3, [sp]
  400652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400656:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40065a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40065e:	e7d0      	b.n	400602 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400660:	f06f 0003 	mvn.w	r0, #3
  400664:	e742      	b.n	4004ec <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400666:	3001      	adds	r0, #1
  400668:	b2c0      	uxtb	r0, r0
  40066a:	6862      	ldr	r2, [r4, #4]
  40066c:	1953      	adds	r3, r2, r5
  40066e:	7919      	ldrb	r1, [r3, #4]
  400670:	4281      	cmp	r1, r0
  400672:	d31c      	bcc.n	4006ae <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  400674:	795b      	ldrb	r3, [r3, #5]
  400676:	2b00      	cmp	r3, #0
  400678:	d0f5      	beq.n	400666 <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40067a:	6862      	ldr	r2, [r4, #4]
  40067c:	442a      	add	r2, r5
  40067e:	7953      	ldrb	r3, [r2, #5]
  400680:	2b00      	cmp	r3, #0
  400682:	d0f0      	beq.n	400666 <mxt_init_device+0x1ba>
  400684:	4633      	mov	r3, r6
							device->object_list[i].type;
  400686:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  400688:	6962      	ldr	r2, [r4, #20]
  40068a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  40068e:	6962      	ldr	r2, [r4, #20]
  400690:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400694:	7050      	strb	r0, [r2, #1]
					id_index++;
  400696:	3301      	adds	r3, #1
  400698:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  40069a:	6862      	ldr	r2, [r4, #4]
  40069c:	442a      	add	r2, r5
  40069e:	1b99      	subs	r1, r3, r6
  4006a0:	f892 c005 	ldrb.w	ip, [r2, #5]
  4006a4:	b2c9      	uxtb	r1, r1
  4006a6:	458c      	cmp	ip, r1
  4006a8:	d8ed      	bhi.n	400686 <mxt_init_device+0x1da>
					id_index++;
  4006aa:	461e      	mov	r6, r3
  4006ac:	e7db      	b.n	400666 <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006ae:	3701      	adds	r7, #1
  4006b0:	b2ff      	uxtb	r7, r7
  4006b2:	6823      	ldr	r3, [r4, #0]
  4006b4:	799b      	ldrb	r3, [r3, #6]
  4006b6:	429f      	cmp	r7, r3
  4006b8:	d207      	bcs.n	4006ca <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4006ba:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4006be:	005a      	lsls	r2, r3, #1
  4006c0:	4615      	mov	r5, r2
  4006c2:	6863      	ldr	r3, [r4, #4]
  4006c4:	4413      	add	r3, r2
  4006c6:	4670      	mov	r0, lr
  4006c8:	e7d4      	b.n	400674 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006ca:	b35b      	cbz	r3, 400724 <mxt_init_device+0x278>
  4006cc:	4610      	mov	r0, r2
  4006ce:	3b01      	subs	r3, #1
  4006d0:	b2db      	uxtb	r3, r3
  4006d2:	3301      	adds	r3, #1
  4006d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4006d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4006dc:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  4006de:	7943      	ldrb	r3, [r0, #5]
  4006e0:	4419      	add	r1, r3
  4006e2:	b2c9      	uxtb	r1, r1
  4006e4:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006e6:	4282      	cmp	r2, r0
  4006e8:	d1f9      	bne.n	4006de <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  4006ea:	b1f1      	cbz	r1, 40072a <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  4006ec:	6962      	ldr	r2, [r4, #20]
  4006ee:	7813      	ldrb	r3, [r2, #0]
  4006f0:	2b09      	cmp	r3, #9
  4006f2:	d00f      	beq.n	400714 <mxt_init_device+0x268>
  4006f4:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  4006f6:	3301      	adds	r3, #1
  4006f8:	b2db      	uxtb	r3, r3
  4006fa:	428b      	cmp	r3, r1
  4006fc:	d00c      	beq.n	400718 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  4006fe:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400702:	2809      	cmp	r0, #9
  400704:	d1f7      	bne.n	4006f6 <mxt_init_device+0x24a>
			return i;
  400706:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400708:	f1b3 3fff 	cmp.w	r3, #4294967295
  40070c:	d010      	beq.n	400730 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  40070e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400710:	2000      	movs	r0, #0
  400712:	e6eb      	b.n	4004ec <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400714:	2300      	movs	r3, #0
  400716:	e7f6      	b.n	400706 <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400718:	f06f 0003 	mvn.w	r0, #3
  40071c:	e6e6      	b.n	4004ec <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40071e:	f06f 0003 	mvn.w	r0, #3
  400722:	e6e3      	b.n	4004ec <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400724:	f06f 0003 	mvn.w	r0, #3
  400728:	e6e0      	b.n	4004ec <mxt_init_device+0x40>
  40072a:	f06f 0003 	mvn.w	r0, #3
  40072e:	e6dd      	b.n	4004ec <mxt_init_device+0x40>
  400730:	f06f 0003 	mvn.w	r0, #3
  400734:	e6da      	b.n	4004ec <mxt_init_device+0x40>
  400736:	bf00      	nop
  400738:	004046c9 	.word	0x004046c9
  40073c:	00401b61 	.word	0x00401b61
  400740:	0080001b 	.word	0x0080001b

00400744 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400744:	6803      	ldr	r3, [r0, #0]
  400746:	799a      	ldrb	r2, [r3, #6]
  400748:	b1d2      	cbz	r2, 400780 <mxt_get_object_address+0x3c>
{
  40074a:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  40074c:	6844      	ldr	r4, [r0, #4]
  40074e:	7823      	ldrb	r3, [r4, #0]
  400750:	428b      	cmp	r3, r1
  400752:	d00e      	beq.n	400772 <mxt_get_object_address+0x2e>
  400754:	1da3      	adds	r3, r4, #6
  400756:	3a01      	subs	r2, #1
  400758:	b2d2      	uxtb	r2, r2
  40075a:	3201      	adds	r2, #1
  40075c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400760:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  400764:	4293      	cmp	r3, r2
  400766:	d009      	beq.n	40077c <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400768:	461c      	mov	r4, r3
  40076a:	f813 0b06 	ldrb.w	r0, [r3], #6
  40076e:	4288      	cmp	r0, r1
  400770:	d1f8      	bne.n	400764 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  400772:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  400776:	f85d 4b04 	ldr.w	r4, [sp], #4
  40077a:	4770      	bx	lr
	return 0;
  40077c:	2000      	movs	r0, #0
  40077e:	e7fa      	b.n	400776 <mxt_get_object_address+0x32>
  400780:	2000      	movs	r0, #0
  400782:	4770      	bx	lr

00400784 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  400784:	b530      	push	{r4, r5, lr}
  400786:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400788:	2300      	movs	r3, #0
  40078a:	9301      	str	r3, [sp, #4]
  40078c:	9304      	str	r3, [sp, #16]
  40078e:	9305      	str	r3, [sp, #20]
  400790:	f88d 1004 	strb.w	r1, [sp, #4]
  400794:	0a0b      	lsrs	r3, r1, #8
  400796:	f88d 3005 	strb.w	r3, [sp, #5]
  40079a:	2302      	movs	r3, #2
  40079c:	9302      	str	r3, [sp, #8]
  40079e:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4007a0:	6803      	ldr	r3, [r0, #0]
  4007a2:	799a      	ldrb	r2, [r3, #6]
  4007a4:	b1ba      	cbz	r2, 4007d6 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4007a6:	6844      	ldr	r4, [r0, #4]
  4007a8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4007ac:	428b      	cmp	r3, r1
  4007ae:	d00f      	beq.n	4007d0 <mxt_write_config_object+0x4c>
  4007b0:	1da3      	adds	r3, r4, #6
  4007b2:	3a01      	subs	r2, #1
  4007b4:	b2d2      	uxtb	r2, r2
  4007b6:	3201      	adds	r2, #1
  4007b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4007bc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4007c0:	4293      	cmp	r3, r2
  4007c2:	d016      	beq.n	4007f2 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4007c4:	461c      	mov	r4, r3
  4007c6:	3306      	adds	r3, #6
  4007c8:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4007cc:	428d      	cmp	r5, r1
  4007ce:	d1f7      	bne.n	4007c0 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4007d0:	78e2      	ldrb	r2, [r4, #3]
  4007d2:	3201      	adds	r2, #1
  4007d4:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4007d6:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  4007d8:	7b03      	ldrb	r3, [r0, #12]
  4007da:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  4007de:	a901      	add	r1, sp, #4
  4007e0:	6880      	ldr	r0, [r0, #8]
  4007e2:	4b05      	ldr	r3, [pc, #20]	; (4007f8 <mxt_write_config_object+0x74>)
  4007e4:	4798      	blx	r3
  4007e6:	3000      	adds	r0, #0
  4007e8:	bf18      	it	ne
  4007ea:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  4007ec:	4240      	negs	r0, r0
  4007ee:	b007      	add	sp, #28
  4007f0:	bd30      	pop	{r4, r5, pc}
	return 0;
  4007f2:	2200      	movs	r2, #0
  4007f4:	e7ef      	b.n	4007d6 <mxt_write_config_object+0x52>
  4007f6:	bf00      	nop
  4007f8:	00401c0d 	.word	0x00401c0d

004007fc <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  4007fc:	b500      	push	{lr}
  4007fe:	b089      	sub	sp, #36	; 0x24
  400800:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400804:	2300      	movs	r3, #0
  400806:	9303      	str	r3, [sp, #12]
  400808:	9307      	str	r3, [sp, #28]
  40080a:	f88d 100c 	strb.w	r1, [sp, #12]
  40080e:	0a09      	lsrs	r1, r1, #8
  400810:	f88d 100d 	strb.w	r1, [sp, #13]
  400814:	2302      	movs	r3, #2
  400816:	9304      	str	r3, [sp, #16]
  400818:	f10d 0307 	add.w	r3, sp, #7
  40081c:	9305      	str	r3, [sp, #20]
  40081e:	2301      	movs	r3, #1
  400820:	9306      	str	r3, [sp, #24]
  400822:	7b03      	ldrb	r3, [r0, #12]
  400824:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400828:	a903      	add	r1, sp, #12
  40082a:	6880      	ldr	r0, [r0, #8]
  40082c:	4b04      	ldr	r3, [pc, #16]	; (400840 <mxt_write_config_reg+0x44>)
  40082e:	4798      	blx	r3
  400830:	3000      	adds	r0, #0
  400832:	bf18      	it	ne
  400834:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  400836:	4240      	negs	r0, r0
  400838:	b009      	add	sp, #36	; 0x24
  40083a:	f85d fb04 	ldr.w	pc, [sp], #4
  40083e:	bf00      	nop
  400840:	00401c0d 	.word	0x00401c0d

00400844 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400844:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400846:	4b07      	ldr	r3, [pc, #28]	; (400864 <mxt_is_message_pending+0x20>)
  400848:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  40084c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40084e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400850:	f002 021f 	and.w	r2, r2, #31
  400854:	2301      	movs	r3, #1
  400856:	fa03 f202 	lsl.w	r2, r3, r2
  40085a:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  40085c:	bf0c      	ite	eq
  40085e:	4618      	moveq	r0, r3
  400860:	2000      	movne	r0, #0
  400862:	4770      	bx	lr
  400864:	00200707 	.word	0x00200707

00400868 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400868:	b530      	push	{r4, r5, lr}
  40086a:	b087      	sub	sp, #28
  40086c:	4604      	mov	r4, r0
  40086e:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400870:	2200      	movs	r2, #0
  400872:	2105      	movs	r1, #5
  400874:	4b0d      	ldr	r3, [pc, #52]	; (4008ac <mxt_read_message+0x44>)
  400876:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400878:	2300      	movs	r3, #0
  40087a:	9301      	str	r3, [sp, #4]
  40087c:	9305      	str	r3, [sp, #20]
  40087e:	f88d 0004 	strb.w	r0, [sp, #4]
  400882:	0a00      	lsrs	r0, r0, #8
  400884:	f88d 0005 	strb.w	r0, [sp, #5]
  400888:	2302      	movs	r3, #2
  40088a:	9302      	str	r3, [sp, #8]
  40088c:	9503      	str	r5, [sp, #12]
  40088e:	2309      	movs	r3, #9
  400890:	9304      	str	r3, [sp, #16]
  400892:	7b23      	ldrb	r3, [r4, #12]
  400894:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400898:	a901      	add	r1, sp, #4
  40089a:	68a0      	ldr	r0, [r4, #8]
  40089c:	4b04      	ldr	r3, [pc, #16]	; (4008b0 <mxt_read_message+0x48>)
  40089e:	4798      	blx	r3
  4008a0:	3000      	adds	r0, #0
  4008a2:	bf18      	it	ne
  4008a4:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4008a6:	4240      	negs	r0, r0
  4008a8:	b007      	add	sp, #28
  4008aa:	bd30      	pop	{r4, r5, pc}
  4008ac:	00400745 	.word	0x00400745
  4008b0:	00401b61 	.word	0x00401b61

004008b4 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4008b6:	b085      	sub	sp, #20
  4008b8:	4604      	mov	r4, r0
  4008ba:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4008bc:	4d17      	ldr	r5, [pc, #92]	; (40091c <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4008be:	4f18      	ldr	r7, [pc, #96]	; (400920 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4008c0:	4620      	mov	r0, r4
  4008c2:	47a8      	blx	r5
  4008c4:	b328      	cbz	r0, 400912 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4008c6:	a901      	add	r1, sp, #4
  4008c8:	4620      	mov	r0, r4
  4008ca:	47b8      	blx	r7
  4008cc:	4603      	mov	r3, r0
  4008ce:	bb10      	cbnz	r0, 400916 <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4008d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4008d4:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4008d6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  4008da:	2a09      	cmp	r2, #9
  4008dc:	d1f0      	bne.n	4008c0 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  4008de:	7f22      	ldrb	r2, [r4, #28]
  4008e0:	1a9b      	subs	r3, r3, r2
  4008e2:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  4008e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4008e8:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  4008ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  4008ee:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  4008f2:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  4008f4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  4008f8:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  4008fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  4008fe:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400902:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  400906:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400908:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40090c:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  40090e:	2300      	movs	r3, #0
  400910:	e001      	b.n	400916 <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400912:	f06f 0303 	mvn.w	r3, #3
}
  400916:	4618      	mov	r0, r3
  400918:	b005      	add	sp, #20
  40091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40091c:	00400845 	.word	0x00400845
  400920:	00400869 	.word	0x00400869

00400924 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400924:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400926:	4810      	ldr	r0, [pc, #64]	; (400968 <sysclk_init+0x44>)
  400928:	4b10      	ldr	r3, [pc, #64]	; (40096c <sysclk_init+0x48>)
  40092a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40092c:	213e      	movs	r1, #62	; 0x3e
  40092e:	2000      	movs	r0, #0
  400930:	4b0f      	ldr	r3, [pc, #60]	; (400970 <sysclk_init+0x4c>)
  400932:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400934:	4c0f      	ldr	r4, [pc, #60]	; (400974 <sysclk_init+0x50>)
  400936:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400938:	2800      	cmp	r0, #0
  40093a:	d0fc      	beq.n	400936 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40093c:	4b0e      	ldr	r3, [pc, #56]	; (400978 <sysclk_init+0x54>)
  40093e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400940:	4a0e      	ldr	r2, [pc, #56]	; (40097c <sysclk_init+0x58>)
  400942:	4b0f      	ldr	r3, [pc, #60]	; (400980 <sysclk_init+0x5c>)
  400944:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400946:	4c0f      	ldr	r4, [pc, #60]	; (400984 <sysclk_init+0x60>)
  400948:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40094a:	2800      	cmp	r0, #0
  40094c:	d0fc      	beq.n	400948 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40094e:	2002      	movs	r0, #2
  400950:	4b0d      	ldr	r3, [pc, #52]	; (400988 <sysclk_init+0x64>)
  400952:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400954:	2000      	movs	r0, #0
  400956:	4b0d      	ldr	r3, [pc, #52]	; (40098c <sysclk_init+0x68>)
  400958:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40095a:	4b0d      	ldr	r3, [pc, #52]	; (400990 <sysclk_init+0x6c>)
  40095c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40095e:	480d      	ldr	r0, [pc, #52]	; (400994 <sysclk_init+0x70>)
  400960:	4b02      	ldr	r3, [pc, #8]	; (40096c <sysclk_init+0x48>)
  400962:	4798      	blx	r3
  400964:	bd10      	pop	{r4, pc}
  400966:	bf00      	nop
  400968:	07270e00 	.word	0x07270e00
  40096c:	00401fb9 	.word	0x00401fb9
  400970:	0040185d 	.word	0x0040185d
  400974:	004018b1 	.word	0x004018b1
  400978:	004018c1 	.word	0x004018c1
  40097c:	20183f01 	.word	0x20183f01
  400980:	400e0600 	.word	0x400e0600
  400984:	004018d1 	.word	0x004018d1
  400988:	004017c1 	.word	0x004017c1
  40098c:	004017f9 	.word	0x004017f9
  400990:	00401ead 	.word	0x00401ead
  400994:	11e1a300 	.word	0x11e1a300

00400998 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400998:	b510      	push	{r4, lr}
  40099a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40099c:	4b10      	ldr	r3, [pc, #64]	; (4009e0 <spi_master_init+0x48>)
  40099e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4009a0:	2380      	movs	r3, #128	; 0x80
  4009a2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4009a4:	6863      	ldr	r3, [r4, #4]
  4009a6:	f043 0301 	orr.w	r3, r3, #1
  4009aa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4009ac:	6863      	ldr	r3, [r4, #4]
  4009ae:	f043 0310 	orr.w	r3, r3, #16
  4009b2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4009b4:	6863      	ldr	r3, [r4, #4]
  4009b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4009ba:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4009bc:	2100      	movs	r1, #0
  4009be:	4620      	mov	r0, r4
  4009c0:	4b08      	ldr	r3, [pc, #32]	; (4009e4 <spi_master_init+0x4c>)
  4009c2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4009c4:	6863      	ldr	r3, [r4, #4]
  4009c6:	f023 0302 	bic.w	r3, r3, #2
  4009ca:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4009cc:	6863      	ldr	r3, [r4, #4]
  4009ce:	f023 0304 	bic.w	r3, r3, #4
  4009d2:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4009d4:	2100      	movs	r1, #0
  4009d6:	4620      	mov	r0, r4
  4009d8:	4b03      	ldr	r3, [pc, #12]	; (4009e8 <spi_master_init+0x50>)
  4009da:	4798      	blx	r3
  4009dc:	bd10      	pop	{r4, pc}
  4009de:	bf00      	nop
  4009e0:	00401901 	.word	0x00401901
  4009e4:	0040192d 	.word	0x0040192d
  4009e8:	00401943 	.word	0x00401943

004009ec <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4009ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009f0:	4604      	mov	r4, r0
  4009f2:	460d      	mov	r5, r1
  4009f4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4009f6:	4915      	ldr	r1, [pc, #84]	; (400a4c <spi_master_setup_device+0x60>)
  4009f8:	4618      	mov	r0, r3
  4009fa:	4b15      	ldr	r3, [pc, #84]	; (400a50 <spi_master_setup_device+0x64>)
  4009fc:	4798      	blx	r3
  4009fe:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400a00:	2300      	movs	r3, #0
  400a02:	461a      	mov	r2, r3
  400a04:	6829      	ldr	r1, [r5, #0]
  400a06:	4620      	mov	r0, r4
  400a08:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400a68 <spi_master_setup_device+0x7c>
  400a0c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400a0e:	2208      	movs	r2, #8
  400a10:	6829      	ldr	r1, [r5, #0]
  400a12:	4620      	mov	r0, r4
  400a14:	4b0f      	ldr	r3, [pc, #60]	; (400a54 <spi_master_setup_device+0x68>)
  400a16:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400a18:	b2fa      	uxtb	r2, r7
  400a1a:	6829      	ldr	r1, [r5, #0]
  400a1c:	4620      	mov	r0, r4
  400a1e:	4b0e      	ldr	r3, [pc, #56]	; (400a58 <spi_master_setup_device+0x6c>)
  400a20:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400a22:	2208      	movs	r2, #8
  400a24:	6829      	ldr	r1, [r5, #0]
  400a26:	4620      	mov	r0, r4
  400a28:	4b0c      	ldr	r3, [pc, #48]	; (400a5c <spi_master_setup_device+0x70>)
  400a2a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400a2c:	0872      	lsrs	r2, r6, #1
  400a2e:	6829      	ldr	r1, [r5, #0]
  400a30:	4620      	mov	r0, r4
  400a32:	4b0b      	ldr	r3, [pc, #44]	; (400a60 <spi_master_setup_device+0x74>)
  400a34:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400a36:	f086 0201 	eor.w	r2, r6, #1
  400a3a:	f002 0201 	and.w	r2, r2, #1
  400a3e:	6829      	ldr	r1, [r5, #0]
  400a40:	4620      	mov	r0, r4
  400a42:	4b08      	ldr	r3, [pc, #32]	; (400a64 <spi_master_setup_device+0x78>)
  400a44:	4798      	blx	r3
  400a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a4a:	bf00      	nop
  400a4c:	08f0d180 	.word	0x08f0d180
  400a50:	00401a1f 	.word	0x00401a1f
  400a54:	00401a0b 	.word	0x00401a0b
  400a58:	00401a35 	.word	0x00401a35
  400a5c:	004019c5 	.word	0x004019c5
  400a60:	00401989 	.word	0x00401989
  400a64:	004019a7 	.word	0x004019a7
  400a68:	00401a5d 	.word	0x00401a5d

00400a6c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400a6c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400a6e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d006      	beq.n	400a84 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400a76:	6809      	ldr	r1, [r1, #0]
  400a78:	290f      	cmp	r1, #15
  400a7a:	d900      	bls.n	400a7e <spi_select_device+0x12>
  400a7c:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400a7e:	4b06      	ldr	r3, [pc, #24]	; (400a98 <spi_select_device+0x2c>)
  400a80:	4798      	blx	r3
  400a82:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400a84:	6809      	ldr	r1, [r1, #0]
  400a86:	2903      	cmp	r1, #3
  400a88:	d8f8      	bhi.n	400a7c <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400a8a:	2301      	movs	r3, #1
  400a8c:	fa03 f101 	lsl.w	r1, r3, r1
  400a90:	43c9      	mvns	r1, r1
  400a92:	4b01      	ldr	r3, [pc, #4]	; (400a98 <spi_select_device+0x2c>)
  400a94:	4798      	blx	r3
		}
	}
}
  400a96:	e7f1      	b.n	400a7c <spi_select_device+0x10>
  400a98:	0040192d 	.word	0x0040192d

00400a9c <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  400a9c:	b11a      	cbz	r2, 400aa6 <spi_write_packet+0xa>
{
  400a9e:	b410      	push	{r4}
  400aa0:	460c      	mov	r4, r1
  400aa2:	4411      	add	r1, r2
  400aa4:	e006      	b.n	400ab4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  400aa6:	2000      	movs	r0, #0
  400aa8:	4770      	bx	lr
		val = data[i];
  400aaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400aae:	60c3      	str	r3, [r0, #12]
	while (len) {
  400ab0:	42a1      	cmp	r1, r4
  400ab2:	d00c      	beq.n	400ace <spi_write_packet+0x32>
{
  400ab4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400ab8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400aba:	f012 0f02 	tst.w	r2, #2
  400abe:	d1f4      	bne.n	400aaa <spi_write_packet+0xe>
			if (!timeout--) {
  400ac0:	3b01      	subs	r3, #1
  400ac2:	d1f9      	bne.n	400ab8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  400ac4:	f06f 0002 	mvn.w	r0, #2
}
  400ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400acc:	4770      	bx	lr
	return STATUS_OK;
  400ace:	2000      	movs	r0, #0
  400ad0:	e7fa      	b.n	400ac8 <spi_write_packet+0x2c>

00400ad2 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400ad2:	b13a      	cbz	r2, 400ae4 <spi_read_packet+0x12>
{
  400ad4:	b470      	push	{r4, r5, r6}
  400ad6:	4615      	mov	r5, r2
  400ad8:	460c      	mov	r4, r1
  400ada:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400adc:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400ade:	f240 2101 	movw	r1, #513	; 0x201
  400ae2:	e012      	b.n	400b0a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400ae4:	2000      	movs	r0, #0
  400ae6:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ae8:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400aea:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400aee:	6902      	ldr	r2, [r0, #16]
  400af0:	ea31 0202 	bics.w	r2, r1, r2
  400af4:	d004      	beq.n	400b00 <spi_read_packet+0x2e>
			if (!timeout--) {
  400af6:	3b01      	subs	r3, #1
  400af8:	d1f9      	bne.n	400aee <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400afa:	f06f 0002 	mvn.w	r0, #2
  400afe:	e00e      	b.n	400b1e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400b00:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400b02:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400b06:	42a5      	cmp	r5, r4
  400b08:	d00b      	beq.n	400b22 <spi_read_packet+0x50>
{
  400b0a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400b0e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400b10:	f012 0f02 	tst.w	r2, #2
  400b14:	d1e8      	bne.n	400ae8 <spi_read_packet+0x16>
			if (!timeout--) {
  400b16:	3b01      	subs	r3, #1
  400b18:	d1f9      	bne.n	400b0e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400b1a:	f06f 0002 	mvn.w	r0, #2
}
  400b1e:	bc70      	pop	{r4, r5, r6}
  400b20:	4770      	bx	lr
	return STATUS_OK;
  400b22:	2000      	movs	r0, #0
  400b24:	e7fb      	b.n	400b1e <spi_read_packet+0x4c>
	...

00400b28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400b2c:	b980      	cbnz	r0, 400b50 <_read+0x28>
  400b2e:	460c      	mov	r4, r1
  400b30:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400b32:	2a00      	cmp	r2, #0
  400b34:	dd0f      	ble.n	400b56 <_read+0x2e>
  400b36:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400b38:	4e08      	ldr	r6, [pc, #32]	; (400b5c <_read+0x34>)
  400b3a:	4d09      	ldr	r5, [pc, #36]	; (400b60 <_read+0x38>)
  400b3c:	6830      	ldr	r0, [r6, #0]
  400b3e:	4621      	mov	r1, r4
  400b40:	682b      	ldr	r3, [r5, #0]
  400b42:	4798      	blx	r3
		ptr++;
  400b44:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400b46:	42bc      	cmp	r4, r7
  400b48:	d1f8      	bne.n	400b3c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400b4a:	4640      	mov	r0, r8
  400b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b50:	f04f 38ff 	mov.w	r8, #4294967295
  400b54:	e7f9      	b.n	400b4a <_read+0x22>
	for (; len > 0; --len) {
  400b56:	4680      	mov	r8, r0
  400b58:	e7f7      	b.n	400b4a <_read+0x22>
  400b5a:	bf00      	nop
  400b5c:	2040c82c 	.word	0x2040c82c
  400b60:	2040c824 	.word	0x2040c824

00400b64 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400b64:	3801      	subs	r0, #1
  400b66:	2802      	cmp	r0, #2
  400b68:	d815      	bhi.n	400b96 <_write+0x32>
{
  400b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b6e:	460e      	mov	r6, r1
  400b70:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400b72:	b19a      	cbz	r2, 400b9c <_write+0x38>
  400b74:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400b76:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400bb0 <_write+0x4c>
  400b7a:	4f0c      	ldr	r7, [pc, #48]	; (400bac <_write+0x48>)
  400b7c:	f8d8 0000 	ldr.w	r0, [r8]
  400b80:	f815 1b01 	ldrb.w	r1, [r5], #1
  400b84:	683b      	ldr	r3, [r7, #0]
  400b86:	4798      	blx	r3
  400b88:	2800      	cmp	r0, #0
  400b8a:	db0a      	blt.n	400ba2 <_write+0x3e>
  400b8c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400b8e:	3c01      	subs	r4, #1
  400b90:	d1f4      	bne.n	400b7c <_write+0x18>
  400b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b96:	f04f 30ff 	mov.w	r0, #4294967295
  400b9a:	4770      	bx	lr
	for (; len != 0; --len) {
  400b9c:	4610      	mov	r0, r2
  400b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400ba2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400baa:	bf00      	nop
  400bac:	2040c828 	.word	0x2040c828
  400bb0:	2040c82c 	.word	0x2040c82c

00400bb4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400bb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bbc:	4b9e      	ldr	r3, [pc, #632]	; (400e38 <board_init+0x284>)
  400bbe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400bc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bc4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400bc8:	4b9c      	ldr	r3, [pc, #624]	; (400e3c <board_init+0x288>)
  400bca:	2200      	movs	r2, #0
  400bcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400bd0:	695a      	ldr	r2, [r3, #20]
  400bd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400bd6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bdc:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400be0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400be4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400be8:	f007 0007 	and.w	r0, r7, #7
  400bec:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400bee:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400bf2:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400bf6:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400bfa:	f3bf 8f4f 	dsb	sy
  400bfe:	f04f 34ff 	mov.w	r4, #4294967295
  400c02:	fa04 fc00 	lsl.w	ip, r4, r0
  400c06:	fa06 f000 	lsl.w	r0, r6, r0
  400c0a:	fa04 f40e 	lsl.w	r4, r4, lr
  400c0e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400c12:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400c14:	463a      	mov	r2, r7
  400c16:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400c18:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400c1c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400c20:	3a01      	subs	r2, #1
  400c22:	4423      	add	r3, r4
  400c24:	f1b2 3fff 	cmp.w	r2, #4294967295
  400c28:	d1f6      	bne.n	400c18 <board_init+0x64>
        } while(sets--);
  400c2a:	3e01      	subs	r6, #1
  400c2c:	4460      	add	r0, ip
  400c2e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400c32:	d1ef      	bne.n	400c14 <board_init+0x60>
  400c34:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400c38:	4b80      	ldr	r3, [pc, #512]	; (400e3c <board_init+0x288>)
  400c3a:	695a      	ldr	r2, [r3, #20]
  400c3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400c40:	615a      	str	r2, [r3, #20]
  400c42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c46:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c4a:	4a7d      	ldr	r2, [pc, #500]	; (400e40 <board_init+0x28c>)
  400c4c:	497d      	ldr	r1, [pc, #500]	; (400e44 <board_init+0x290>)
  400c4e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c50:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400c54:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400c56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c5a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400c5e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400c62:	f022 0201 	bic.w	r2, r2, #1
  400c66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400c6a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400c6e:	f022 0201 	bic.w	r2, r2, #1
  400c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c7a:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400c7e:	200a      	movs	r0, #10
  400c80:	4c71      	ldr	r4, [pc, #452]	; (400e48 <board_init+0x294>)
  400c82:	47a0      	blx	r4
  400c84:	200b      	movs	r0, #11
  400c86:	47a0      	blx	r4
  400c88:	200c      	movs	r0, #12
  400c8a:	47a0      	blx	r4
  400c8c:	2010      	movs	r0, #16
  400c8e:	47a0      	blx	r4
  400c90:	2011      	movs	r0, #17
  400c92:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c94:	4e6d      	ldr	r6, [pc, #436]	; (400e4c <board_init+0x298>)
  400c96:	f44f 7880 	mov.w	r8, #256	; 0x100
  400c9a:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c9e:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ca2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ca6:	4c6a      	ldr	r4, [pc, #424]	; (400e50 <board_init+0x29c>)
  400ca8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400cac:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400cb2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400cb4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cb8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400cba:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400cbc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400cc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400cc6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cc8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400cce:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400cd0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400cd4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400cd8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400ce0:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ce2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ce6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ce8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cee:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400cf0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400cf4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cf6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400cf8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400cfc:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cfe:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400d00:	4a54      	ldr	r2, [pc, #336]	; (400e54 <board_init+0x2a0>)
  400d02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400d06:	f043 0310 	orr.w	r3, r3, #16
  400d0a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400d0e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400d12:	2310      	movs	r3, #16
  400d14:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d1a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d1c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400d22:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400d24:	4319      	orrs	r1, r3
  400d26:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400d28:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400d2a:	4319      	orrs	r1, r3
  400d2c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d2e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400d30:	2208      	movs	r2, #8
  400d32:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400d34:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d38:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d3a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d3c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d40:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400d42:	f021 0108 	bic.w	r1, r1, #8
  400d46:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d48:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400d4a:	f021 0108 	bic.w	r1, r1, #8
  400d4e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d50:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400d52:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400d54:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d58:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d5a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d60:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400d62:	f022 0210 	bic.w	r2, r2, #16
  400d66:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d68:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400d6a:	f022 0210 	bic.w	r2, r2, #16
  400d6e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d70:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400d72:	2300      	movs	r3, #0
  400d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400d78:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d7c:	4630      	mov	r0, r6
  400d7e:	4f36      	ldr	r7, [pc, #216]	; (400e58 <board_init+0x2a4>)
  400d80:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400d82:	2300      	movs	r3, #0
  400d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400d88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d8c:	4630      	mov	r0, r6
  400d8e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400d90:	2301      	movs	r3, #1
  400d92:	22ff      	movs	r2, #255	; 0xff
  400d94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d98:	4630      	mov	r0, r6
  400d9a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400d9c:	2301      	movs	r3, #1
  400d9e:	223f      	movs	r2, #63	; 0x3f
  400da0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400da4:	482d      	ldr	r0, [pc, #180]	; (400e5c <board_init+0x2a8>)
  400da6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400da8:	2301      	movs	r3, #1
  400daa:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400dae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400db2:	4620      	mov	r0, r4
  400db4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400db6:	2301      	movs	r3, #1
  400db8:	4642      	mov	r2, r8
  400dba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400dbe:	4630      	mov	r0, r6
  400dc0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400dc2:	2301      	movs	r3, #1
  400dc4:	462a      	mov	r2, r5
  400dc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400dca:	4630      	mov	r0, r6
  400dcc:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400dce:	2301      	movs	r3, #1
  400dd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400dd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400dd8:	4821      	ldr	r0, [pc, #132]	; (400e60 <board_init+0x2ac>)
  400dda:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400ddc:	2300      	movs	r3, #0
  400dde:	f44f 7200 	mov.w	r2, #512	; 0x200
  400de2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400de6:	4630      	mov	r0, r6
  400de8:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400dea:	f44f 7100 	mov.w	r1, #512	; 0x200
  400dee:	4630      	mov	r0, r6
  400df0:	4b1c      	ldr	r3, [pc, #112]	; (400e64 <board_init+0x2b0>)
  400df2:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400df4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400df8:	2074      	movs	r0, #116	; 0x74
  400dfa:	4c1b      	ldr	r4, [pc, #108]	; (400e68 <board_init+0x2b4>)
  400dfc:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400dfe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e02:	2075      	movs	r0, #117	; 0x75
  400e04:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400e06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e0a:	2076      	movs	r0, #118	; 0x76
  400e0c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400e0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e12:	207b      	movs	r0, #123	; 0x7b
  400e14:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400e16:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400e1a:	2018      	movs	r0, #24
  400e1c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400e1e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400e22:	2006      	movs	r0, #6
  400e24:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400e26:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400e2a:	2053      	movs	r0, #83	; 0x53
  400e2c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400e2e:	2053      	movs	r0, #83	; 0x53
  400e30:	4b0e      	ldr	r3, [pc, #56]	; (400e6c <board_init+0x2b8>)
  400e32:	4798      	blx	r3
  400e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e38:	400e1850 	.word	0x400e1850
  400e3c:	e000ed00 	.word	0xe000ed00
  400e40:	400e0c00 	.word	0x400e0c00
  400e44:	5a00080c 	.word	0x5a00080c
  400e48:	004018e1 	.word	0x004018e1
  400e4c:	400e1200 	.word	0x400e1200
  400e50:	400e0e00 	.word	0x400e0e00
  400e54:	40088000 	.word	0x40088000
  400e58:	0040150d 	.word	0x0040150d
  400e5c:	400e1600 	.word	0x400e1600
  400e60:	400e1400 	.word	0x400e1400
  400e64:	00401419 	.word	0x00401419
  400e68:	004015dd 	.word	0x004015dd
  400e6c:	004015a5 	.word	0x004015a5

00400e70 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400e70:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400e72:	6804      	ldr	r4, [r0, #0]
  400e74:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400e78:	d302      	bcc.n	400e80 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400e7a:	f240 143f 	movw	r4, #319	; 0x13f
  400e7e:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400e80:	6814      	ldr	r4, [r2, #0]
  400e82:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400e86:	d302      	bcc.n	400e8e <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400e88:	f240 143f 	movw	r4, #319	; 0x13f
  400e8c:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400e8e:	680c      	ldr	r4, [r1, #0]
  400e90:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400e94:	d302      	bcc.n	400e9c <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400e96:	f240 14df 	movw	r4, #479	; 0x1df
  400e9a:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400e9c:	681c      	ldr	r4, [r3, #0]
  400e9e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400ea2:	d302      	bcc.n	400eaa <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400ea4:	f240 14df 	movw	r4, #479	; 0x1df
  400ea8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400eaa:	6804      	ldr	r4, [r0, #0]
  400eac:	6815      	ldr	r5, [r2, #0]
  400eae:	42ac      	cmp	r4, r5
  400eb0:	d901      	bls.n	400eb6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400eb2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400eb4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400eb6:	680a      	ldr	r2, [r1, #0]
  400eb8:	6818      	ldr	r0, [r3, #0]
  400eba:	4282      	cmp	r2, r0
  400ebc:	d901      	bls.n	400ec2 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400ebe:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400ec0:	601a      	str	r2, [r3, #0]
	}
}
  400ec2:	bc30      	pop	{r4, r5}
  400ec4:	4770      	bx	lr
	...

00400ec8 <ili9488_write_ram_prepare>:
{
  400ec8:	b510      	push	{r4, lr}
  400eca:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400ecc:	2006      	movs	r0, #6
  400ece:	4b0a      	ldr	r3, [pc, #40]	; (400ef8 <ili9488_write_ram_prepare+0x30>)
  400ed0:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400ed2:	2300      	movs	r3, #0
  400ed4:	2203      	movs	r2, #3
  400ed6:	212c      	movs	r1, #44	; 0x2c
  400ed8:	4808      	ldr	r0, [pc, #32]	; (400efc <ili9488_write_ram_prepare+0x34>)
  400eda:	4c09      	ldr	r4, [pc, #36]	; (400f00 <ili9488_write_ram_prepare+0x38>)
  400edc:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400ede:	2300      	movs	r3, #0
  400ee0:	9301      	str	r3, [sp, #4]
  400ee2:	9b01      	ldr	r3, [sp, #4]
  400ee4:	2bfe      	cmp	r3, #254	; 0xfe
  400ee6:	d805      	bhi.n	400ef4 <ili9488_write_ram_prepare+0x2c>
  400ee8:	9b01      	ldr	r3, [sp, #4]
  400eea:	3301      	adds	r3, #1
  400eec:	9301      	str	r3, [sp, #4]
  400eee:	9b01      	ldr	r3, [sp, #4]
  400ef0:	2bfe      	cmp	r3, #254	; 0xfe
  400ef2:	d9f9      	bls.n	400ee8 <ili9488_write_ram_prepare+0x20>
}
  400ef4:	b002      	add	sp, #8
  400ef6:	bd10      	pop	{r4, pc}
  400ef8:	004015c1 	.word	0x004015c1
  400efc:	40008000 	.word	0x40008000
  400f00:	00401955 	.word	0x00401955

00400f04 <ili9488_write_register>:
{
  400f04:	b570      	push	{r4, r5, r6, lr}
  400f06:	b082      	sub	sp, #8
  400f08:	4605      	mov	r5, r0
  400f0a:	460e      	mov	r6, r1
  400f0c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400f0e:	2006      	movs	r0, #6
  400f10:	4b14      	ldr	r3, [pc, #80]	; (400f64 <ili9488_write_register+0x60>)
  400f12:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400f14:	2300      	movs	r3, #0
  400f16:	2203      	movs	r2, #3
  400f18:	4629      	mov	r1, r5
  400f1a:	4813      	ldr	r0, [pc, #76]	; (400f68 <ili9488_write_register+0x64>)
  400f1c:	4d13      	ldr	r5, [pc, #76]	; (400f6c <ili9488_write_register+0x68>)
  400f1e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400f20:	2300      	movs	r3, #0
  400f22:	9301      	str	r3, [sp, #4]
  400f24:	9b01      	ldr	r3, [sp, #4]
  400f26:	2bfe      	cmp	r3, #254	; 0xfe
  400f28:	d805      	bhi.n	400f36 <ili9488_write_register+0x32>
  400f2a:	9b01      	ldr	r3, [sp, #4]
  400f2c:	3301      	adds	r3, #1
  400f2e:	9301      	str	r3, [sp, #4]
  400f30:	9b01      	ldr	r3, [sp, #4]
  400f32:	2bfe      	cmp	r3, #254	; 0xfe
  400f34:	d9f9      	bls.n	400f2a <ili9488_write_register+0x26>
	if(size > 0) {
  400f36:	b90c      	cbnz	r4, 400f3c <ili9488_write_register+0x38>
}
  400f38:	b002      	add	sp, #8
  400f3a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400f3c:	2006      	movs	r0, #6
  400f3e:	4b0c      	ldr	r3, [pc, #48]	; (400f70 <ili9488_write_register+0x6c>)
  400f40:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400f42:	4622      	mov	r2, r4
  400f44:	4631      	mov	r1, r6
  400f46:	4808      	ldr	r0, [pc, #32]	; (400f68 <ili9488_write_register+0x64>)
  400f48:	4b0a      	ldr	r3, [pc, #40]	; (400f74 <ili9488_write_register+0x70>)
  400f4a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400f4c:	2300      	movs	r3, #0
  400f4e:	9301      	str	r3, [sp, #4]
  400f50:	9b01      	ldr	r3, [sp, #4]
  400f52:	2b5e      	cmp	r3, #94	; 0x5e
  400f54:	d8f0      	bhi.n	400f38 <ili9488_write_register+0x34>
  400f56:	9b01      	ldr	r3, [sp, #4]
  400f58:	3301      	adds	r3, #1
  400f5a:	9301      	str	r3, [sp, #4]
  400f5c:	9b01      	ldr	r3, [sp, #4]
  400f5e:	2b5e      	cmp	r3, #94	; 0x5e
  400f60:	d9f9      	bls.n	400f56 <ili9488_write_register+0x52>
  400f62:	e7e9      	b.n	400f38 <ili9488_write_register+0x34>
  400f64:	004015c1 	.word	0x004015c1
  400f68:	40008000 	.word	0x40008000
  400f6c:	00401955 	.word	0x00401955
  400f70:	004015a5 	.word	0x004015a5
  400f74:	00400a9d 	.word	0x00400a9d

00400f78 <ili9488_write_ram_buffer>:
{
  400f78:	b530      	push	{r4, r5, lr}
  400f7a:	b083      	sub	sp, #12
  400f7c:	4604      	mov	r4, r0
  400f7e:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400f80:	2006      	movs	r0, #6
  400f82:	4b0a      	ldr	r3, [pc, #40]	; (400fac <ili9488_write_ram_buffer+0x34>)
  400f84:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400f86:	462a      	mov	r2, r5
  400f88:	4621      	mov	r1, r4
  400f8a:	4809      	ldr	r0, [pc, #36]	; (400fb0 <ili9488_write_ram_buffer+0x38>)
  400f8c:	4b09      	ldr	r3, [pc, #36]	; (400fb4 <ili9488_write_ram_buffer+0x3c>)
  400f8e:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400f90:	2300      	movs	r3, #0
  400f92:	9301      	str	r3, [sp, #4]
  400f94:	9b01      	ldr	r3, [sp, #4]
  400f96:	2bfe      	cmp	r3, #254	; 0xfe
  400f98:	d805      	bhi.n	400fa6 <ili9488_write_ram_buffer+0x2e>
  400f9a:	9b01      	ldr	r3, [sp, #4]
  400f9c:	3301      	adds	r3, #1
  400f9e:	9301      	str	r3, [sp, #4]
  400fa0:	9b01      	ldr	r3, [sp, #4]
  400fa2:	2bfe      	cmp	r3, #254	; 0xfe
  400fa4:	d9f9      	bls.n	400f9a <ili9488_write_ram_buffer+0x22>
}
  400fa6:	b003      	add	sp, #12
  400fa8:	bd30      	pop	{r4, r5, pc}
  400faa:	bf00      	nop
  400fac:	004015a5 	.word	0x004015a5
  400fb0:	40008000 	.word	0x40008000
  400fb4:	00400a9d 	.word	0x00400a9d

00400fb8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400fb8:	4601      	mov	r1, r0
  400fba:	b130      	cbz	r0, 400fca <ili9488_delay+0x12>
  400fbc:	4a03      	ldr	r2, [pc, #12]	; (400fcc <ili9488_delay+0x14>)
{
  400fbe:	4b04      	ldr	r3, [pc, #16]	; (400fd0 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400fc0:	3b01      	subs	r3, #1
  400fc2:	d1fd      	bne.n	400fc0 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400fc4:	4291      	cmp	r1, r2
  400fc6:	d8fa      	bhi.n	400fbe <ili9488_delay+0x6>
  400fc8:	4770      	bx	lr
  400fca:	4770      	bx	lr
  400fcc:	000186a1 	.word	0x000186a1
  400fd0:	000186a0 	.word	0x000186a0

00400fd4 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400fd4:	b500      	push	{lr}
  400fd6:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400fd8:	b958      	cbnz	r0, 400ff2 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400fda:	2348      	movs	r3, #72	; 0x48
  400fdc:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400fe0:	2201      	movs	r2, #1
  400fe2:	f10d 0107 	add.w	r1, sp, #7
  400fe6:	2036      	movs	r0, #54	; 0x36
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <ili9488_set_display_direction+0x28>)
  400fea:	4798      	blx	r3
}
  400fec:	b003      	add	sp, #12
  400fee:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400ff2:	23e8      	movs	r3, #232	; 0xe8
  400ff4:	f88d 3007 	strb.w	r3, [sp, #7]
  400ff8:	e7f2      	b.n	400fe0 <ili9488_set_display_direction+0xc>
  400ffa:	bf00      	nop
  400ffc:	00400f05 	.word	0x00400f05

00401000 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401000:	b510      	push	{r4, lr}
  401002:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  401004:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  401008:	3a01      	subs	r2, #1
  40100a:	4402      	add	r2, r0
  40100c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  401010:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  401014:	3b01      	subs	r3, #1
  401016:	4419      	add	r1, r3
  401018:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  40101c:	0a03      	lsrs	r3, r0, #8
  40101e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  401022:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  401026:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40102a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  40102e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401032:	2204      	movs	r2, #4
  401034:	eb0d 0102 	add.w	r1, sp, r2
  401038:	202a      	movs	r0, #42	; 0x2a
  40103a:	4c10      	ldr	r4, [pc, #64]	; (40107c <ili9488_set_window+0x7c>)
  40103c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40103e:	2200      	movs	r2, #0
  401040:	4611      	mov	r1, r2
  401042:	4610      	mov	r0, r2
  401044:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401046:	f89d 300b 	ldrb.w	r3, [sp, #11]
  40104a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  40104e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401052:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  401056:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40105a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  40105e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  401062:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401066:	2204      	movs	r2, #4
  401068:	eb0d 0102 	add.w	r1, sp, r2
  40106c:	202b      	movs	r0, #43	; 0x2b
  40106e:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401070:	2200      	movs	r2, #0
  401072:	4611      	mov	r1, r2
  401074:	4610      	mov	r0, r2
  401076:	47a0      	blx	r4
}
  401078:	b004      	add	sp, #16
  40107a:	bd10      	pop	{r4, pc}
  40107c:	00400f05 	.word	0x00400f05

00401080 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401080:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  401082:	2200      	movs	r2, #0
  401084:	4611      	mov	r1, r2
  401086:	2029      	movs	r0, #41	; 0x29
  401088:	4b01      	ldr	r3, [pc, #4]	; (401090 <ili9488_display_on+0x10>)
  40108a:	4798      	blx	r3
  40108c:	bd08      	pop	{r3, pc}
  40108e:	bf00      	nop
  401090:	00400f05 	.word	0x00400f05

00401094 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  401094:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  401096:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  40109a:	f3c0 2107 	ubfx	r1, r0, #8, #8
  40109e:	4b06      	ldr	r3, [pc, #24]	; (4010b8 <ili9488_set_foreground_color+0x24>)
  4010a0:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  4010a4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  4010a6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  4010a8:	7098      	strb	r0, [r3, #2]
  4010aa:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  4010ac:	4293      	cmp	r3, r2
  4010ae:	d1f9      	bne.n	4010a4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  4010b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010b4:	4770      	bx	lr
  4010b6:	bf00      	nop
  4010b8:	204009e4 	.word	0x204009e4

004010bc <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  4010bc:	b510      	push	{r4, lr}
  4010be:	b084      	sub	sp, #16
  4010c0:	f8ad 0006 	strh.w	r0, [sp, #6]
  4010c4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  4010c8:	0a03      	lsrs	r3, r0, #8
  4010ca:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  4010ce:	b2c0      	uxtb	r0, r0
  4010d0:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  4010d4:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  4010d8:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4010dc:	2204      	movs	r2, #4
  4010de:	a903      	add	r1, sp, #12
  4010e0:	202a      	movs	r0, #42	; 0x2a
  4010e2:	4c0e      	ldr	r4, [pc, #56]	; (40111c <ili9488_set_cursor_position+0x60>)
  4010e4:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4010e6:	2200      	movs	r2, #0
  4010e8:	4611      	mov	r1, r2
  4010ea:	4610      	mov	r0, r2
  4010ec:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  4010ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
  4010f2:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  4010f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4010fa:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  4010fe:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401102:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401106:	2204      	movs	r2, #4
  401108:	a903      	add	r1, sp, #12
  40110a:	202b      	movs	r0, #43	; 0x2b
  40110c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40110e:	2200      	movs	r2, #0
  401110:	4611      	mov	r1, r2
  401112:	4610      	mov	r0, r2
  401114:	47a0      	blx	r4
}
  401116:	b004      	add	sp, #16
  401118:	bd10      	pop	{r4, pc}
  40111a:	bf00      	nop
  40111c:	00400f05 	.word	0x00400f05

00401120 <ili9488_init>:
{
  401120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401124:	b087      	sub	sp, #28
  401126:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  401128:	2703      	movs	r7, #3
  40112a:	ae06      	add	r6, sp, #24
  40112c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  401130:	4d5d      	ldr	r5, [pc, #372]	; (4012a8 <ili9488_init+0x188>)
  401132:	4628      	mov	r0, r5
  401134:	4b5d      	ldr	r3, [pc, #372]	; (4012ac <ili9488_init+0x18c>)
  401136:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  401138:	2400      	movs	r4, #0
  40113a:	9400      	str	r4, [sp, #0]
  40113c:	4b5c      	ldr	r3, [pc, #368]	; (4012b0 <ili9488_init+0x190>)
  40113e:	463a      	mov	r2, r7
  401140:	4631      	mov	r1, r6
  401142:	4628      	mov	r0, r5
  401144:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4012e0 <ili9488_init+0x1c0>
  401148:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  40114a:	4622      	mov	r2, r4
  40114c:	4639      	mov	r1, r7
  40114e:	4628      	mov	r0, r5
  401150:	4b58      	ldr	r3, [pc, #352]	; (4012b4 <ili9488_init+0x194>)
  401152:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  401154:	4631      	mov	r1, r6
  401156:	4628      	mov	r0, r5
  401158:	4b57      	ldr	r3, [pc, #348]	; (4012b8 <ili9488_init+0x198>)
  40115a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40115c:	2001      	movs	r0, #1
  40115e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  401160:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401162:	4622      	mov	r2, r4
  401164:	4621      	mov	r1, r4
  401166:	4e55      	ldr	r6, [pc, #340]	; (4012bc <ili9488_init+0x19c>)
  401168:	47b0      	blx	r6
	ili9488_delay(200);
  40116a:	20c8      	movs	r0, #200	; 0xc8
  40116c:	4d54      	ldr	r5, [pc, #336]	; (4012c0 <ili9488_init+0x1a0>)
  40116e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  401170:	4622      	mov	r2, r4
  401172:	4621      	mov	r1, r4
  401174:	2011      	movs	r0, #17
  401176:	47b0      	blx	r6
	ili9488_delay(200);
  401178:	20c8      	movs	r0, #200	; 0xc8
  40117a:	47a8      	blx	r5
	reg = 0x81;
  40117c:	2381      	movs	r3, #129	; 0x81
  40117e:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  401182:	f88d 400b 	strb.w	r4, [sp, #11]
  401186:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  401188:	f04f 0801 	mov.w	r8, #1
  40118c:	4f4b      	ldr	r7, [pc, #300]	; (4012bc <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  40118e:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  401190:	4642      	mov	r2, r8
  401192:	f10d 010a 	add.w	r1, sp, #10
  401196:	20fb      	movs	r0, #251	; 0xfb
  401198:	47b8      	blx	r7
		reg++;
  40119a:	f89d 300a 	ldrb.w	r3, [sp, #10]
  40119e:	3301      	adds	r3, #1
  4011a0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  4011a4:	9503      	str	r5, [sp, #12]
  4011a6:	9b03      	ldr	r3, [sp, #12]
  4011a8:	2bfe      	cmp	r3, #254	; 0xfe
  4011aa:	d805      	bhi.n	4011b8 <ili9488_init+0x98>
  4011ac:	9b03      	ldr	r3, [sp, #12]
  4011ae:	3301      	adds	r3, #1
  4011b0:	9303      	str	r3, [sp, #12]
  4011b2:	9b03      	ldr	r3, [sp, #12]
  4011b4:	2bfe      	cmp	r3, #254	; 0xfe
  4011b6:	d9f9      	bls.n	4011ac <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4011b8:	462a      	mov	r2, r5
  4011ba:	4629      	mov	r1, r5
  4011bc:	20d3      	movs	r0, #211	; 0xd3
  4011be:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  4011c0:	2006      	movs	r0, #6
  4011c2:	4b40      	ldr	r3, [pc, #256]	; (4012c4 <ili9488_init+0x1a4>)
  4011c4:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  4011c6:	4642      	mov	r2, r8
  4011c8:	f10d 0109 	add.w	r1, sp, #9
  4011cc:	4836      	ldr	r0, [pc, #216]	; (4012a8 <ili9488_init+0x188>)
  4011ce:	4b3e      	ldr	r3, [pc, #248]	; (4012c8 <ili9488_init+0x1a8>)
  4011d0:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  4011d2:	9503      	str	r5, [sp, #12]
  4011d4:	9b03      	ldr	r3, [sp, #12]
  4011d6:	2bfe      	cmp	r3, #254	; 0xfe
  4011d8:	d805      	bhi.n	4011e6 <ili9488_init+0xc6>
  4011da:	9b03      	ldr	r3, [sp, #12]
  4011dc:	3301      	adds	r3, #1
  4011de:	9303      	str	r3, [sp, #12]
  4011e0:	9b03      	ldr	r3, [sp, #12]
  4011e2:	2bfe      	cmp	r3, #254	; 0xfe
  4011e4:	d9f9      	bls.n	4011da <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  4011e6:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4011ea:	40b3      	lsls	r3, r6
  4011ec:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  4011ee:	4642      	mov	r2, r8
  4011f0:	f10d 010b 	add.w	r1, sp, #11
  4011f4:	20fb      	movs	r0, #251	; 0xfb
  4011f6:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  4011f8:	9503      	str	r5, [sp, #12]
  4011fa:	9a03      	ldr	r2, [sp, #12]
  4011fc:	f640 73fe 	movw	r3, #4094	; 0xffe
  401200:	429a      	cmp	r2, r3
  401202:	d806      	bhi.n	401212 <ili9488_init+0xf2>
  401204:	461a      	mov	r2, r3
  401206:	9b03      	ldr	r3, [sp, #12]
  401208:	3301      	adds	r3, #1
  40120a:	9303      	str	r3, [sp, #12]
  40120c:	9b03      	ldr	r3, [sp, #12]
  40120e:	4293      	cmp	r3, r2
  401210:	d9f9      	bls.n	401206 <ili9488_init+0xe6>
  401212:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401214:	f116 0f08 	cmn.w	r6, #8
  401218:	d1ba      	bne.n	401190 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40121a:	f249 4388 	movw	r3, #38024	; 0x9488
  40121e:	429c      	cmp	r4, r3
  401220:	d003      	beq.n	40122a <ili9488_init+0x10a>
		return 1;
  401222:	2001      	movs	r0, #1
}
  401224:	b007      	add	sp, #28
  401226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40122a:	ad06      	add	r5, sp, #24
  40122c:	2348      	movs	r3, #72	; 0x48
  40122e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401232:	2201      	movs	r2, #1
  401234:	4629      	mov	r1, r5
  401236:	2036      	movs	r0, #54	; 0x36
  401238:	4e20      	ldr	r6, [pc, #128]	; (4012bc <ili9488_init+0x19c>)
  40123a:	47b0      	blx	r6
	ili9488_delay(100);
  40123c:	2064      	movs	r0, #100	; 0x64
  40123e:	4c20      	ldr	r4, [pc, #128]	; (4012c0 <ili9488_init+0x1a0>)
  401240:	47a0      	blx	r4
	param = 0x04;
  401242:	2304      	movs	r3, #4
  401244:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401248:	2201      	movs	r2, #1
  40124a:	4629      	mov	r1, r5
  40124c:	20cf      	movs	r0, #207	; 0xcf
  40124e:	47b0      	blx	r6
	ili9488_delay(100);
  401250:	2064      	movs	r0, #100	; 0x64
  401252:	47a0      	blx	r4
	param = 0x06;
  401254:	2306      	movs	r3, #6
  401256:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40125a:	2201      	movs	r2, #1
  40125c:	4629      	mov	r1, r5
  40125e:	203a      	movs	r0, #58	; 0x3a
  401260:	47b0      	blx	r6
	ili9488_delay(100);
  401262:	2064      	movs	r0, #100	; 0x64
  401264:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  401266:	2200      	movs	r2, #0
  401268:	4611      	mov	r1, r2
  40126a:	2013      	movs	r0, #19
  40126c:	47b0      	blx	r6
	ili9488_delay(100);
  40126e:	2064      	movs	r0, #100	; 0x64
  401270:	47a0      	blx	r4
	ili9488_display_on();
  401272:	4b16      	ldr	r3, [pc, #88]	; (4012cc <ili9488_init+0x1ac>)
  401274:	4798      	blx	r3
	ili9488_delay(100);
  401276:	2064      	movs	r0, #100	; 0x64
  401278:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  40127a:	2000      	movs	r0, #0
  40127c:	4b14      	ldr	r3, [pc, #80]	; (4012d0 <ili9488_init+0x1b0>)
  40127e:	4798      	blx	r3
	ili9488_delay(100);
  401280:	2064      	movs	r0, #100	; 0x64
  401282:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401284:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  401288:	f8b9 2000 	ldrh.w	r2, [r9]
  40128c:	2100      	movs	r1, #0
  40128e:	4608      	mov	r0, r1
  401290:	4c10      	ldr	r4, [pc, #64]	; (4012d4 <ili9488_init+0x1b4>)
  401292:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  401294:	f8d9 0008 	ldr.w	r0, [r9, #8]
  401298:	4b0f      	ldr	r3, [pc, #60]	; (4012d8 <ili9488_init+0x1b8>)
  40129a:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  40129c:	2100      	movs	r1, #0
  40129e:	4608      	mov	r0, r1
  4012a0:	4b0e      	ldr	r3, [pc, #56]	; (4012dc <ili9488_init+0x1bc>)
  4012a2:	4798      	blx	r3
	return 0;
  4012a4:	2000      	movs	r0, #0
  4012a6:	e7bd      	b.n	401224 <ili9488_init+0x104>
  4012a8:	40008000 	.word	0x40008000
  4012ac:	00400999 	.word	0x00400999
  4012b0:	01312d00 	.word	0x01312d00
  4012b4:	004019c5 	.word	0x004019c5
  4012b8:	00400a6d 	.word	0x00400a6d
  4012bc:	00400f05 	.word	0x00400f05
  4012c0:	00400fb9 	.word	0x00400fb9
  4012c4:	004015a5 	.word	0x004015a5
  4012c8:	00400ad3 	.word	0x00400ad3
  4012cc:	00401081 	.word	0x00401081
  4012d0:	00400fd5 	.word	0x00400fd5
  4012d4:	00401001 	.word	0x00401001
  4012d8:	00401095 	.word	0x00401095
  4012dc:	004010bd 	.word	0x004010bd
  4012e0:	004009ed 	.word	0x004009ed

004012e4 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  4012e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012e8:	b084      	sub	sp, #16
  4012ea:	9003      	str	r0, [sp, #12]
  4012ec:	9102      	str	r1, [sp, #8]
  4012ee:	9201      	str	r2, [sp, #4]
  4012f0:	aa04      	add	r2, sp, #16
  4012f2:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  4012f6:	4613      	mov	r3, r2
  4012f8:	aa01      	add	r2, sp, #4
  4012fa:	a902      	add	r1, sp, #8
  4012fc:	a803      	add	r0, sp, #12
  4012fe:	4c22      	ldr	r4, [pc, #136]	; (401388 <ili9488_draw_filled_rectangle+0xa4>)
  401300:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401302:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401306:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40130a:	9b00      	ldr	r3, [sp, #0]
  40130c:	3301      	adds	r3, #1
  40130e:	1a5b      	subs	r3, r3, r1
  401310:	9a01      	ldr	r2, [sp, #4]
  401312:	3201      	adds	r2, #1
  401314:	1a12      	subs	r2, r2, r0
  401316:	b29b      	uxth	r3, r3
  401318:	b292      	uxth	r2, r2
  40131a:	4c1c      	ldr	r4, [pc, #112]	; (40138c <ili9488_draw_filled_rectangle+0xa8>)
  40131c:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40131e:	4b1c      	ldr	r3, [pc, #112]	; (401390 <ili9488_draw_filled_rectangle+0xac>)
  401320:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401322:	9903      	ldr	r1, [sp, #12]
  401324:	9d01      	ldr	r5, [sp, #4]
  401326:	1a69      	subs	r1, r5, r1
  401328:	9d00      	ldr	r5, [sp, #0]
  40132a:	3501      	adds	r5, #1
  40132c:	9b02      	ldr	r3, [sp, #8]
  40132e:	1aed      	subs	r5, r5, r3
  401330:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401334:	4b17      	ldr	r3, [pc, #92]	; (401394 <ili9488_draw_filled_rectangle+0xb0>)
  401336:	fba3 2305 	umull	r2, r3, r3, r5
  40133a:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  40133c:	b163      	cbz	r3, 401358 <ili9488_draw_filled_rectangle+0x74>
  40133e:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401340:	f8df 8058 	ldr.w	r8, [pc, #88]	; 40139c <ili9488_draw_filled_rectangle+0xb8>
  401344:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  401348:	4e13      	ldr	r6, [pc, #76]	; (401398 <ili9488_draw_filled_rectangle+0xb4>)
  40134a:	4639      	mov	r1, r7
  40134c:	4640      	mov	r0, r8
  40134e:	47b0      	blx	r6
	while (blocks--) {
  401350:	3c01      	subs	r4, #1
  401352:	f1b4 3fff 	cmp.w	r4, #4294967295
  401356:	d1f8      	bne.n	40134a <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401358:	490e      	ldr	r1, [pc, #56]	; (401394 <ili9488_draw_filled_rectangle+0xb0>)
  40135a:	fba1 3105 	umull	r3, r1, r1, r5
  40135e:	0a09      	lsrs	r1, r1, #8
  401360:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401364:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  401368:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40136c:	480b      	ldr	r0, [pc, #44]	; (40139c <ili9488_draw_filled_rectangle+0xb8>)
  40136e:	4b0a      	ldr	r3, [pc, #40]	; (401398 <ili9488_draw_filled_rectangle+0xb4>)
  401370:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401372:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401376:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40137a:	2100      	movs	r1, #0
  40137c:	4608      	mov	r0, r1
  40137e:	4c03      	ldr	r4, [pc, #12]	; (40138c <ili9488_draw_filled_rectangle+0xa8>)
  401380:	47a0      	blx	r4

}
  401382:	b004      	add	sp, #16
  401384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401388:	00400e71 	.word	0x00400e71
  40138c:	00401001 	.word	0x00401001
  401390:	00400ec9 	.word	0x00400ec9
  401394:	cccccccd 	.word	0xcccccccd
  401398:	00400f79 	.word	0x00400f79
  40139c:	204009e4 	.word	0x204009e4

004013a0 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4013a0:	b510      	push	{r4, lr}
  4013a2:	b084      	sub	sp, #16
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4013a4:	9003      	str	r0, [sp, #12]
	dwY1 = ul_y;
  4013a6:	9102      	str	r1, [sp, #8]
	dwX2 = ul_x + ul_width - 1;
  4013a8:	3a01      	subs	r2, #1
  4013aa:	4410      	add	r0, r2
  4013ac:	9001      	str	r0, [sp, #4]
	dwY2 = ul_y + ul_height - 1;
  4013ae:	3b01      	subs	r3, #1
  4013b0:	4419      	add	r1, r3
  4013b2:	ab04      	add	r3, sp, #16
  4013b4:	f843 1d10 	str.w	r1, [r3, #-16]!

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4013b8:	aa01      	add	r2, sp, #4
  4013ba:	a902      	add	r1, sp, #8
  4013bc:	a803      	add	r0, sp, #12
  4013be:	4c13      	ldr	r4, [pc, #76]	; (40140c <ili9488_draw_pixmap+0x6c>)
  4013c0:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  4013c2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4013c6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  4013ca:	9b00      	ldr	r3, [sp, #0]
  4013cc:	3301      	adds	r3, #1
  4013ce:	1a5b      	subs	r3, r3, r1
  4013d0:	9a01      	ldr	r2, [sp, #4]
  4013d2:	3201      	adds	r2, #1
  4013d4:	1a12      	subs	r2, r2, r0
  4013d6:	b29b      	uxth	r3, r3
  4013d8:	b292      	uxth	r2, r2
  4013da:	4c0d      	ldr	r4, [pc, #52]	; (401410 <ili9488_draw_pixmap+0x70>)
  4013dc:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  4013de:	9903      	ldr	r1, [sp, #12]
  4013e0:	9a01      	ldr	r2, [sp, #4]
  4013e2:	1a51      	subs	r1, r2, r1
  4013e4:	9a02      	ldr	r2, [sp, #8]
  4013e6:	9b00      	ldr	r3, [sp, #0]
  4013e8:	1a9a      	subs	r2, r3, r2
  4013ea:	fb02 f201 	mul.w	r2, r2, r1

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  4013ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4013f2:	9906      	ldr	r1, [sp, #24]
  4013f4:	202c      	movs	r0, #44	; 0x2c
  4013f6:	4b07      	ldr	r3, [pc, #28]	; (401414 <ili9488_draw_pixmap+0x74>)
  4013f8:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4013fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4013fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401402:	2100      	movs	r1, #0
  401404:	4608      	mov	r0, r1
  401406:	47a0      	blx	r4
}
  401408:	b004      	add	sp, #16
  40140a:	bd10      	pop	{r4, pc}
  40140c:	00400e71 	.word	0x00400e71
  401410:	00401001 	.word	0x00401001
  401414:	00400f05 	.word	0x00400f05

00401418 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401418:	6301      	str	r1, [r0, #48]	; 0x30
  40141a:	4770      	bx	lr

0040141c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40141c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40141e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401422:	d03a      	beq.n	40149a <pio_set_peripheral+0x7e>
  401424:	d813      	bhi.n	40144e <pio_set_peripheral+0x32>
  401426:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40142a:	d025      	beq.n	401478 <pio_set_peripheral+0x5c>
  40142c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401430:	d10a      	bne.n	401448 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401432:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401434:	4313      	orrs	r3, r2
  401436:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401438:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40143a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40143c:	400b      	ands	r3, r1
  40143e:	ea23 0302 	bic.w	r3, r3, r2
  401442:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401444:	6042      	str	r2, [r0, #4]
  401446:	4770      	bx	lr
	switch (ul_type) {
  401448:	2900      	cmp	r1, #0
  40144a:	d1fb      	bne.n	401444 <pio_set_peripheral+0x28>
  40144c:	4770      	bx	lr
  40144e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401452:	d021      	beq.n	401498 <pio_set_peripheral+0x7c>
  401454:	d809      	bhi.n	40146a <pio_set_peripheral+0x4e>
  401456:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40145a:	d1f3      	bne.n	401444 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40145c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40145e:	4313      	orrs	r3, r2
  401460:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401462:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401464:	4313      	orrs	r3, r2
  401466:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401468:	e7ec      	b.n	401444 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40146a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40146e:	d013      	beq.n	401498 <pio_set_peripheral+0x7c>
  401470:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401474:	d010      	beq.n	401498 <pio_set_peripheral+0x7c>
  401476:	e7e5      	b.n	401444 <pio_set_peripheral+0x28>
{
  401478:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40147a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40147c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40147e:	43d3      	mvns	r3, r2
  401480:	4021      	ands	r1, r4
  401482:	461c      	mov	r4, r3
  401484:	4019      	ands	r1, r3
  401486:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40148a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40148c:	400b      	ands	r3, r1
  40148e:	4023      	ands	r3, r4
  401490:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401492:	6042      	str	r2, [r0, #4]
}
  401494:	f85d 4b04 	ldr.w	r4, [sp], #4
  401498:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40149a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40149c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40149e:	400b      	ands	r3, r1
  4014a0:	ea23 0302 	bic.w	r3, r3, r2
  4014a4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4014a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4014a8:	4313      	orrs	r3, r2
  4014aa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4014ac:	e7ca      	b.n	401444 <pio_set_peripheral+0x28>

004014ae <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4014ae:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4014b0:	f012 0f01 	tst.w	r2, #1
  4014b4:	d10d      	bne.n	4014d2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4014b6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4014b8:	f012 0f0a 	tst.w	r2, #10
  4014bc:	d00b      	beq.n	4014d6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4014be:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4014c0:	f012 0f02 	tst.w	r2, #2
  4014c4:	d109      	bne.n	4014da <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4014c6:	f012 0f08 	tst.w	r2, #8
  4014ca:	d008      	beq.n	4014de <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4014cc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4014d0:	e005      	b.n	4014de <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4014d2:	6641      	str	r1, [r0, #100]	; 0x64
  4014d4:	e7f0      	b.n	4014b8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4014d6:	6241      	str	r1, [r0, #36]	; 0x24
  4014d8:	e7f2      	b.n	4014c0 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4014da:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4014de:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4014e0:	6001      	str	r1, [r0, #0]
  4014e2:	4770      	bx	lr

004014e4 <pio_set_output>:
{
  4014e4:	b410      	push	{r4}
  4014e6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4014e8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4014ea:	b94c      	cbnz	r4, 401500 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4014ec:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4014ee:	b14b      	cbz	r3, 401504 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4014f0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4014f2:	b94a      	cbnz	r2, 401508 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4014f4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4014f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4014f8:	6001      	str	r1, [r0, #0]
}
  4014fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014fe:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401500:	6641      	str	r1, [r0, #100]	; 0x64
  401502:	e7f4      	b.n	4014ee <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401504:	6541      	str	r1, [r0, #84]	; 0x54
  401506:	e7f4      	b.n	4014f2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401508:	6301      	str	r1, [r0, #48]	; 0x30
  40150a:	e7f4      	b.n	4014f6 <pio_set_output+0x12>

0040150c <pio_configure>:
{
  40150c:	b570      	push	{r4, r5, r6, lr}
  40150e:	b082      	sub	sp, #8
  401510:	4605      	mov	r5, r0
  401512:	4616      	mov	r6, r2
  401514:	461c      	mov	r4, r3
	switch (ul_type) {
  401516:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40151a:	d014      	beq.n	401546 <pio_configure+0x3a>
  40151c:	d90a      	bls.n	401534 <pio_configure+0x28>
  40151e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401522:	d024      	beq.n	40156e <pio_configure+0x62>
  401524:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401528:	d021      	beq.n	40156e <pio_configure+0x62>
  40152a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40152e:	d017      	beq.n	401560 <pio_configure+0x54>
		return 0;
  401530:	2000      	movs	r0, #0
  401532:	e01a      	b.n	40156a <pio_configure+0x5e>
	switch (ul_type) {
  401534:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401538:	d005      	beq.n	401546 <pio_configure+0x3a>
  40153a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40153e:	d002      	beq.n	401546 <pio_configure+0x3a>
  401540:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401544:	d1f4      	bne.n	401530 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401546:	4632      	mov	r2, r6
  401548:	4628      	mov	r0, r5
  40154a:	4b11      	ldr	r3, [pc, #68]	; (401590 <pio_configure+0x84>)
  40154c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40154e:	f014 0f01 	tst.w	r4, #1
  401552:	d102      	bne.n	40155a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401554:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401556:	2001      	movs	r0, #1
  401558:	e007      	b.n	40156a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40155a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  40155c:	2001      	movs	r0, #1
  40155e:	e004      	b.n	40156a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401560:	461a      	mov	r2, r3
  401562:	4631      	mov	r1, r6
  401564:	4b0b      	ldr	r3, [pc, #44]	; (401594 <pio_configure+0x88>)
  401566:	4798      	blx	r3
	return 1;
  401568:	2001      	movs	r0, #1
}
  40156a:	b002      	add	sp, #8
  40156c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40156e:	f004 0301 	and.w	r3, r4, #1
  401572:	9300      	str	r3, [sp, #0]
  401574:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401578:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40157c:	bf14      	ite	ne
  40157e:	2200      	movne	r2, #0
  401580:	2201      	moveq	r2, #1
  401582:	4631      	mov	r1, r6
  401584:	4628      	mov	r0, r5
  401586:	4c04      	ldr	r4, [pc, #16]	; (401598 <pio_configure+0x8c>)
  401588:	47a0      	blx	r4
	return 1;
  40158a:	2001      	movs	r0, #1
		break;
  40158c:	e7ed      	b.n	40156a <pio_configure+0x5e>
  40158e:	bf00      	nop
  401590:	0040141d 	.word	0x0040141d
  401594:	004014af 	.word	0x004014af
  401598:	004014e5 	.word	0x004014e5

0040159c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40159c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40159e:	4770      	bx	lr

004015a0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4015a0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4015a2:	4770      	bx	lr

004015a4 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4015a4:	4b05      	ldr	r3, [pc, #20]	; (4015bc <pio_set_pin_high+0x18>)
  4015a6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4015aa:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4015ac:	f000 001f 	and.w	r0, r0, #31
  4015b0:	2201      	movs	r2, #1
  4015b2:	fa02 f000 	lsl.w	r0, r2, r0
  4015b6:	6318      	str	r0, [r3, #48]	; 0x30
  4015b8:	4770      	bx	lr
  4015ba:	bf00      	nop
  4015bc:	00200707 	.word	0x00200707

004015c0 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4015c0:	4b05      	ldr	r3, [pc, #20]	; (4015d8 <pio_set_pin_low+0x18>)
  4015c2:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4015c6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4015c8:	f000 001f 	and.w	r0, r0, #31
  4015cc:	2201      	movs	r2, #1
  4015ce:	fa02 f000 	lsl.w	r0, r2, r0
  4015d2:	6358      	str	r0, [r3, #52]	; 0x34
  4015d4:	4770      	bx	lr
  4015d6:	bf00      	nop
  4015d8:	00200707 	.word	0x00200707

004015dc <pio_configure_pin>:
{
  4015dc:	b570      	push	{r4, r5, r6, lr}
  4015de:	b082      	sub	sp, #8
  4015e0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4015e2:	4c46      	ldr	r4, [pc, #280]	; (4016fc <pio_configure_pin+0x120>)
  4015e4:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4015e8:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4015ea:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4015ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015f2:	d059      	beq.n	4016a8 <pio_configure_pin+0xcc>
  4015f4:	d80a      	bhi.n	40160c <pio_configure_pin+0x30>
  4015f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015fa:	d02f      	beq.n	40165c <pio_configure_pin+0x80>
  4015fc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401600:	d03f      	beq.n	401682 <pio_configure_pin+0xa6>
  401602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401606:	d016      	beq.n	401636 <pio_configure_pin+0x5a>
		return 0;
  401608:	2000      	movs	r0, #0
  40160a:	e012      	b.n	401632 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40160c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401610:	d05d      	beq.n	4016ce <pio_configure_pin+0xf2>
  401612:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401616:	d05a      	beq.n	4016ce <pio_configure_pin+0xf2>
  401618:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40161c:	d1f4      	bne.n	401608 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40161e:	f000 011f 	and.w	r1, r0, #31
  401622:	2601      	movs	r6, #1
  401624:	462a      	mov	r2, r5
  401626:	fa06 f101 	lsl.w	r1, r6, r1
  40162a:	4620      	mov	r0, r4
  40162c:	4b34      	ldr	r3, [pc, #208]	; (401700 <pio_configure_pin+0x124>)
  40162e:	4798      	blx	r3
	return 1;
  401630:	4630      	mov	r0, r6
}
  401632:	b002      	add	sp, #8
  401634:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401636:	f000 001f 	and.w	r0, r0, #31
  40163a:	2601      	movs	r6, #1
  40163c:	4086      	lsls	r6, r0
  40163e:	4632      	mov	r2, r6
  401640:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401644:	4620      	mov	r0, r4
  401646:	4b2f      	ldr	r3, [pc, #188]	; (401704 <pio_configure_pin+0x128>)
  401648:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40164a:	f015 0f01 	tst.w	r5, #1
  40164e:	d102      	bne.n	401656 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401650:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401652:	2001      	movs	r0, #1
  401654:	e7ed      	b.n	401632 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401656:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401658:	2001      	movs	r0, #1
  40165a:	e7ea      	b.n	401632 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40165c:	f000 001f 	and.w	r0, r0, #31
  401660:	2601      	movs	r6, #1
  401662:	4086      	lsls	r6, r0
  401664:	4632      	mov	r2, r6
  401666:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40166a:	4620      	mov	r0, r4
  40166c:	4b25      	ldr	r3, [pc, #148]	; (401704 <pio_configure_pin+0x128>)
  40166e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401670:	f015 0f01 	tst.w	r5, #1
  401674:	d102      	bne.n	40167c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  401676:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401678:	2001      	movs	r0, #1
  40167a:	e7da      	b.n	401632 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40167c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40167e:	2001      	movs	r0, #1
  401680:	e7d7      	b.n	401632 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401682:	f000 001f 	and.w	r0, r0, #31
  401686:	2601      	movs	r6, #1
  401688:	4086      	lsls	r6, r0
  40168a:	4632      	mov	r2, r6
  40168c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401690:	4620      	mov	r0, r4
  401692:	4b1c      	ldr	r3, [pc, #112]	; (401704 <pio_configure_pin+0x128>)
  401694:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401696:	f015 0f01 	tst.w	r5, #1
  40169a:	d102      	bne.n	4016a2 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  40169c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40169e:	2001      	movs	r0, #1
  4016a0:	e7c7      	b.n	401632 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4016a2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4016a4:	2001      	movs	r0, #1
  4016a6:	e7c4      	b.n	401632 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4016a8:	f000 001f 	and.w	r0, r0, #31
  4016ac:	2601      	movs	r6, #1
  4016ae:	4086      	lsls	r6, r0
  4016b0:	4632      	mov	r2, r6
  4016b2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4016b6:	4620      	mov	r0, r4
  4016b8:	4b12      	ldr	r3, [pc, #72]	; (401704 <pio_configure_pin+0x128>)
  4016ba:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4016bc:	f015 0f01 	tst.w	r5, #1
  4016c0:	d102      	bne.n	4016c8 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4016c2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4016c4:	2001      	movs	r0, #1
  4016c6:	e7b4      	b.n	401632 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4016c8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4016ca:	2001      	movs	r0, #1
  4016cc:	e7b1      	b.n	401632 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4016ce:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4016d2:	f000 011f 	and.w	r1, r0, #31
  4016d6:	2601      	movs	r6, #1
  4016d8:	ea05 0306 	and.w	r3, r5, r6
  4016dc:	9300      	str	r3, [sp, #0]
  4016de:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4016e2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4016e6:	bf14      	ite	ne
  4016e8:	2200      	movne	r2, #0
  4016ea:	2201      	moveq	r2, #1
  4016ec:	fa06 f101 	lsl.w	r1, r6, r1
  4016f0:	4620      	mov	r0, r4
  4016f2:	4c05      	ldr	r4, [pc, #20]	; (401708 <pio_configure_pin+0x12c>)
  4016f4:	47a0      	blx	r4
	return 1;
  4016f6:	4630      	mov	r0, r6
		break;
  4016f8:	e79b      	b.n	401632 <pio_configure_pin+0x56>
  4016fa:	bf00      	nop
  4016fc:	00200707 	.word	0x00200707
  401700:	004014af 	.word	0x004014af
  401704:	0040141d 	.word	0x0040141d
  401708:	004014e5 	.word	0x004014e5

0040170c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401710:	4604      	mov	r4, r0
  401712:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401714:	4b0e      	ldr	r3, [pc, #56]	; (401750 <pio_handler_process+0x44>)
  401716:	4798      	blx	r3
  401718:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40171a:	4620      	mov	r0, r4
  40171c:	4b0d      	ldr	r3, [pc, #52]	; (401754 <pio_handler_process+0x48>)
  40171e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401720:	4005      	ands	r5, r0
  401722:	d013      	beq.n	40174c <pio_handler_process+0x40>
  401724:	4c0c      	ldr	r4, [pc, #48]	; (401758 <pio_handler_process+0x4c>)
  401726:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40172a:	e003      	b.n	401734 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40172c:	42b4      	cmp	r4, r6
  40172e:	d00d      	beq.n	40174c <pio_handler_process+0x40>
  401730:	3410      	adds	r4, #16
		while (status != 0) {
  401732:	b15d      	cbz	r5, 40174c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401734:	6820      	ldr	r0, [r4, #0]
  401736:	4540      	cmp	r0, r8
  401738:	d1f8      	bne.n	40172c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40173a:	6861      	ldr	r1, [r4, #4]
  40173c:	4229      	tst	r1, r5
  40173e:	d0f5      	beq.n	40172c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401740:	68e3      	ldr	r3, [r4, #12]
  401742:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401744:	6863      	ldr	r3, [r4, #4]
  401746:	ea25 0503 	bic.w	r5, r5, r3
  40174a:	e7ef      	b.n	40172c <pio_handler_process+0x20>
  40174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401750:	0040159d 	.word	0x0040159d
  401754:	004015a1 	.word	0x004015a1
  401758:	20400da4 	.word	0x20400da4

0040175c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40175c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40175e:	210a      	movs	r1, #10
  401760:	4801      	ldr	r0, [pc, #4]	; (401768 <PIOA_Handler+0xc>)
  401762:	4b02      	ldr	r3, [pc, #8]	; (40176c <PIOA_Handler+0x10>)
  401764:	4798      	blx	r3
  401766:	bd08      	pop	{r3, pc}
  401768:	400e0e00 	.word	0x400e0e00
  40176c:	0040170d 	.word	0x0040170d

00401770 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401770:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401772:	210b      	movs	r1, #11
  401774:	4801      	ldr	r0, [pc, #4]	; (40177c <PIOB_Handler+0xc>)
  401776:	4b02      	ldr	r3, [pc, #8]	; (401780 <PIOB_Handler+0x10>)
  401778:	4798      	blx	r3
  40177a:	bd08      	pop	{r3, pc}
  40177c:	400e1000 	.word	0x400e1000
  401780:	0040170d 	.word	0x0040170d

00401784 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401784:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401786:	210c      	movs	r1, #12
  401788:	4801      	ldr	r0, [pc, #4]	; (401790 <PIOC_Handler+0xc>)
  40178a:	4b02      	ldr	r3, [pc, #8]	; (401794 <PIOC_Handler+0x10>)
  40178c:	4798      	blx	r3
  40178e:	bd08      	pop	{r3, pc}
  401790:	400e1200 	.word	0x400e1200
  401794:	0040170d 	.word	0x0040170d

00401798 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401798:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40179a:	2110      	movs	r1, #16
  40179c:	4801      	ldr	r0, [pc, #4]	; (4017a4 <PIOD_Handler+0xc>)
  40179e:	4b02      	ldr	r3, [pc, #8]	; (4017a8 <PIOD_Handler+0x10>)
  4017a0:	4798      	blx	r3
  4017a2:	bd08      	pop	{r3, pc}
  4017a4:	400e1400 	.word	0x400e1400
  4017a8:	0040170d 	.word	0x0040170d

004017ac <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4017ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4017ae:	2111      	movs	r1, #17
  4017b0:	4801      	ldr	r0, [pc, #4]	; (4017b8 <PIOE_Handler+0xc>)
  4017b2:	4b02      	ldr	r3, [pc, #8]	; (4017bc <PIOE_Handler+0x10>)
  4017b4:	4798      	blx	r3
  4017b6:	bd08      	pop	{r3, pc}
  4017b8:	400e1600 	.word	0x400e1600
  4017bc:	0040170d 	.word	0x0040170d

004017c0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4017c0:	2803      	cmp	r0, #3
  4017c2:	d011      	beq.n	4017e8 <pmc_mck_set_division+0x28>
  4017c4:	2804      	cmp	r0, #4
  4017c6:	d012      	beq.n	4017ee <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4017c8:	2802      	cmp	r0, #2
  4017ca:	bf0c      	ite	eq
  4017cc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4017d0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4017d2:	4a08      	ldr	r2, [pc, #32]	; (4017f4 <pmc_mck_set_division+0x34>)
  4017d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4017da:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4017dc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4017de:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4017e0:	f013 0f08 	tst.w	r3, #8
  4017e4:	d0fb      	beq.n	4017de <pmc_mck_set_division+0x1e>
}
  4017e6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4017e8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4017ec:	e7f1      	b.n	4017d2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4017ee:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4017f2:	e7ee      	b.n	4017d2 <pmc_mck_set_division+0x12>
  4017f4:	400e0600 	.word	0x400e0600

004017f8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4017f8:	4a17      	ldr	r2, [pc, #92]	; (401858 <pmc_switch_mck_to_pllack+0x60>)
  4017fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401800:	4318      	orrs	r0, r3
  401802:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401804:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401806:	f013 0f08 	tst.w	r3, #8
  40180a:	d10a      	bne.n	401822 <pmc_switch_mck_to_pllack+0x2a>
  40180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401810:	4911      	ldr	r1, [pc, #68]	; (401858 <pmc_switch_mck_to_pllack+0x60>)
  401812:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401814:	f012 0f08 	tst.w	r2, #8
  401818:	d103      	bne.n	401822 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40181a:	3b01      	subs	r3, #1
  40181c:	d1f9      	bne.n	401812 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40181e:	2001      	movs	r0, #1
  401820:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401822:	4a0d      	ldr	r2, [pc, #52]	; (401858 <pmc_switch_mck_to_pllack+0x60>)
  401824:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401826:	f023 0303 	bic.w	r3, r3, #3
  40182a:	f043 0302 	orr.w	r3, r3, #2
  40182e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401830:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401832:	f013 0f08 	tst.w	r3, #8
  401836:	d10a      	bne.n	40184e <pmc_switch_mck_to_pllack+0x56>
  401838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40183c:	4906      	ldr	r1, [pc, #24]	; (401858 <pmc_switch_mck_to_pllack+0x60>)
  40183e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401840:	f012 0f08 	tst.w	r2, #8
  401844:	d105      	bne.n	401852 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401846:	3b01      	subs	r3, #1
  401848:	d1f9      	bne.n	40183e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40184a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40184c:	4770      	bx	lr
	return 0;
  40184e:	2000      	movs	r0, #0
  401850:	4770      	bx	lr
  401852:	2000      	movs	r0, #0
  401854:	4770      	bx	lr
  401856:	bf00      	nop
  401858:	400e0600 	.word	0x400e0600

0040185c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40185c:	b9a0      	cbnz	r0, 401888 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40185e:	480e      	ldr	r0, [pc, #56]	; (401898 <pmc_switch_mainck_to_xtal+0x3c>)
  401860:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401862:	0209      	lsls	r1, r1, #8
  401864:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401866:	4a0d      	ldr	r2, [pc, #52]	; (40189c <pmc_switch_mainck_to_xtal+0x40>)
  401868:	401a      	ands	r2, r3
  40186a:	4b0d      	ldr	r3, [pc, #52]	; (4018a0 <pmc_switch_mainck_to_xtal+0x44>)
  40186c:	4313      	orrs	r3, r2
  40186e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401870:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401872:	4602      	mov	r2, r0
  401874:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401876:	f013 0f01 	tst.w	r3, #1
  40187a:	d0fb      	beq.n	401874 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40187c:	4a06      	ldr	r2, [pc, #24]	; (401898 <pmc_switch_mainck_to_xtal+0x3c>)
  40187e:	6a11      	ldr	r1, [r2, #32]
  401880:	4b08      	ldr	r3, [pc, #32]	; (4018a4 <pmc_switch_mainck_to_xtal+0x48>)
  401882:	430b      	orrs	r3, r1
  401884:	6213      	str	r3, [r2, #32]
  401886:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401888:	4903      	ldr	r1, [pc, #12]	; (401898 <pmc_switch_mainck_to_xtal+0x3c>)
  40188a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40188c:	4a06      	ldr	r2, [pc, #24]	; (4018a8 <pmc_switch_mainck_to_xtal+0x4c>)
  40188e:	401a      	ands	r2, r3
  401890:	4b06      	ldr	r3, [pc, #24]	; (4018ac <pmc_switch_mainck_to_xtal+0x50>)
  401892:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401894:	620b      	str	r3, [r1, #32]
  401896:	4770      	bx	lr
  401898:	400e0600 	.word	0x400e0600
  40189c:	ffc8fffc 	.word	0xffc8fffc
  4018a0:	00370001 	.word	0x00370001
  4018a4:	01370000 	.word	0x01370000
  4018a8:	fec8fffc 	.word	0xfec8fffc
  4018ac:	01370002 	.word	0x01370002

004018b0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4018b0:	4b02      	ldr	r3, [pc, #8]	; (4018bc <pmc_osc_is_ready_mainck+0xc>)
  4018b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4018b4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4018b8:	4770      	bx	lr
  4018ba:	bf00      	nop
  4018bc:	400e0600 	.word	0x400e0600

004018c0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4018c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018c4:	4b01      	ldr	r3, [pc, #4]	; (4018cc <pmc_disable_pllack+0xc>)
  4018c6:	629a      	str	r2, [r3, #40]	; 0x28
  4018c8:	4770      	bx	lr
  4018ca:	bf00      	nop
  4018cc:	400e0600 	.word	0x400e0600

004018d0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4018d0:	4b02      	ldr	r3, [pc, #8]	; (4018dc <pmc_is_locked_pllack+0xc>)
  4018d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4018d4:	f000 0002 	and.w	r0, r0, #2
  4018d8:	4770      	bx	lr
  4018da:	bf00      	nop
  4018dc:	400e0600 	.word	0x400e0600

004018e0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4018e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4018e4:	4b05      	ldr	r3, [pc, #20]	; (4018fc <pmc_enable_periph_clk+0x1c>)
  4018e6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4018ea:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4018ee:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4018f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4018f6:	2000      	movs	r0, #0
  4018f8:	4770      	bx	lr
  4018fa:	bf00      	nop
  4018fc:	400e0600 	.word	0x400e0600

00401900 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401900:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401902:	4b07      	ldr	r3, [pc, #28]	; (401920 <spi_enable_clock+0x20>)
  401904:	4298      	cmp	r0, r3
  401906:	d003      	beq.n	401910 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401908:	4b06      	ldr	r3, [pc, #24]	; (401924 <spi_enable_clock+0x24>)
  40190a:	4298      	cmp	r0, r3
  40190c:	d004      	beq.n	401918 <spi_enable_clock+0x18>
  40190e:	bd08      	pop	{r3, pc}
  401910:	2015      	movs	r0, #21
  401912:	4b05      	ldr	r3, [pc, #20]	; (401928 <spi_enable_clock+0x28>)
  401914:	4798      	blx	r3
  401916:	bd08      	pop	{r3, pc}
  401918:	202a      	movs	r0, #42	; 0x2a
  40191a:	4b03      	ldr	r3, [pc, #12]	; (401928 <spi_enable_clock+0x28>)
  40191c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40191e:	e7f6      	b.n	40190e <spi_enable_clock+0xe>
  401920:	40008000 	.word	0x40008000
  401924:	40058000 	.word	0x40058000
  401928:	004018e1 	.word	0x004018e1

0040192c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40192c:	6843      	ldr	r3, [r0, #4]
  40192e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401932:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401934:	6843      	ldr	r3, [r0, #4]
  401936:	0409      	lsls	r1, r1, #16
  401938:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40193c:	4319      	orrs	r1, r3
  40193e:	6041      	str	r1, [r0, #4]
  401940:	4770      	bx	lr

00401942 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401942:	6843      	ldr	r3, [r0, #4]
  401944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401948:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40194a:	6843      	ldr	r3, [r0, #4]
  40194c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401950:	6041      	str	r1, [r0, #4]
  401952:	4770      	bx	lr

00401954 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401954:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401956:	f643 2499 	movw	r4, #15001	; 0x3a99
  40195a:	6905      	ldr	r5, [r0, #16]
  40195c:	f015 0f02 	tst.w	r5, #2
  401960:	d103      	bne.n	40196a <spi_write+0x16>
		if (!timeout--) {
  401962:	3c01      	subs	r4, #1
  401964:	d1f9      	bne.n	40195a <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401966:	2001      	movs	r0, #1
  401968:	e00c      	b.n	401984 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40196a:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40196c:	f014 0f02 	tst.w	r4, #2
  401970:	d006      	beq.n	401980 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401972:	0412      	lsls	r2, r2, #16
  401974:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401978:	4311      	orrs	r1, r2
		if (uc_last) {
  40197a:	b10b      	cbz	r3, 401980 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40197c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401980:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401982:	2000      	movs	r0, #0
}
  401984:	bc30      	pop	{r4, r5}
  401986:	4770      	bx	lr

00401988 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401988:	b932      	cbnz	r2, 401998 <spi_set_clock_polarity+0x10>
  40198a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40198e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401990:	f023 0301 	bic.w	r3, r3, #1
  401994:	6303      	str	r3, [r0, #48]	; 0x30
  401996:	4770      	bx	lr
  401998:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40199c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40199e:	f043 0301 	orr.w	r3, r3, #1
  4019a2:	6303      	str	r3, [r0, #48]	; 0x30
  4019a4:	4770      	bx	lr

004019a6 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4019a6:	b932      	cbnz	r2, 4019b6 <spi_set_clock_phase+0x10>
  4019a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4019ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019ae:	f023 0302 	bic.w	r3, r3, #2
  4019b2:	6303      	str	r3, [r0, #48]	; 0x30
  4019b4:	4770      	bx	lr
  4019b6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4019ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019bc:	f043 0302 	orr.w	r3, r3, #2
  4019c0:	6303      	str	r3, [r0, #48]	; 0x30
  4019c2:	4770      	bx	lr

004019c4 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4019c4:	2a04      	cmp	r2, #4
  4019c6:	d003      	beq.n	4019d0 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4019c8:	b16a      	cbz	r2, 4019e6 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4019ca:	2a08      	cmp	r2, #8
  4019cc:	d016      	beq.n	4019fc <spi_configure_cs_behavior+0x38>
  4019ce:	4770      	bx	lr
  4019d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4019d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019d6:	f023 0308 	bic.w	r3, r3, #8
  4019da:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4019dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019de:	f043 0304 	orr.w	r3, r3, #4
  4019e2:	6303      	str	r3, [r0, #48]	; 0x30
  4019e4:	4770      	bx	lr
  4019e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4019ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019ec:	f023 0308 	bic.w	r3, r3, #8
  4019f0:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4019f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019f4:	f023 0304 	bic.w	r3, r3, #4
  4019f8:	6303      	str	r3, [r0, #48]	; 0x30
  4019fa:	4770      	bx	lr
  4019fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401a00:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a02:	f043 0308 	orr.w	r3, r3, #8
  401a06:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401a08:	e7e1      	b.n	4019ce <spi_configure_cs_behavior+0xa>

00401a0a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401a0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401a0e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401a14:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401a16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401a18:	431a      	orrs	r2, r3
  401a1a:	630a      	str	r2, [r1, #48]	; 0x30
  401a1c:	4770      	bx	lr

00401a1e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401a1e:	1e43      	subs	r3, r0, #1
  401a20:	4419      	add	r1, r3
  401a22:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401a26:	1e43      	subs	r3, r0, #1
  401a28:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401a2a:	bf94      	ite	ls
  401a2c:	b200      	sxthls	r0, r0
		return -1;
  401a2e:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401a32:	4770      	bx	lr

00401a34 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401a34:	b17a      	cbz	r2, 401a56 <spi_set_baudrate_div+0x22>
{
  401a36:	b410      	push	{r4}
  401a38:	4614      	mov	r4, r2
  401a3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401a3e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401a40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401a44:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401a46:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401a48:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401a4c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401a4e:	2000      	movs	r0, #0
}
  401a50:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a54:	4770      	bx	lr
        return -1;
  401a56:	f04f 30ff 	mov.w	r0, #4294967295
  401a5a:	4770      	bx	lr

00401a5c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401a5c:	b410      	push	{r4}
  401a5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401a62:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401a64:	b280      	uxth	r0, r0
  401a66:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401a68:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401a6a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401a72:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401a74:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a78:	4770      	bx	lr
	...

00401a7c <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401a7c:	4b28      	ldr	r3, [pc, #160]	; (401b20 <twihs_set_speed+0xa4>)
  401a7e:	4299      	cmp	r1, r3
  401a80:	d84b      	bhi.n	401b1a <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401a82:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401a86:	4299      	cmp	r1, r3
  401a88:	d92d      	bls.n	401ae6 <twihs_set_speed+0x6a>
{
  401a8a:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401a8c:	4c25      	ldr	r4, [pc, #148]	; (401b24 <twihs_set_speed+0xa8>)
  401a8e:	fba4 3402 	umull	r3, r4, r4, r2
  401a92:	0ba4      	lsrs	r4, r4, #14
  401a94:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401a96:	4b24      	ldr	r3, [pc, #144]	; (401b28 <twihs_set_speed+0xac>)
  401a98:	440b      	add	r3, r1
  401a9a:	009b      	lsls	r3, r3, #2
  401a9c:	fbb2 f2f3 	udiv	r2, r2, r3
  401aa0:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401aa2:	2cff      	cmp	r4, #255	; 0xff
  401aa4:	d91d      	bls.n	401ae2 <twihs_set_speed+0x66>
  401aa6:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401aa8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401aaa:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401aac:	2cff      	cmp	r4, #255	; 0xff
  401aae:	d901      	bls.n	401ab4 <twihs_set_speed+0x38>
  401ab0:	2906      	cmp	r1, #6
  401ab2:	d9f9      	bls.n	401aa8 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ab4:	2aff      	cmp	r2, #255	; 0xff
  401ab6:	d907      	bls.n	401ac8 <twihs_set_speed+0x4c>
  401ab8:	2906      	cmp	r1, #6
  401aba:	d805      	bhi.n	401ac8 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401abc:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401abe:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ac0:	2aff      	cmp	r2, #255	; 0xff
  401ac2:	d901      	bls.n	401ac8 <twihs_set_speed+0x4c>
  401ac4:	2906      	cmp	r1, #6
  401ac6:	d9f9      	bls.n	401abc <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401ac8:	0213      	lsls	r3, r2, #8
  401aca:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401acc:	0409      	lsls	r1, r1, #16
  401ace:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401ad2:	430b      	orrs	r3, r1
  401ad4:	b2e4      	uxtb	r4, r4
  401ad6:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401ad8:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401ada:	2000      	movs	r0, #0
}
  401adc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ae0:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401ae2:	2100      	movs	r1, #0
  401ae4:	e7e6      	b.n	401ab4 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401ae6:	0049      	lsls	r1, r1, #1
  401ae8:	fbb2 f2f1 	udiv	r2, r2, r1
  401aec:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401aee:	2aff      	cmp	r2, #255	; 0xff
  401af0:	d911      	bls.n	401b16 <twihs_set_speed+0x9a>
  401af2:	2300      	movs	r3, #0
			ckdiv++;
  401af4:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401af6:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401af8:	2aff      	cmp	r2, #255	; 0xff
  401afa:	d901      	bls.n	401b00 <twihs_set_speed+0x84>
  401afc:	2b06      	cmp	r3, #6
  401afe:	d9f9      	bls.n	401af4 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401b00:	0211      	lsls	r1, r2, #8
  401b02:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401b04:	041b      	lsls	r3, r3, #16
  401b06:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401b0a:	430b      	orrs	r3, r1
  401b0c:	b2d2      	uxtb	r2, r2
  401b0e:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401b10:	6102      	str	r2, [r0, #16]
	return PASS;
  401b12:	2000      	movs	r0, #0
  401b14:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401b16:	2300      	movs	r3, #0
  401b18:	e7f2      	b.n	401b00 <twihs_set_speed+0x84>
		return FAIL;
  401b1a:	2001      	movs	r0, #1
  401b1c:	4770      	bx	lr
  401b1e:	bf00      	nop
  401b20:	00061a80 	.word	0x00061a80
  401b24:	057619f1 	.word	0x057619f1
  401b28:	3ffd1200 	.word	0x3ffd1200

00401b2c <twihs_master_init>:
{
  401b2c:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401b2e:	f04f 32ff 	mov.w	r2, #4294967295
  401b32:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401b34:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401b36:	2280      	movs	r2, #128	; 0x80
  401b38:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401b3a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401b3c:	2208      	movs	r2, #8
  401b3e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401b40:	2220      	movs	r2, #32
  401b42:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401b44:	2204      	movs	r2, #4
  401b46:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401b48:	680a      	ldr	r2, [r1, #0]
  401b4a:	6849      	ldr	r1, [r1, #4]
  401b4c:	4b03      	ldr	r3, [pc, #12]	; (401b5c <twihs_master_init+0x30>)
  401b4e:	4798      	blx	r3
}
  401b50:	2801      	cmp	r0, #1
  401b52:	bf14      	ite	ne
  401b54:	2000      	movne	r0, #0
  401b56:	2001      	moveq	r0, #1
  401b58:	bd08      	pop	{r3, pc}
  401b5a:	bf00      	nop
  401b5c:	00401a7d 	.word	0x00401a7d

00401b60 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401b60:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401b62:	2a00      	cmp	r2, #0
  401b64:	d04c      	beq.n	401c00 <twihs_master_read+0xa0>
{
  401b66:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401b68:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401b6a:	2600      	movs	r6, #0
  401b6c:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401b6e:	684b      	ldr	r3, [r1, #4]
  401b70:	021b      	lsls	r3, r3, #8
  401b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401b7a:	7c0d      	ldrb	r5, [r1, #16]
  401b7c:	042d      	lsls	r5, r5, #16
  401b7e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401b82:	432b      	orrs	r3, r5
  401b84:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401b86:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401b88:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401b8a:	b15d      	cbz	r5, 401ba4 <twihs_master_read+0x44>
	val = addr[0];
  401b8c:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401b8e:	2d01      	cmp	r5, #1
  401b90:	dd02      	ble.n	401b98 <twihs_master_read+0x38>
		val |= addr[1];
  401b92:	784e      	ldrb	r6, [r1, #1]
  401b94:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401b98:	2d02      	cmp	r5, #2
  401b9a:	dd04      	ble.n	401ba6 <twihs_master_read+0x46>
		val |= addr[2];
  401b9c:	7889      	ldrb	r1, [r1, #2]
  401b9e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401ba2:	e000      	b.n	401ba6 <twihs_master_read+0x46>
		return 0;
  401ba4:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401ba6:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401ba8:	2301      	movs	r3, #1
  401baa:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401bac:	2502      	movs	r5, #2
  401bae:	e012      	b.n	401bd6 <twihs_master_read+0x76>
  401bb0:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401bb2:	f013 0f02 	tst.w	r3, #2
  401bb6:	d01b      	beq.n	401bf0 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401bb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bba:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401bbc:	6a03      	ldr	r3, [r0, #32]
  401bbe:	f013 0f01 	tst.w	r3, #1
  401bc2:	d0fb      	beq.n	401bbc <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401bc4:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401bc6:	2000      	movs	r0, #0
}
  401bc8:	bc70      	pop	{r4, r5, r6}
  401bca:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401bcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bce:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401bd2:	3a01      	subs	r2, #1
  401bd4:	d0f2      	beq.n	401bbc <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401bd6:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401bd8:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bdc:	d114      	bne.n	401c08 <twihs_master_read+0xa8>
  401bde:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401be2:	2a01      	cmp	r2, #1
  401be4:	d0e4      	beq.n	401bb0 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401be6:	f013 0f02 	tst.w	r3, #2
  401bea:	d1ef      	bne.n	401bcc <twihs_master_read+0x6c>
	while (cnt > 0) {
  401bec:	2a00      	cmp	r2, #0
  401bee:	d0e5      	beq.n	401bbc <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401bf0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401bf2:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bf6:	d105      	bne.n	401c04 <twihs_master_read+0xa4>
		if (!timeout--) {
  401bf8:	3901      	subs	r1, #1
  401bfa:	d1f2      	bne.n	401be2 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401bfc:	2009      	movs	r0, #9
  401bfe:	e7e3      	b.n	401bc8 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401c00:	2001      	movs	r0, #1
  401c02:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401c04:	2005      	movs	r0, #5
  401c06:	e7df      	b.n	401bc8 <twihs_master_read+0x68>
  401c08:	2005      	movs	r0, #5
  401c0a:	e7dd      	b.n	401bc8 <twihs_master_read+0x68>

00401c0c <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401c0c:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401c0e:	2b00      	cmp	r3, #0
  401c10:	d043      	beq.n	401c9a <twihs_master_write+0x8e>
{
  401c12:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401c14:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401c16:	2600      	movs	r6, #0
  401c18:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401c1a:	7c0a      	ldrb	r2, [r1, #16]
  401c1c:	0412      	lsls	r2, r2, #16
  401c1e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401c22:	684d      	ldr	r5, [r1, #4]
  401c24:	022d      	lsls	r5, r5, #8
  401c26:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401c2a:	432a      	orrs	r2, r5
  401c2c:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401c2e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c30:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401c32:	b15d      	cbz	r5, 401c4c <twihs_master_write+0x40>
	val = addr[0];
  401c34:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401c36:	2d01      	cmp	r5, #1
  401c38:	dd02      	ble.n	401c40 <twihs_master_write+0x34>
		val |= addr[1];
  401c3a:	784e      	ldrb	r6, [r1, #1]
  401c3c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401c40:	2d02      	cmp	r5, #2
  401c42:	dd04      	ble.n	401c4e <twihs_master_write+0x42>
		val |= addr[2];
  401c44:	7889      	ldrb	r1, [r1, #2]
  401c46:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401c4a:	e000      	b.n	401c4e <twihs_master_write+0x42>
		return 0;
  401c4c:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c4e:	60c2      	str	r2, [r0, #12]
  401c50:	e004      	b.n	401c5c <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401c52:	f814 2b01 	ldrb.w	r2, [r4], #1
  401c56:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401c58:	3b01      	subs	r3, #1
  401c5a:	d00f      	beq.n	401c7c <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401c5c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401c5e:	f412 7f80 	tst.w	r2, #256	; 0x100
  401c62:	d11e      	bne.n	401ca2 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401c64:	f012 0f04 	tst.w	r2, #4
  401c68:	d1f3      	bne.n	401c52 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401c6a:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401c6c:	f412 7f80 	tst.w	r2, #256	; 0x100
  401c70:	d115      	bne.n	401c9e <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401c72:	f012 0f04 	tst.w	r2, #4
  401c76:	d1ec      	bne.n	401c52 <twihs_master_write+0x46>
	while (cnt > 0) {
  401c78:	2b00      	cmp	r3, #0
  401c7a:	d1f6      	bne.n	401c6a <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401c7c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401c7e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401c82:	d111      	bne.n	401ca8 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401c84:	f013 0f04 	tst.w	r3, #4
  401c88:	d0f8      	beq.n	401c7c <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401c8a:	2302      	movs	r3, #2
  401c8c:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401c8e:	6a03      	ldr	r3, [r0, #32]
  401c90:	f013 0f01 	tst.w	r3, #1
  401c94:	d0fb      	beq.n	401c8e <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401c96:	2000      	movs	r0, #0
  401c98:	e004      	b.n	401ca4 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401c9a:	2001      	movs	r0, #1
  401c9c:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401c9e:	2005      	movs	r0, #5
  401ca0:	e000      	b.n	401ca4 <twihs_master_write+0x98>
  401ca2:	2005      	movs	r0, #5
}
  401ca4:	bc70      	pop	{r4, r5, r6}
  401ca6:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401ca8:	2005      	movs	r0, #5
  401caa:	e7fb      	b.n	401ca4 <twihs_master_write+0x98>

00401cac <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401cac:	6943      	ldr	r3, [r0, #20]
  401cae:	f013 0f02 	tst.w	r3, #2
  401cb2:	d002      	beq.n	401cba <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401cb4:	61c1      	str	r1, [r0, #28]
	return 0;
  401cb6:	2000      	movs	r0, #0
  401cb8:	4770      	bx	lr
		return 1;
  401cba:	2001      	movs	r0, #1
}
  401cbc:	4770      	bx	lr

00401cbe <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401cbe:	6943      	ldr	r3, [r0, #20]
  401cc0:	f013 0f01 	tst.w	r3, #1
  401cc4:	d003      	beq.n	401cce <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401cc6:	6983      	ldr	r3, [r0, #24]
  401cc8:	700b      	strb	r3, [r1, #0]
	return 0;
  401cca:	2000      	movs	r0, #0
  401ccc:	4770      	bx	lr
		return 1;
  401cce:	2001      	movs	r0, #1
}
  401cd0:	4770      	bx	lr

00401cd2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401cd2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401cd4:	010b      	lsls	r3, r1, #4
  401cd6:	4293      	cmp	r3, r2
  401cd8:	d914      	bls.n	401d04 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401cda:	00c9      	lsls	r1, r1, #3
  401cdc:	084b      	lsrs	r3, r1, #1
  401cde:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401ce2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401ce6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ce8:	1e5c      	subs	r4, r3, #1
  401cea:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401cee:	428c      	cmp	r4, r1
  401cf0:	d901      	bls.n	401cf6 <usart_set_async_baudrate+0x24>
		return 1;
  401cf2:	2001      	movs	r0, #1
  401cf4:	e017      	b.n	401d26 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401cf6:	6841      	ldr	r1, [r0, #4]
  401cf8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401cfc:	6041      	str	r1, [r0, #4]
  401cfe:	e00c      	b.n	401d1a <usart_set_async_baudrate+0x48>
		return 1;
  401d00:	2001      	movs	r0, #1
  401d02:	e010      	b.n	401d26 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401d04:	0859      	lsrs	r1, r3, #1
  401d06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401d0a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401d0e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401d10:	1e5c      	subs	r4, r3, #1
  401d12:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401d16:	428c      	cmp	r4, r1
  401d18:	d8f2      	bhi.n	401d00 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401d1a:	0412      	lsls	r2, r2, #16
  401d1c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401d20:	431a      	orrs	r2, r3
  401d22:	6202      	str	r2, [r0, #32]

	return 0;
  401d24:	2000      	movs	r0, #0
}
  401d26:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d2a:	4770      	bx	lr

00401d2c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401d2c:	4b08      	ldr	r3, [pc, #32]	; (401d50 <usart_reset+0x24>)
  401d2e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401d32:	2300      	movs	r3, #0
  401d34:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401d36:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401d38:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401d3a:	2388      	movs	r3, #136	; 0x88
  401d3c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401d3e:	2324      	movs	r3, #36	; 0x24
  401d40:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401d42:	f44f 7380 	mov.w	r3, #256	; 0x100
  401d46:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401d48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401d4c:	6003      	str	r3, [r0, #0]
  401d4e:	4770      	bx	lr
  401d50:	55534100 	.word	0x55534100

00401d54 <usart_init_rs232>:
{
  401d54:	b570      	push	{r4, r5, r6, lr}
  401d56:	4605      	mov	r5, r0
  401d58:	460c      	mov	r4, r1
  401d5a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401d5c:	4b0f      	ldr	r3, [pc, #60]	; (401d9c <usart_init_rs232+0x48>)
  401d5e:	4798      	blx	r3
	ul_reg_val = 0;
  401d60:	2200      	movs	r2, #0
  401d62:	4b0f      	ldr	r3, [pc, #60]	; (401da0 <usart_init_rs232+0x4c>)
  401d64:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401d66:	b1a4      	cbz	r4, 401d92 <usart_init_rs232+0x3e>
  401d68:	4632      	mov	r2, r6
  401d6a:	6821      	ldr	r1, [r4, #0]
  401d6c:	4628      	mov	r0, r5
  401d6e:	4b0d      	ldr	r3, [pc, #52]	; (401da4 <usart_init_rs232+0x50>)
  401d70:	4798      	blx	r3
  401d72:	4602      	mov	r2, r0
  401d74:	b978      	cbnz	r0, 401d96 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d76:	6863      	ldr	r3, [r4, #4]
  401d78:	68a1      	ldr	r1, [r4, #8]
  401d7a:	430b      	orrs	r3, r1
  401d7c:	6921      	ldr	r1, [r4, #16]
  401d7e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401d80:	68e1      	ldr	r1, [r4, #12]
  401d82:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d84:	4906      	ldr	r1, [pc, #24]	; (401da0 <usart_init_rs232+0x4c>)
  401d86:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401d88:	6869      	ldr	r1, [r5, #4]
  401d8a:	430b      	orrs	r3, r1
  401d8c:	606b      	str	r3, [r5, #4]
}
  401d8e:	4610      	mov	r0, r2
  401d90:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401d92:	2201      	movs	r2, #1
  401d94:	e7fb      	b.n	401d8e <usart_init_rs232+0x3a>
  401d96:	2201      	movs	r2, #1
  401d98:	e7f9      	b.n	401d8e <usart_init_rs232+0x3a>
  401d9a:	bf00      	nop
  401d9c:	00401d2d 	.word	0x00401d2d
  401da0:	20400e14 	.word	0x20400e14
  401da4:	00401cd3 	.word	0x00401cd3

00401da8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401da8:	2340      	movs	r3, #64	; 0x40
  401daa:	6003      	str	r3, [r0, #0]
  401dac:	4770      	bx	lr

00401dae <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401dae:	2310      	movs	r3, #16
  401db0:	6003      	str	r3, [r0, #0]
  401db2:	4770      	bx	lr

00401db4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401db4:	6943      	ldr	r3, [r0, #20]
  401db6:	f013 0f02 	tst.w	r3, #2
  401dba:	d004      	beq.n	401dc6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401dbc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401dc0:	61c1      	str	r1, [r0, #28]
	return 0;
  401dc2:	2000      	movs	r0, #0
  401dc4:	4770      	bx	lr
		return 1;
  401dc6:	2001      	movs	r0, #1
}
  401dc8:	4770      	bx	lr

00401dca <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401dca:	6943      	ldr	r3, [r0, #20]
  401dcc:	f013 0f01 	tst.w	r3, #1
  401dd0:	d005      	beq.n	401dde <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401dd2:	6983      	ldr	r3, [r0, #24]
  401dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401dd8:	600b      	str	r3, [r1, #0]
	return 0;
  401dda:	2000      	movs	r0, #0
  401ddc:	4770      	bx	lr
		return 1;
  401dde:	2001      	movs	r0, #1
}
  401de0:	4770      	bx	lr

00401de2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401de2:	e7fe      	b.n	401de2 <Dummy_Handler>

00401de4 <Reset_Handler>:
{
  401de4:	b500      	push	{lr}
  401de6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401de8:	4b25      	ldr	r3, [pc, #148]	; (401e80 <Reset_Handler+0x9c>)
  401dea:	4a26      	ldr	r2, [pc, #152]	; (401e84 <Reset_Handler+0xa0>)
  401dec:	429a      	cmp	r2, r3
  401dee:	d010      	beq.n	401e12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401df0:	4b25      	ldr	r3, [pc, #148]	; (401e88 <Reset_Handler+0xa4>)
  401df2:	4a23      	ldr	r2, [pc, #140]	; (401e80 <Reset_Handler+0x9c>)
  401df4:	429a      	cmp	r2, r3
  401df6:	d20c      	bcs.n	401e12 <Reset_Handler+0x2e>
  401df8:	3b01      	subs	r3, #1
  401dfa:	1a9b      	subs	r3, r3, r2
  401dfc:	f023 0303 	bic.w	r3, r3, #3
  401e00:	3304      	adds	r3, #4
  401e02:	4413      	add	r3, r2
  401e04:	491f      	ldr	r1, [pc, #124]	; (401e84 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401e06:	f851 0b04 	ldr.w	r0, [r1], #4
  401e0a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401e0e:	429a      	cmp	r2, r3
  401e10:	d1f9      	bne.n	401e06 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401e12:	4b1e      	ldr	r3, [pc, #120]	; (401e8c <Reset_Handler+0xa8>)
  401e14:	4a1e      	ldr	r2, [pc, #120]	; (401e90 <Reset_Handler+0xac>)
  401e16:	429a      	cmp	r2, r3
  401e18:	d20a      	bcs.n	401e30 <Reset_Handler+0x4c>
  401e1a:	3b01      	subs	r3, #1
  401e1c:	1a9b      	subs	r3, r3, r2
  401e1e:	f023 0303 	bic.w	r3, r3, #3
  401e22:	3304      	adds	r3, #4
  401e24:	4413      	add	r3, r2
                *pDest++ = 0;
  401e26:	2100      	movs	r1, #0
  401e28:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401e2c:	4293      	cmp	r3, r2
  401e2e:	d1fb      	bne.n	401e28 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401e30:	4a18      	ldr	r2, [pc, #96]	; (401e94 <Reset_Handler+0xb0>)
  401e32:	4b19      	ldr	r3, [pc, #100]	; (401e98 <Reset_Handler+0xb4>)
  401e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401e38:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e3a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e3e:	fab3 f383 	clz	r3, r3
  401e42:	095b      	lsrs	r3, r3, #5
  401e44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401e46:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401e48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e4c:	2200      	movs	r2, #0
  401e4e:	4b13      	ldr	r3, [pc, #76]	; (401e9c <Reset_Handler+0xb8>)
  401e50:	701a      	strb	r2, [r3, #0]
	return flags;
  401e52:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401e54:	4a12      	ldr	r2, [pc, #72]	; (401ea0 <Reset_Handler+0xbc>)
  401e56:	6813      	ldr	r3, [r2, #0]
  401e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401e5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401e62:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  401e66:	b129      	cbz	r1, 401e74 <Reset_Handler+0x90>
		cpu_irq_enable();
  401e68:	2201      	movs	r2, #1
  401e6a:	4b0c      	ldr	r3, [pc, #48]	; (401e9c <Reset_Handler+0xb8>)
  401e6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401e6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e72:	b662      	cpsie	i
        __libc_init_array();
  401e74:	4b0b      	ldr	r3, [pc, #44]	; (401ea4 <Reset_Handler+0xc0>)
  401e76:	4798      	blx	r3
        main();
  401e78:	4b0b      	ldr	r3, [pc, #44]	; (401ea8 <Reset_Handler+0xc4>)
  401e7a:	4798      	blx	r3
  401e7c:	e7fe      	b.n	401e7c <Reset_Handler+0x98>
  401e7e:	bf00      	nop
  401e80:	20400000 	.word	0x20400000
  401e84:	0040f320 	.word	0x0040f320
  401e88:	204009c8 	.word	0x204009c8
  401e8c:	2040c8b4 	.word	0x2040c8b4
  401e90:	204009c8 	.word	0x204009c8
  401e94:	e000ed00 	.word	0xe000ed00
  401e98:	00400000 	.word	0x00400000
  401e9c:	2040000a 	.word	0x2040000a
  401ea0:	e000ed88 	.word	0xe000ed88
  401ea4:	00404651 	.word	0x00404651
  401ea8:	00404481 	.word	0x00404481

00401eac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401eac:	4b3b      	ldr	r3, [pc, #236]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eb0:	f003 0303 	and.w	r3, r3, #3
  401eb4:	2b01      	cmp	r3, #1
  401eb6:	d01d      	beq.n	401ef4 <SystemCoreClockUpdate+0x48>
  401eb8:	b183      	cbz	r3, 401edc <SystemCoreClockUpdate+0x30>
  401eba:	2b02      	cmp	r3, #2
  401ebc:	d036      	beq.n	401f2c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401ebe:	4b37      	ldr	r3, [pc, #220]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ec6:	2b70      	cmp	r3, #112	; 0x70
  401ec8:	d05f      	beq.n	401f8a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401eca:	4b34      	ldr	r3, [pc, #208]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ece:	4934      	ldr	r1, [pc, #208]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401ed0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401ed4:	680b      	ldr	r3, [r1, #0]
  401ed6:	40d3      	lsrs	r3, r2
  401ed8:	600b      	str	r3, [r1, #0]
  401eda:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401edc:	4b31      	ldr	r3, [pc, #196]	; (401fa4 <SystemCoreClockUpdate+0xf8>)
  401ede:	695b      	ldr	r3, [r3, #20]
  401ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ee4:	bf14      	ite	ne
  401ee6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401eea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401eee:	4b2c      	ldr	r3, [pc, #176]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401ef0:	601a      	str	r2, [r3, #0]
  401ef2:	e7e4      	b.n	401ebe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401ef4:	4b29      	ldr	r3, [pc, #164]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401ef6:	6a1b      	ldr	r3, [r3, #32]
  401ef8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401efc:	d003      	beq.n	401f06 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401efe:	4a2a      	ldr	r2, [pc, #168]	; (401fa8 <SystemCoreClockUpdate+0xfc>)
  401f00:	4b27      	ldr	r3, [pc, #156]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f02:	601a      	str	r2, [r3, #0]
  401f04:	e7db      	b.n	401ebe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f06:	4a29      	ldr	r2, [pc, #164]	; (401fac <SystemCoreClockUpdate+0x100>)
  401f08:	4b25      	ldr	r3, [pc, #148]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f0a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401f0c:	4b23      	ldr	r3, [pc, #140]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401f0e:	6a1b      	ldr	r3, [r3, #32]
  401f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f14:	2b10      	cmp	r3, #16
  401f16:	d005      	beq.n	401f24 <SystemCoreClockUpdate+0x78>
  401f18:	2b20      	cmp	r3, #32
  401f1a:	d1d0      	bne.n	401ebe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401f1c:	4a22      	ldr	r2, [pc, #136]	; (401fa8 <SystemCoreClockUpdate+0xfc>)
  401f1e:	4b20      	ldr	r3, [pc, #128]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f20:	601a      	str	r2, [r3, #0]
          break;
  401f22:	e7cc      	b.n	401ebe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401f24:	4a22      	ldr	r2, [pc, #136]	; (401fb0 <SystemCoreClockUpdate+0x104>)
  401f26:	4b1e      	ldr	r3, [pc, #120]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f28:	601a      	str	r2, [r3, #0]
          break;
  401f2a:	e7c8      	b.n	401ebe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401f2c:	4b1b      	ldr	r3, [pc, #108]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401f2e:	6a1b      	ldr	r3, [r3, #32]
  401f30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401f34:	d016      	beq.n	401f64 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401f36:	4a1c      	ldr	r2, [pc, #112]	; (401fa8 <SystemCoreClockUpdate+0xfc>)
  401f38:	4b19      	ldr	r3, [pc, #100]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f3a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401f3c:	4b17      	ldr	r3, [pc, #92]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f40:	f003 0303 	and.w	r3, r3, #3
  401f44:	2b02      	cmp	r3, #2
  401f46:	d1ba      	bne.n	401ebe <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401f48:	4a14      	ldr	r2, [pc, #80]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401f4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401f4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401f4e:	4814      	ldr	r0, [pc, #80]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401f50:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401f54:	6803      	ldr	r3, [r0, #0]
  401f56:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401f5a:	b2d2      	uxtb	r2, r2
  401f5c:	fbb3 f3f2 	udiv	r3, r3, r2
  401f60:	6003      	str	r3, [r0, #0]
  401f62:	e7ac      	b.n	401ebe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f64:	4a11      	ldr	r2, [pc, #68]	; (401fac <SystemCoreClockUpdate+0x100>)
  401f66:	4b0e      	ldr	r3, [pc, #56]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f68:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401f6a:	4b0c      	ldr	r3, [pc, #48]	; (401f9c <SystemCoreClockUpdate+0xf0>)
  401f6c:	6a1b      	ldr	r3, [r3, #32]
  401f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f72:	2b10      	cmp	r3, #16
  401f74:	d005      	beq.n	401f82 <SystemCoreClockUpdate+0xd6>
  401f76:	2b20      	cmp	r3, #32
  401f78:	d1e0      	bne.n	401f3c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401f7a:	4a0b      	ldr	r2, [pc, #44]	; (401fa8 <SystemCoreClockUpdate+0xfc>)
  401f7c:	4b08      	ldr	r3, [pc, #32]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f7e:	601a      	str	r2, [r3, #0]
          break;
  401f80:	e7dc      	b.n	401f3c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401f82:	4a0b      	ldr	r2, [pc, #44]	; (401fb0 <SystemCoreClockUpdate+0x104>)
  401f84:	4b06      	ldr	r3, [pc, #24]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f86:	601a      	str	r2, [r3, #0]
          break;
  401f88:	e7d8      	b.n	401f3c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401f8a:	4a05      	ldr	r2, [pc, #20]	; (401fa0 <SystemCoreClockUpdate+0xf4>)
  401f8c:	6813      	ldr	r3, [r2, #0]
  401f8e:	4909      	ldr	r1, [pc, #36]	; (401fb4 <SystemCoreClockUpdate+0x108>)
  401f90:	fba1 1303 	umull	r1, r3, r1, r3
  401f94:	085b      	lsrs	r3, r3, #1
  401f96:	6013      	str	r3, [r2, #0]
  401f98:	4770      	bx	lr
  401f9a:	bf00      	nop
  401f9c:	400e0600 	.word	0x400e0600
  401fa0:	2040000c 	.word	0x2040000c
  401fa4:	400e1810 	.word	0x400e1810
  401fa8:	00b71b00 	.word	0x00b71b00
  401fac:	003d0900 	.word	0x003d0900
  401fb0:	007a1200 	.word	0x007a1200
  401fb4:	aaaaaaab 	.word	0xaaaaaaab

00401fb8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401fb8:	4b16      	ldr	r3, [pc, #88]	; (402014 <system_init_flash+0x5c>)
  401fba:	4298      	cmp	r0, r3
  401fbc:	d913      	bls.n	401fe6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401fbe:	4b16      	ldr	r3, [pc, #88]	; (402018 <system_init_flash+0x60>)
  401fc0:	4298      	cmp	r0, r3
  401fc2:	d915      	bls.n	401ff0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401fc4:	4b15      	ldr	r3, [pc, #84]	; (40201c <system_init_flash+0x64>)
  401fc6:	4298      	cmp	r0, r3
  401fc8:	d916      	bls.n	401ff8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401fca:	4b15      	ldr	r3, [pc, #84]	; (402020 <system_init_flash+0x68>)
  401fcc:	4298      	cmp	r0, r3
  401fce:	d917      	bls.n	402000 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401fd0:	4b14      	ldr	r3, [pc, #80]	; (402024 <system_init_flash+0x6c>)
  401fd2:	4298      	cmp	r0, r3
  401fd4:	d918      	bls.n	402008 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401fd6:	4b14      	ldr	r3, [pc, #80]	; (402028 <system_init_flash+0x70>)
  401fd8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401fda:	bf94      	ite	ls
  401fdc:	4a13      	ldrls	r2, [pc, #76]	; (40202c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401fde:	4a14      	ldrhi	r2, [pc, #80]	; (402030 <system_init_flash+0x78>)
  401fe0:	4b14      	ldr	r3, [pc, #80]	; (402034 <system_init_flash+0x7c>)
  401fe2:	601a      	str	r2, [r3, #0]
  401fe4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401fe6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401fea:	4b12      	ldr	r3, [pc, #72]	; (402034 <system_init_flash+0x7c>)
  401fec:	601a      	str	r2, [r3, #0]
  401fee:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401ff0:	4a11      	ldr	r2, [pc, #68]	; (402038 <system_init_flash+0x80>)
  401ff2:	4b10      	ldr	r3, [pc, #64]	; (402034 <system_init_flash+0x7c>)
  401ff4:	601a      	str	r2, [r3, #0]
  401ff6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401ff8:	4a10      	ldr	r2, [pc, #64]	; (40203c <system_init_flash+0x84>)
  401ffa:	4b0e      	ldr	r3, [pc, #56]	; (402034 <system_init_flash+0x7c>)
  401ffc:	601a      	str	r2, [r3, #0]
  401ffe:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402000:	4a0f      	ldr	r2, [pc, #60]	; (402040 <system_init_flash+0x88>)
  402002:	4b0c      	ldr	r3, [pc, #48]	; (402034 <system_init_flash+0x7c>)
  402004:	601a      	str	r2, [r3, #0]
  402006:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402008:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40200c:	4b09      	ldr	r3, [pc, #36]	; (402034 <system_init_flash+0x7c>)
  40200e:	601a      	str	r2, [r3, #0]
  402010:	4770      	bx	lr
  402012:	bf00      	nop
  402014:	015ef3bf 	.word	0x015ef3bf
  402018:	02bde77f 	.word	0x02bde77f
  40201c:	041cdb3f 	.word	0x041cdb3f
  402020:	057bceff 	.word	0x057bceff
  402024:	06dac2bf 	.word	0x06dac2bf
  402028:	0839b67f 	.word	0x0839b67f
  40202c:	04000500 	.word	0x04000500
  402030:	04000600 	.word	0x04000600
  402034:	400e0c00 	.word	0x400e0c00
  402038:	04000100 	.word	0x04000100
  40203c:	04000200 	.word	0x04000200
  402040:	04000300 	.word	0x04000300

00402044 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402044:	4b0a      	ldr	r3, [pc, #40]	; (402070 <_sbrk+0x2c>)
  402046:	681b      	ldr	r3, [r3, #0]
  402048:	b153      	cbz	r3, 402060 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40204a:	4b09      	ldr	r3, [pc, #36]	; (402070 <_sbrk+0x2c>)
  40204c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40204e:	181a      	adds	r2, r3, r0
  402050:	4908      	ldr	r1, [pc, #32]	; (402074 <_sbrk+0x30>)
  402052:	4291      	cmp	r1, r2
  402054:	db08      	blt.n	402068 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402056:	4610      	mov	r0, r2
  402058:	4a05      	ldr	r2, [pc, #20]	; (402070 <_sbrk+0x2c>)
  40205a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40205c:	4618      	mov	r0, r3
  40205e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402060:	4a05      	ldr	r2, [pc, #20]	; (402078 <_sbrk+0x34>)
  402062:	4b03      	ldr	r3, [pc, #12]	; (402070 <_sbrk+0x2c>)
  402064:	601a      	str	r2, [r3, #0]
  402066:	e7f0      	b.n	40204a <_sbrk+0x6>
		return (caddr_t) -1;	
  402068:	f04f 30ff 	mov.w	r0, #4294967295
}
  40206c:	4770      	bx	lr
  40206e:	bf00      	nop
  402070:	20400e18 	.word	0x20400e18
  402074:	2045fffc 	.word	0x2045fffc
  402078:	2040eab8 	.word	0x2040eab8

0040207c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40207c:	f04f 30ff 	mov.w	r0, #4294967295
  402080:	4770      	bx	lr

00402082 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402086:	604b      	str	r3, [r1, #4]

	return 0;
}
  402088:	2000      	movs	r0, #0
  40208a:	4770      	bx	lr

0040208c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40208c:	2001      	movs	r0, #1
  40208e:	4770      	bx	lr

00402090 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402090:	2000      	movs	r0, #0
  402092:	4770      	bx	lr

00402094 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  402094:	f100 0308 	add.w	r3, r0, #8
  402098:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40209a:	f04f 32ff 	mov.w	r2, #4294967295
  40209e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4020a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4020a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4020a4:	2300      	movs	r3, #0
  4020a6:	6003      	str	r3, [r0, #0]
  4020a8:	4770      	bx	lr

004020aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4020aa:	2300      	movs	r3, #0
  4020ac:	6103      	str	r3, [r0, #16]
  4020ae:	4770      	bx	lr

004020b0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4020b0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4020b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4020b4:	689a      	ldr	r2, [r3, #8]
  4020b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4020b8:	689a      	ldr	r2, [r3, #8]
  4020ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4020bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4020be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4020c0:	6803      	ldr	r3, [r0, #0]
  4020c2:	3301      	adds	r3, #1
  4020c4:	6003      	str	r3, [r0, #0]
  4020c6:	4770      	bx	lr

004020c8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4020c8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4020ca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4020cc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4020d0:	d002      	beq.n	4020d8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4020d2:	f100 0208 	add.w	r2, r0, #8
  4020d6:	e002      	b.n	4020de <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4020d8:	6902      	ldr	r2, [r0, #16]
  4020da:	e004      	b.n	4020e6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4020dc:	461a      	mov	r2, r3
  4020de:	6853      	ldr	r3, [r2, #4]
  4020e0:	681c      	ldr	r4, [r3, #0]
  4020e2:	42a5      	cmp	r5, r4
  4020e4:	d2fa      	bcs.n	4020dc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4020e6:	6853      	ldr	r3, [r2, #4]
  4020e8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4020ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4020ec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4020ee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4020f0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4020f2:	6803      	ldr	r3, [r0, #0]
  4020f4:	3301      	adds	r3, #1
  4020f6:	6003      	str	r3, [r0, #0]
}
  4020f8:	bc30      	pop	{r4, r5}
  4020fa:	4770      	bx	lr

004020fc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4020fc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4020fe:	6842      	ldr	r2, [r0, #4]
  402100:	6881      	ldr	r1, [r0, #8]
  402102:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  402104:	6882      	ldr	r2, [r0, #8]
  402106:	6841      	ldr	r1, [r0, #4]
  402108:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40210a:	685a      	ldr	r2, [r3, #4]
  40210c:	4290      	cmp	r0, r2
  40210e:	d005      	beq.n	40211c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  402110:	2200      	movs	r2, #0
  402112:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  402114:	6818      	ldr	r0, [r3, #0]
  402116:	3801      	subs	r0, #1
  402118:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40211a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40211c:	6882      	ldr	r2, [r0, #8]
  40211e:	605a      	str	r2, [r3, #4]
  402120:	e7f6      	b.n	402110 <uxListRemove+0x14>
	...

00402124 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  402124:	4b0d      	ldr	r3, [pc, #52]	; (40215c <prvTaskExitError+0x38>)
  402126:	681b      	ldr	r3, [r3, #0]
  402128:	f1b3 3fff 	cmp.w	r3, #4294967295
  40212c:	d00a      	beq.n	402144 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40212e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402132:	b672      	cpsid	i
  402134:	f383 8811 	msr	BASEPRI, r3
  402138:	f3bf 8f6f 	isb	sy
  40213c:	f3bf 8f4f 	dsb	sy
  402140:	b662      	cpsie	i
  402142:	e7fe      	b.n	402142 <prvTaskExitError+0x1e>
  402144:	f04f 0380 	mov.w	r3, #128	; 0x80
  402148:	b672      	cpsid	i
  40214a:	f383 8811 	msr	BASEPRI, r3
  40214e:	f3bf 8f6f 	isb	sy
  402152:	f3bf 8f4f 	dsb	sy
  402156:	b662      	cpsie	i
  402158:	e7fe      	b.n	402158 <prvTaskExitError+0x34>
  40215a:	bf00      	nop
  40215c:	20400010 	.word	0x20400010

00402160 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  402160:	4806      	ldr	r0, [pc, #24]	; (40217c <prvPortStartFirstTask+0x1c>)
  402162:	6800      	ldr	r0, [r0, #0]
  402164:	6800      	ldr	r0, [r0, #0]
  402166:	f380 8808 	msr	MSP, r0
  40216a:	b662      	cpsie	i
  40216c:	b661      	cpsie	f
  40216e:	f3bf 8f4f 	dsb	sy
  402172:	f3bf 8f6f 	isb	sy
  402176:	df00      	svc	0
  402178:	bf00      	nop
  40217a:	0000      	.short	0x0000
  40217c:	e000ed08 	.word	0xe000ed08

00402180 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  402180:	f8df 000c 	ldr.w	r0, [pc, #12]	; 402190 <vPortEnableVFP+0x10>
  402184:	6801      	ldr	r1, [r0, #0]
  402186:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40218a:	6001      	str	r1, [r0, #0]
  40218c:	4770      	bx	lr
  40218e:	0000      	.short	0x0000
  402190:	e000ed88 	.word	0xe000ed88

00402194 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  402194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402198:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40219c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4021a0:	4b05      	ldr	r3, [pc, #20]	; (4021b8 <pxPortInitialiseStack+0x24>)
  4021a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4021a6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4021aa:	f06f 0302 	mvn.w	r3, #2
  4021ae:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4021b2:	3844      	subs	r0, #68	; 0x44
  4021b4:	4770      	bx	lr
  4021b6:	bf00      	nop
  4021b8:	00402125 	.word	0x00402125

004021bc <SVC_Handler>:
	__asm volatile (
  4021bc:	4b06      	ldr	r3, [pc, #24]	; (4021d8 <pxCurrentTCBConst2>)
  4021be:	6819      	ldr	r1, [r3, #0]
  4021c0:	6808      	ldr	r0, [r1, #0]
  4021c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021c6:	f380 8809 	msr	PSP, r0
  4021ca:	f3bf 8f6f 	isb	sy
  4021ce:	f04f 0000 	mov.w	r0, #0
  4021d2:	f380 8811 	msr	BASEPRI, r0
  4021d6:	4770      	bx	lr

004021d8 <pxCurrentTCBConst2>:
  4021d8:	2040c62c 	.word	0x2040c62c
  4021dc:	4770      	bx	lr
  4021de:	bf00      	nop

004021e0 <vPortEnterCritical>:
  4021e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e4:	b672      	cpsid	i
  4021e6:	f383 8811 	msr	BASEPRI, r3
  4021ea:	f3bf 8f6f 	isb	sy
  4021ee:	f3bf 8f4f 	dsb	sy
  4021f2:	b662      	cpsie	i
	uxCriticalNesting++;
  4021f4:	4a0b      	ldr	r2, [pc, #44]	; (402224 <vPortEnterCritical+0x44>)
  4021f6:	6813      	ldr	r3, [r2, #0]
  4021f8:	3301      	adds	r3, #1
  4021fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4021fc:	2b01      	cmp	r3, #1
  4021fe:	d10f      	bne.n	402220 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402200:	4b09      	ldr	r3, [pc, #36]	; (402228 <vPortEnterCritical+0x48>)
  402202:	681b      	ldr	r3, [r3, #0]
  402204:	f013 0fff 	tst.w	r3, #255	; 0xff
  402208:	d00a      	beq.n	402220 <vPortEnterCritical+0x40>
  40220a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40220e:	b672      	cpsid	i
  402210:	f383 8811 	msr	BASEPRI, r3
  402214:	f3bf 8f6f 	isb	sy
  402218:	f3bf 8f4f 	dsb	sy
  40221c:	b662      	cpsie	i
  40221e:	e7fe      	b.n	40221e <vPortEnterCritical+0x3e>
  402220:	4770      	bx	lr
  402222:	bf00      	nop
  402224:	20400010 	.word	0x20400010
  402228:	e000ed04 	.word	0xe000ed04

0040222c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  40222c:	4b0a      	ldr	r3, [pc, #40]	; (402258 <vPortExitCritical+0x2c>)
  40222e:	681b      	ldr	r3, [r3, #0]
  402230:	b953      	cbnz	r3, 402248 <vPortExitCritical+0x1c>
  402232:	f04f 0380 	mov.w	r3, #128	; 0x80
  402236:	b672      	cpsid	i
  402238:	f383 8811 	msr	BASEPRI, r3
  40223c:	f3bf 8f6f 	isb	sy
  402240:	f3bf 8f4f 	dsb	sy
  402244:	b662      	cpsie	i
  402246:	e7fe      	b.n	402246 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  402248:	3b01      	subs	r3, #1
  40224a:	4a03      	ldr	r2, [pc, #12]	; (402258 <vPortExitCritical+0x2c>)
  40224c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40224e:	b90b      	cbnz	r3, 402254 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  402250:	f383 8811 	msr	BASEPRI, r3
  402254:	4770      	bx	lr
  402256:	bf00      	nop
  402258:	20400010 	.word	0x20400010

0040225c <PendSV_Handler>:
	__asm volatile
  40225c:	f3ef 8009 	mrs	r0, PSP
  402260:	f3bf 8f6f 	isb	sy
  402264:	4b15      	ldr	r3, [pc, #84]	; (4022bc <pxCurrentTCBConst>)
  402266:	681a      	ldr	r2, [r3, #0]
  402268:	f01e 0f10 	tst.w	lr, #16
  40226c:	bf08      	it	eq
  40226e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  402272:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402276:	6010      	str	r0, [r2, #0]
  402278:	f84d 3d04 	str.w	r3, [sp, #-4]!
  40227c:	f04f 0080 	mov.w	r0, #128	; 0x80
  402280:	b672      	cpsid	i
  402282:	f380 8811 	msr	BASEPRI, r0
  402286:	f3bf 8f4f 	dsb	sy
  40228a:	f3bf 8f6f 	isb	sy
  40228e:	b662      	cpsie	i
  402290:	f001 f91a 	bl	4034c8 <vTaskSwitchContext>
  402294:	f04f 0000 	mov.w	r0, #0
  402298:	f380 8811 	msr	BASEPRI, r0
  40229c:	bc08      	pop	{r3}
  40229e:	6819      	ldr	r1, [r3, #0]
  4022a0:	6808      	ldr	r0, [r1, #0]
  4022a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022a6:	f01e 0f10 	tst.w	lr, #16
  4022aa:	bf08      	it	eq
  4022ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4022b0:	f380 8809 	msr	PSP, r0
  4022b4:	f3bf 8f6f 	isb	sy
  4022b8:	4770      	bx	lr
  4022ba:	bf00      	nop

004022bc <pxCurrentTCBConst>:
  4022bc:	2040c62c 	.word	0x2040c62c
  4022c0:	4770      	bx	lr
  4022c2:	bf00      	nop

004022c4 <SysTick_Handler>:
{
  4022c4:	b508      	push	{r3, lr}
	__asm volatile
  4022c6:	f3ef 8311 	mrs	r3, BASEPRI
  4022ca:	f04f 0280 	mov.w	r2, #128	; 0x80
  4022ce:	b672      	cpsid	i
  4022d0:	f382 8811 	msr	BASEPRI, r2
  4022d4:	f3bf 8f6f 	isb	sy
  4022d8:	f3bf 8f4f 	dsb	sy
  4022dc:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4022de:	4b05      	ldr	r3, [pc, #20]	; (4022f4 <SysTick_Handler+0x30>)
  4022e0:	4798      	blx	r3
  4022e2:	b118      	cbz	r0, 4022ec <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4022e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022e8:	4b03      	ldr	r3, [pc, #12]	; (4022f8 <SysTick_Handler+0x34>)
  4022ea:	601a      	str	r2, [r3, #0]
	__asm volatile
  4022ec:	2300      	movs	r3, #0
  4022ee:	f383 8811 	msr	BASEPRI, r3
  4022f2:	bd08      	pop	{r3, pc}
  4022f4:	00403135 	.word	0x00403135
  4022f8:	e000ed04 	.word	0xe000ed04

004022fc <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4022fc:	4a03      	ldr	r2, [pc, #12]	; (40230c <vPortSetupTimerInterrupt+0x10>)
  4022fe:	4b04      	ldr	r3, [pc, #16]	; (402310 <vPortSetupTimerInterrupt+0x14>)
  402300:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  402302:	2207      	movs	r2, #7
  402304:	3b04      	subs	r3, #4
  402306:	601a      	str	r2, [r3, #0]
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	0003a97f 	.word	0x0003a97f
  402310:	e000e014 	.word	0xe000e014

00402314 <xPortStartScheduler>:
{
  402314:	b500      	push	{lr}
  402316:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402318:	4b25      	ldr	r3, [pc, #148]	; (4023b0 <xPortStartScheduler+0x9c>)
  40231a:	781a      	ldrb	r2, [r3, #0]
  40231c:	b2d2      	uxtb	r2, r2
  40231e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402320:	22ff      	movs	r2, #255	; 0xff
  402322:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402324:	781b      	ldrb	r3, [r3, #0]
  402326:	b2db      	uxtb	r3, r3
  402328:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  40232c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402330:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402334:	4a1f      	ldr	r2, [pc, #124]	; (4023b4 <xPortStartScheduler+0xa0>)
  402336:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402338:	2207      	movs	r2, #7
  40233a:	4b1f      	ldr	r3, [pc, #124]	; (4023b8 <xPortStartScheduler+0xa4>)
  40233c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40233e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402342:	f013 0f80 	tst.w	r3, #128	; 0x80
  402346:	d010      	beq.n	40236a <xPortStartScheduler+0x56>
  402348:	2206      	movs	r2, #6
  40234a:	e000      	b.n	40234e <xPortStartScheduler+0x3a>
  40234c:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40234e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402352:	005b      	lsls	r3, r3, #1
  402354:	b2db      	uxtb	r3, r3
  402356:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40235a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40235e:	1e51      	subs	r1, r2, #1
  402360:	f013 0f80 	tst.w	r3, #128	; 0x80
  402364:	d1f2      	bne.n	40234c <xPortStartScheduler+0x38>
  402366:	4b14      	ldr	r3, [pc, #80]	; (4023b8 <xPortStartScheduler+0xa4>)
  402368:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40236a:	4a13      	ldr	r2, [pc, #76]	; (4023b8 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40236c:	6813      	ldr	r3, [r2, #0]
  40236e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402374:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  402376:	9b01      	ldr	r3, [sp, #4]
  402378:	b2db      	uxtb	r3, r3
  40237a:	4a0d      	ldr	r2, [pc, #52]	; (4023b0 <xPortStartScheduler+0x9c>)
  40237c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40237e:	4b0f      	ldr	r3, [pc, #60]	; (4023bc <xPortStartScheduler+0xa8>)
  402380:	681a      	ldr	r2, [r3, #0]
  402382:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  402386:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  402388:	681a      	ldr	r2, [r3, #0]
  40238a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40238e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  402390:	4b0b      	ldr	r3, [pc, #44]	; (4023c0 <xPortStartScheduler+0xac>)
  402392:	4798      	blx	r3
	uxCriticalNesting = 0;
  402394:	2200      	movs	r2, #0
  402396:	4b0b      	ldr	r3, [pc, #44]	; (4023c4 <xPortStartScheduler+0xb0>)
  402398:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40239a:	4b0b      	ldr	r3, [pc, #44]	; (4023c8 <xPortStartScheduler+0xb4>)
  40239c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40239e:	4a0b      	ldr	r2, [pc, #44]	; (4023cc <xPortStartScheduler+0xb8>)
  4023a0:	6813      	ldr	r3, [r2, #0]
  4023a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4023a6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4023a8:	4b09      	ldr	r3, [pc, #36]	; (4023d0 <xPortStartScheduler+0xbc>)
  4023aa:	4798      	blx	r3
	prvTaskExitError();
  4023ac:	4b09      	ldr	r3, [pc, #36]	; (4023d4 <xPortStartScheduler+0xc0>)
  4023ae:	4798      	blx	r3
  4023b0:	e000e400 	.word	0xe000e400
  4023b4:	20400e1c 	.word	0x20400e1c
  4023b8:	20400e20 	.word	0x20400e20
  4023bc:	e000ed20 	.word	0xe000ed20
  4023c0:	004022fd 	.word	0x004022fd
  4023c4:	20400010 	.word	0x20400010
  4023c8:	00402181 	.word	0x00402181
  4023cc:	e000ef34 	.word	0xe000ef34
  4023d0:	00402161 	.word	0x00402161
  4023d4:	00402125 	.word	0x00402125

004023d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4023d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4023dc:	2b0f      	cmp	r3, #15
  4023de:	d911      	bls.n	402404 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4023e0:	4a12      	ldr	r2, [pc, #72]	; (40242c <vPortValidateInterruptPriority+0x54>)
  4023e2:	5c9b      	ldrb	r3, [r3, r2]
  4023e4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4023e6:	4a12      	ldr	r2, [pc, #72]	; (402430 <vPortValidateInterruptPriority+0x58>)
  4023e8:	7812      	ldrb	r2, [r2, #0]
  4023ea:	429a      	cmp	r2, r3
  4023ec:	d90a      	bls.n	402404 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4023ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023f2:	b672      	cpsid	i
  4023f4:	f383 8811 	msr	BASEPRI, r3
  4023f8:	f3bf 8f6f 	isb	sy
  4023fc:	f3bf 8f4f 	dsb	sy
  402400:	b662      	cpsie	i
  402402:	e7fe      	b.n	402402 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  402404:	4b0b      	ldr	r3, [pc, #44]	; (402434 <vPortValidateInterruptPriority+0x5c>)
  402406:	681b      	ldr	r3, [r3, #0]
  402408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40240c:	4a0a      	ldr	r2, [pc, #40]	; (402438 <vPortValidateInterruptPriority+0x60>)
  40240e:	6812      	ldr	r2, [r2, #0]
  402410:	4293      	cmp	r3, r2
  402412:	d90a      	bls.n	40242a <vPortValidateInterruptPriority+0x52>
  402414:	f04f 0380 	mov.w	r3, #128	; 0x80
  402418:	b672      	cpsid	i
  40241a:	f383 8811 	msr	BASEPRI, r3
  40241e:	f3bf 8f6f 	isb	sy
  402422:	f3bf 8f4f 	dsb	sy
  402426:	b662      	cpsie	i
  402428:	e7fe      	b.n	402428 <vPortValidateInterruptPriority+0x50>
  40242a:	4770      	bx	lr
  40242c:	e000e3f0 	.word	0xe000e3f0
  402430:	20400e1c 	.word	0x20400e1c
  402434:	e000ed0c 	.word	0xe000ed0c
  402438:	20400e20 	.word	0x20400e20

0040243c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  40243c:	b538      	push	{r3, r4, r5, lr}
  40243e:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  402440:	f010 0f07 	tst.w	r0, #7
  402444:	d002      	beq.n	40244c <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  402446:	f020 0407 	bic.w	r4, r0, #7
  40244a:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  40244c:	4b11      	ldr	r3, [pc, #68]	; (402494 <pvPortMalloc+0x58>)
  40244e:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  402450:	4b11      	ldr	r3, [pc, #68]	; (402498 <pvPortMalloc+0x5c>)
  402452:	681b      	ldr	r3, [r3, #0]
  402454:	b193      	cbz	r3, 40247c <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  402456:	4b11      	ldr	r3, [pc, #68]	; (40249c <pvPortMalloc+0x60>)
  402458:	681b      	ldr	r3, [r3, #0]
  40245a:	441c      	add	r4, r3
  40245c:	42a3      	cmp	r3, r4
  40245e:	d213      	bcs.n	402488 <pvPortMalloc+0x4c>
  402460:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  402464:	4294      	cmp	r4, r2
  402466:	d80f      	bhi.n	402488 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  402468:	4a0b      	ldr	r2, [pc, #44]	; (402498 <pvPortMalloc+0x5c>)
  40246a:	6815      	ldr	r5, [r2, #0]
  40246c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40246e:	4b0b      	ldr	r3, [pc, #44]	; (40249c <pvPortMalloc+0x60>)
  402470:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  402472:	4b0b      	ldr	r3, [pc, #44]	; (4024a0 <pvPortMalloc+0x64>)
  402474:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  402476:	b14d      	cbz	r5, 40248c <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  402478:	4628      	mov	r0, r5
  40247a:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  40247c:	4b09      	ldr	r3, [pc, #36]	; (4024a4 <pvPortMalloc+0x68>)
  40247e:	f023 0307 	bic.w	r3, r3, #7
  402482:	4a05      	ldr	r2, [pc, #20]	; (402498 <pvPortMalloc+0x5c>)
  402484:	6013      	str	r3, [r2, #0]
  402486:	e7e6      	b.n	402456 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  402488:	4b05      	ldr	r3, [pc, #20]	; (4024a0 <pvPortMalloc+0x64>)
  40248a:	4798      	blx	r3
			vApplicationMallocFailedHook();
  40248c:	4b06      	ldr	r3, [pc, #24]	; (4024a8 <pvPortMalloc+0x6c>)
  40248e:	4798      	blx	r3
  402490:	2500      	movs	r5, #0
	return pvReturn;
  402492:	e7f1      	b.n	402478 <pvPortMalloc+0x3c>
  402494:	00403119 	.word	0x00403119
  402498:	20400e24 	.word	0x20400e24
  40249c:	2040c628 	.word	0x2040c628
  4024a0:	00403281 	.word	0x00403281
  4024a4:	20400e30 	.word	0x20400e30
  4024a8:	00404107 	.word	0x00404107

004024ac <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4024ac:	b150      	cbz	r0, 4024c4 <vPortFree+0x18>
  4024ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b2:	b672      	cpsid	i
  4024b4:	f383 8811 	msr	BASEPRI, r3
  4024b8:	f3bf 8f6f 	isb	sy
  4024bc:	f3bf 8f4f 	dsb	sy
  4024c0:	b662      	cpsie	i
  4024c2:	e7fe      	b.n	4024c2 <vPortFree+0x16>
  4024c4:	4770      	bx	lr
	...

004024c8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4024c8:	b538      	push	{r3, r4, r5, lr}
  4024ca:	4604      	mov	r4, r0
  4024cc:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4024ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4024d0:	b95a      	cbnz	r2, 4024ea <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4024d2:	6803      	ldr	r3, [r0, #0]
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d12e      	bne.n	402536 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4024d8:	6840      	ldr	r0, [r0, #4]
  4024da:	4b1b      	ldr	r3, [pc, #108]	; (402548 <prvCopyDataToQueue+0x80>)
  4024dc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4024de:	2300      	movs	r3, #0
  4024e0:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4024e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024e4:	3301      	adds	r3, #1
  4024e6:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4024e8:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4024ea:	b96d      	cbnz	r5, 402508 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4024ec:	6880      	ldr	r0, [r0, #8]
  4024ee:	4b17      	ldr	r3, [pc, #92]	; (40254c <prvCopyDataToQueue+0x84>)
  4024f0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4024f2:	68a3      	ldr	r3, [r4, #8]
  4024f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4024f6:	4413      	add	r3, r2
  4024f8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4024fa:	6862      	ldr	r2, [r4, #4]
  4024fc:	4293      	cmp	r3, r2
  4024fe:	d31c      	bcc.n	40253a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402500:	6823      	ldr	r3, [r4, #0]
  402502:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  402504:	2000      	movs	r0, #0
  402506:	e7ec      	b.n	4024e2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402508:	68c0      	ldr	r0, [r0, #12]
  40250a:	4b10      	ldr	r3, [pc, #64]	; (40254c <prvCopyDataToQueue+0x84>)
  40250c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40250e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402510:	425b      	negs	r3, r3
  402512:	68e2      	ldr	r2, [r4, #12]
  402514:	441a      	add	r2, r3
  402516:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402518:	6821      	ldr	r1, [r4, #0]
  40251a:	428a      	cmp	r2, r1
  40251c:	d202      	bcs.n	402524 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40251e:	6862      	ldr	r2, [r4, #4]
  402520:	4413      	add	r3, r2
  402522:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  402524:	2d02      	cmp	r5, #2
  402526:	d10a      	bne.n	40253e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40252a:	b153      	cbz	r3, 402542 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  40252c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40252e:	3b01      	subs	r3, #1
  402530:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  402532:	2000      	movs	r0, #0
  402534:	e7d5      	b.n	4024e2 <prvCopyDataToQueue+0x1a>
  402536:	2000      	movs	r0, #0
  402538:	e7d3      	b.n	4024e2 <prvCopyDataToQueue+0x1a>
  40253a:	2000      	movs	r0, #0
  40253c:	e7d1      	b.n	4024e2 <prvCopyDataToQueue+0x1a>
  40253e:	2000      	movs	r0, #0
  402540:	e7cf      	b.n	4024e2 <prvCopyDataToQueue+0x1a>
  402542:	2000      	movs	r0, #0
  402544:	e7cd      	b.n	4024e2 <prvCopyDataToQueue+0x1a>
  402546:	bf00      	nop
  402548:	004038c9 	.word	0x004038c9
  40254c:	00404c39 	.word	0x00404c39

00402550 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402550:	b530      	push	{r4, r5, lr}
  402552:	b083      	sub	sp, #12
  402554:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  402556:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402558:	b174      	cbz	r4, 402578 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40255a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40255c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40255e:	429a      	cmp	r2, r3
  402560:	d315      	bcc.n	40258e <prvNotifyQueueSetContainer+0x3e>
  402562:	f04f 0380 	mov.w	r3, #128	; 0x80
  402566:	b672      	cpsid	i
  402568:	f383 8811 	msr	BASEPRI, r3
  40256c:	f3bf 8f6f 	isb	sy
  402570:	f3bf 8f4f 	dsb	sy
  402574:	b662      	cpsie	i
  402576:	e7fe      	b.n	402576 <prvNotifyQueueSetContainer+0x26>
  402578:	f04f 0380 	mov.w	r3, #128	; 0x80
  40257c:	b672      	cpsid	i
  40257e:	f383 8811 	msr	BASEPRI, r3
  402582:	f3bf 8f6f 	isb	sy
  402586:	f3bf 8f4f 	dsb	sy
  40258a:	b662      	cpsie	i
  40258c:	e7fe      	b.n	40258c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40258e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402590:	4293      	cmp	r3, r2
  402592:	d803      	bhi.n	40259c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  402594:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402596:	4628      	mov	r0, r5
  402598:	b003      	add	sp, #12
  40259a:	bd30      	pop	{r4, r5, pc}
  40259c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40259e:	a901      	add	r1, sp, #4
  4025a0:	4620      	mov	r0, r4
  4025a2:	4b0b      	ldr	r3, [pc, #44]	; (4025d0 <prvNotifyQueueSetContainer+0x80>)
  4025a4:	4798      	blx	r3
  4025a6:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4025a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4025ae:	d10a      	bne.n	4025c6 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4025b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4025b2:	2b00      	cmp	r3, #0
  4025b4:	d0ef      	beq.n	402596 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4025b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4025ba:	4b06      	ldr	r3, [pc, #24]	; (4025d4 <prvNotifyQueueSetContainer+0x84>)
  4025bc:	4798      	blx	r3
  4025be:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4025c0:	bf18      	it	ne
  4025c2:	2501      	movne	r5, #1
  4025c4:	e7e7      	b.n	402596 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4025c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4025c8:	3301      	adds	r3, #1
  4025ca:	64a3      	str	r3, [r4, #72]	; 0x48
  4025cc:	e7e3      	b.n	402596 <prvNotifyQueueSetContainer+0x46>
  4025ce:	bf00      	nop
  4025d0:	004024c9 	.word	0x004024c9
  4025d4:	0040369d 	.word	0x0040369d

004025d8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4025d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4025da:	b172      	cbz	r2, 4025fa <prvCopyDataFromQueue+0x22>
{
  4025dc:	b510      	push	{r4, lr}
  4025de:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4025e0:	68c4      	ldr	r4, [r0, #12]
  4025e2:	4414      	add	r4, r2
  4025e4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4025e6:	6840      	ldr	r0, [r0, #4]
  4025e8:	4284      	cmp	r4, r0
  4025ea:	d301      	bcc.n	4025f0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4025ec:	6818      	ldr	r0, [r3, #0]
  4025ee:	60d8      	str	r0, [r3, #12]
  4025f0:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4025f2:	68d9      	ldr	r1, [r3, #12]
  4025f4:	4b01      	ldr	r3, [pc, #4]	; (4025fc <prvCopyDataFromQueue+0x24>)
  4025f6:	4798      	blx	r3
  4025f8:	bd10      	pop	{r4, pc}
  4025fa:	4770      	bx	lr
  4025fc:	00404c39 	.word	0x00404c39

00402600 <prvUnlockQueue>:
{
  402600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402602:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  402604:	4b22      	ldr	r3, [pc, #136]	; (402690 <prvUnlockQueue+0x90>)
  402606:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402608:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40260a:	2b00      	cmp	r3, #0
  40260c:	dd1b      	ble.n	402646 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40260e:	4d21      	ldr	r5, [pc, #132]	; (402694 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  402610:	4f21      	ldr	r7, [pc, #132]	; (402698 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402612:	4e22      	ldr	r6, [pc, #136]	; (40269c <prvUnlockQueue+0x9c>)
  402614:	e00b      	b.n	40262e <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402616:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402618:	b1ab      	cbz	r3, 402646 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40261a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40261e:	47b0      	blx	r6
  402620:	b978      	cbnz	r0, 402642 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  402622:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402624:	3b01      	subs	r3, #1
  402626:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402628:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40262a:	2b00      	cmp	r3, #0
  40262c:	dd0b      	ble.n	402646 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40262e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402630:	2b00      	cmp	r3, #0
  402632:	d0f0      	beq.n	402616 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402634:	2100      	movs	r1, #0
  402636:	4620      	mov	r0, r4
  402638:	47a8      	blx	r5
  40263a:	2801      	cmp	r0, #1
  40263c:	d1f1      	bne.n	402622 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40263e:	47b8      	blx	r7
  402640:	e7ef      	b.n	402622 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  402642:	47b8      	blx	r7
  402644:	e7ed      	b.n	402622 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  402646:	f04f 33ff 	mov.w	r3, #4294967295
  40264a:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  40264c:	4b14      	ldr	r3, [pc, #80]	; (4026a0 <prvUnlockQueue+0xa0>)
  40264e:	4798      	blx	r3
	taskENTER_CRITICAL();
  402650:	4b0f      	ldr	r3, [pc, #60]	; (402690 <prvUnlockQueue+0x90>)
  402652:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402654:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402656:	2b00      	cmp	r3, #0
  402658:	dd14      	ble.n	402684 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40265a:	6923      	ldr	r3, [r4, #16]
  40265c:	b193      	cbz	r3, 402684 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40265e:	f104 0610 	add.w	r6, r4, #16
  402662:	4d0e      	ldr	r5, [pc, #56]	; (40269c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402664:	4f0c      	ldr	r7, [pc, #48]	; (402698 <prvUnlockQueue+0x98>)
  402666:	e007      	b.n	402678 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  402668:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40266a:	3b01      	subs	r3, #1
  40266c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40266e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402670:	2b00      	cmp	r3, #0
  402672:	dd07      	ble.n	402684 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402674:	6923      	ldr	r3, [r4, #16]
  402676:	b12b      	cbz	r3, 402684 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402678:	4630      	mov	r0, r6
  40267a:	47a8      	blx	r5
  40267c:	2800      	cmp	r0, #0
  40267e:	d0f3      	beq.n	402668 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  402680:	47b8      	blx	r7
  402682:	e7f1      	b.n	402668 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  402684:	f04f 33ff 	mov.w	r3, #4294967295
  402688:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40268a:	4b05      	ldr	r3, [pc, #20]	; (4026a0 <prvUnlockQueue+0xa0>)
  40268c:	4798      	blx	r3
  40268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402690:	004021e1 	.word	0x004021e1
  402694:	00402551 	.word	0x00402551
  402698:	004037f9 	.word	0x004037f9
  40269c:	0040369d 	.word	0x0040369d
  4026a0:	0040222d 	.word	0x0040222d

004026a4 <xQueueGenericReset>:
{
  4026a4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4026a6:	b308      	cbz	r0, 4026ec <xQueueGenericReset+0x48>
  4026a8:	4604      	mov	r4, r0
  4026aa:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4026ac:	4b1d      	ldr	r3, [pc, #116]	; (402724 <xQueueGenericReset+0x80>)
  4026ae:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4026b0:	6822      	ldr	r2, [r4, #0]
  4026b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4026b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4026b6:	fb03 f301 	mul.w	r3, r3, r1
  4026ba:	18d0      	adds	r0, r2, r3
  4026bc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4026be:	2000      	movs	r0, #0
  4026c0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4026c2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4026c4:	1a5b      	subs	r3, r3, r1
  4026c6:	4413      	add	r3, r2
  4026c8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4026ca:	f04f 33ff 	mov.w	r3, #4294967295
  4026ce:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4026d0:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4026d2:	b9fd      	cbnz	r5, 402714 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4026d4:	6923      	ldr	r3, [r4, #16]
  4026d6:	b12b      	cbz	r3, 4026e4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4026d8:	f104 0010 	add.w	r0, r4, #16
  4026dc:	4b12      	ldr	r3, [pc, #72]	; (402728 <xQueueGenericReset+0x84>)
  4026de:	4798      	blx	r3
  4026e0:	2801      	cmp	r0, #1
  4026e2:	d00e      	beq.n	402702 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4026e4:	4b11      	ldr	r3, [pc, #68]	; (40272c <xQueueGenericReset+0x88>)
  4026e6:	4798      	blx	r3
}
  4026e8:	2001      	movs	r0, #1
  4026ea:	bd38      	pop	{r3, r4, r5, pc}
  4026ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026f0:	b672      	cpsid	i
  4026f2:	f383 8811 	msr	BASEPRI, r3
  4026f6:	f3bf 8f6f 	isb	sy
  4026fa:	f3bf 8f4f 	dsb	sy
  4026fe:	b662      	cpsie	i
  402700:	e7fe      	b.n	402700 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  402702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402706:	4b0a      	ldr	r3, [pc, #40]	; (402730 <xQueueGenericReset+0x8c>)
  402708:	601a      	str	r2, [r3, #0]
  40270a:	f3bf 8f4f 	dsb	sy
  40270e:	f3bf 8f6f 	isb	sy
  402712:	e7e7      	b.n	4026e4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402714:	f104 0010 	add.w	r0, r4, #16
  402718:	4d06      	ldr	r5, [pc, #24]	; (402734 <xQueueGenericReset+0x90>)
  40271a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40271c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402720:	47a8      	blx	r5
  402722:	e7df      	b.n	4026e4 <xQueueGenericReset+0x40>
  402724:	004021e1 	.word	0x004021e1
  402728:	0040369d 	.word	0x0040369d
  40272c:	0040222d 	.word	0x0040222d
  402730:	e000ed04 	.word	0xe000ed04
  402734:	00402095 	.word	0x00402095

00402738 <xQueueGenericCreate>:
{
  402738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40273a:	b950      	cbnz	r0, 402752 <xQueueGenericCreate+0x1a>
  40273c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402740:	b672      	cpsid	i
  402742:	f383 8811 	msr	BASEPRI, r3
  402746:	f3bf 8f6f 	isb	sy
  40274a:	f3bf 8f4f 	dsb	sy
  40274e:	b662      	cpsie	i
  402750:	e7fe      	b.n	402750 <xQueueGenericCreate+0x18>
  402752:	4606      	mov	r6, r0
  402754:	4617      	mov	r7, r2
  402756:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402758:	b189      	cbz	r1, 40277e <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40275a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40275e:	3059      	adds	r0, #89	; 0x59
  402760:	4b12      	ldr	r3, [pc, #72]	; (4027ac <xQueueGenericCreate+0x74>)
  402762:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402764:	4604      	mov	r4, r0
  402766:	b9e8      	cbnz	r0, 4027a4 <xQueueGenericCreate+0x6c>
  402768:	f04f 0380 	mov.w	r3, #128	; 0x80
  40276c:	b672      	cpsid	i
  40276e:	f383 8811 	msr	BASEPRI, r3
  402772:	f3bf 8f6f 	isb	sy
  402776:	f3bf 8f4f 	dsb	sy
  40277a:	b662      	cpsie	i
  40277c:	e7fe      	b.n	40277c <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40277e:	2058      	movs	r0, #88	; 0x58
  402780:	4b0a      	ldr	r3, [pc, #40]	; (4027ac <xQueueGenericCreate+0x74>)
  402782:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402784:	4604      	mov	r4, r0
  402786:	2800      	cmp	r0, #0
  402788:	d0ee      	beq.n	402768 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40278a:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40278c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40278e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402790:	2101      	movs	r1, #1
  402792:	4620      	mov	r0, r4
  402794:	4b06      	ldr	r3, [pc, #24]	; (4027b0 <xQueueGenericCreate+0x78>)
  402796:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402798:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  40279c:	2300      	movs	r3, #0
  40279e:	6563      	str	r3, [r4, #84]	; 0x54
}
  4027a0:	4620      	mov	r0, r4
  4027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4027a4:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4027a8:	6003      	str	r3, [r0, #0]
  4027aa:	e7ef      	b.n	40278c <xQueueGenericCreate+0x54>
  4027ac:	0040243d 	.word	0x0040243d
  4027b0:	004026a5 	.word	0x004026a5

004027b4 <xQueueGenericSend>:
{
  4027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027b8:	b085      	sub	sp, #20
  4027ba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4027bc:	b1b8      	cbz	r0, 4027ee <xQueueGenericSend+0x3a>
  4027be:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027c0:	b301      	cbz	r1, 402804 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4027c2:	2b02      	cmp	r3, #2
  4027c4:	d02c      	beq.n	402820 <xQueueGenericSend+0x6c>
  4027c6:	461d      	mov	r5, r3
  4027c8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4027ca:	4b66      	ldr	r3, [pc, #408]	; (402964 <xQueueGenericSend+0x1b0>)
  4027cc:	4798      	blx	r3
  4027ce:	2800      	cmp	r0, #0
  4027d0:	d134      	bne.n	40283c <xQueueGenericSend+0x88>
  4027d2:	9b01      	ldr	r3, [sp, #4]
  4027d4:	2b00      	cmp	r3, #0
  4027d6:	d038      	beq.n	40284a <xQueueGenericSend+0x96>
  4027d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027dc:	b672      	cpsid	i
  4027de:	f383 8811 	msr	BASEPRI, r3
  4027e2:	f3bf 8f6f 	isb	sy
  4027e6:	f3bf 8f4f 	dsb	sy
  4027ea:	b662      	cpsie	i
  4027ec:	e7fe      	b.n	4027ec <xQueueGenericSend+0x38>
  4027ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f2:	b672      	cpsid	i
  4027f4:	f383 8811 	msr	BASEPRI, r3
  4027f8:	f3bf 8f6f 	isb	sy
  4027fc:	f3bf 8f4f 	dsb	sy
  402800:	b662      	cpsie	i
  402802:	e7fe      	b.n	402802 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402804:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402806:	2a00      	cmp	r2, #0
  402808:	d0db      	beq.n	4027c2 <xQueueGenericSend+0xe>
  40280a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40280e:	b672      	cpsid	i
  402810:	f383 8811 	msr	BASEPRI, r3
  402814:	f3bf 8f6f 	isb	sy
  402818:	f3bf 8f4f 	dsb	sy
  40281c:	b662      	cpsie	i
  40281e:	e7fe      	b.n	40281e <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402820:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402822:	2a01      	cmp	r2, #1
  402824:	d0cf      	beq.n	4027c6 <xQueueGenericSend+0x12>
  402826:	f04f 0380 	mov.w	r3, #128	; 0x80
  40282a:	b672      	cpsid	i
  40282c:	f383 8811 	msr	BASEPRI, r3
  402830:	f3bf 8f6f 	isb	sy
  402834:	f3bf 8f4f 	dsb	sy
  402838:	b662      	cpsie	i
  40283a:	e7fe      	b.n	40283a <xQueueGenericSend+0x86>
  40283c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40283e:	4e4a      	ldr	r6, [pc, #296]	; (402968 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402840:	f8df a150 	ldr.w	sl, [pc, #336]	; 402994 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  402844:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402974 <xQueueGenericSend+0x1c0>
  402848:	e042      	b.n	4028d0 <xQueueGenericSend+0x11c>
  40284a:	2700      	movs	r7, #0
  40284c:	e7f7      	b.n	40283e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40284e:	462a      	mov	r2, r5
  402850:	4641      	mov	r1, r8
  402852:	4620      	mov	r0, r4
  402854:	4b45      	ldr	r3, [pc, #276]	; (40296c <xQueueGenericSend+0x1b8>)
  402856:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402858:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40285a:	b19b      	cbz	r3, 402884 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40285c:	4629      	mov	r1, r5
  40285e:	4620      	mov	r0, r4
  402860:	4b43      	ldr	r3, [pc, #268]	; (402970 <xQueueGenericSend+0x1bc>)
  402862:	4798      	blx	r3
  402864:	2801      	cmp	r0, #1
  402866:	d107      	bne.n	402878 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40286c:	4b41      	ldr	r3, [pc, #260]	; (402974 <xQueueGenericSend+0x1c0>)
  40286e:	601a      	str	r2, [r3, #0]
  402870:	f3bf 8f4f 	dsb	sy
  402874:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402878:	4b3f      	ldr	r3, [pc, #252]	; (402978 <xQueueGenericSend+0x1c4>)
  40287a:	4798      	blx	r3
				return pdPASS;
  40287c:	2001      	movs	r0, #1
}
  40287e:	b005      	add	sp, #20
  402880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402884:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402886:	b173      	cbz	r3, 4028a6 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402888:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40288c:	4b3b      	ldr	r3, [pc, #236]	; (40297c <xQueueGenericSend+0x1c8>)
  40288e:	4798      	blx	r3
  402890:	2801      	cmp	r0, #1
  402892:	d1f1      	bne.n	402878 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402898:	4b36      	ldr	r3, [pc, #216]	; (402974 <xQueueGenericSend+0x1c0>)
  40289a:	601a      	str	r2, [r3, #0]
  40289c:	f3bf 8f4f 	dsb	sy
  4028a0:	f3bf 8f6f 	isb	sy
  4028a4:	e7e8      	b.n	402878 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4028a6:	2800      	cmp	r0, #0
  4028a8:	d0e6      	beq.n	402878 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4028aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4028ae:	4b31      	ldr	r3, [pc, #196]	; (402974 <xQueueGenericSend+0x1c0>)
  4028b0:	601a      	str	r2, [r3, #0]
  4028b2:	f3bf 8f4f 	dsb	sy
  4028b6:	f3bf 8f6f 	isb	sy
  4028ba:	e7dd      	b.n	402878 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4028bc:	4b2e      	ldr	r3, [pc, #184]	; (402978 <xQueueGenericSend+0x1c4>)
  4028be:	4798      	blx	r3
					return errQUEUE_FULL;
  4028c0:	2000      	movs	r0, #0
  4028c2:	e7dc      	b.n	40287e <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4028c4:	4620      	mov	r0, r4
  4028c6:	4b2e      	ldr	r3, [pc, #184]	; (402980 <xQueueGenericSend+0x1cc>)
  4028c8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4028ca:	4b2e      	ldr	r3, [pc, #184]	; (402984 <xQueueGenericSend+0x1d0>)
  4028cc:	4798      	blx	r3
  4028ce:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4028d0:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4028d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4028d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4028d6:	429a      	cmp	r2, r3
  4028d8:	d3b9      	bcc.n	40284e <xQueueGenericSend+0x9a>
  4028da:	2d02      	cmp	r5, #2
  4028dc:	d0b7      	beq.n	40284e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4028de:	9b01      	ldr	r3, [sp, #4]
  4028e0:	2b00      	cmp	r3, #0
  4028e2:	d0eb      	beq.n	4028bc <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4028e4:	b90f      	cbnz	r7, 4028ea <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4028e6:	a802      	add	r0, sp, #8
  4028e8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4028ea:	4b23      	ldr	r3, [pc, #140]	; (402978 <xQueueGenericSend+0x1c4>)
  4028ec:	4798      	blx	r3
		vTaskSuspendAll();
  4028ee:	4b26      	ldr	r3, [pc, #152]	; (402988 <xQueueGenericSend+0x1d4>)
  4028f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4028f2:	47b0      	blx	r6
  4028f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028fa:	d101      	bne.n	402900 <xQueueGenericSend+0x14c>
  4028fc:	2300      	movs	r3, #0
  4028fe:	6463      	str	r3, [r4, #68]	; 0x44
  402900:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402902:	f1b3 3fff 	cmp.w	r3, #4294967295
  402906:	d101      	bne.n	40290c <xQueueGenericSend+0x158>
  402908:	2300      	movs	r3, #0
  40290a:	64a3      	str	r3, [r4, #72]	; 0x48
  40290c:	4b1a      	ldr	r3, [pc, #104]	; (402978 <xQueueGenericSend+0x1c4>)
  40290e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402910:	a901      	add	r1, sp, #4
  402912:	a802      	add	r0, sp, #8
  402914:	4b1d      	ldr	r3, [pc, #116]	; (40298c <xQueueGenericSend+0x1d8>)
  402916:	4798      	blx	r3
  402918:	b9e0      	cbnz	r0, 402954 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40291a:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40291c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402920:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  402922:	4b15      	ldr	r3, [pc, #84]	; (402978 <xQueueGenericSend+0x1c4>)
  402924:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  402926:	45bb      	cmp	fp, r7
  402928:	d1cc      	bne.n	4028c4 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40292a:	9901      	ldr	r1, [sp, #4]
  40292c:	f104 0010 	add.w	r0, r4, #16
  402930:	4b17      	ldr	r3, [pc, #92]	; (402990 <xQueueGenericSend+0x1dc>)
  402932:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402934:	4620      	mov	r0, r4
  402936:	4b12      	ldr	r3, [pc, #72]	; (402980 <xQueueGenericSend+0x1cc>)
  402938:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40293a:	4b12      	ldr	r3, [pc, #72]	; (402984 <xQueueGenericSend+0x1d0>)
  40293c:	4798      	blx	r3
  40293e:	2800      	cmp	r0, #0
  402940:	d1c5      	bne.n	4028ce <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  402942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402946:	f8c9 3000 	str.w	r3, [r9]
  40294a:	f3bf 8f4f 	dsb	sy
  40294e:	f3bf 8f6f 	isb	sy
  402952:	e7bc      	b.n	4028ce <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402954:	4620      	mov	r0, r4
  402956:	4b0a      	ldr	r3, [pc, #40]	; (402980 <xQueueGenericSend+0x1cc>)
  402958:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40295a:	4b0a      	ldr	r3, [pc, #40]	; (402984 <xQueueGenericSend+0x1d0>)
  40295c:	4798      	blx	r3
			return errQUEUE_FULL;
  40295e:	2000      	movs	r0, #0
  402960:	e78d      	b.n	40287e <xQueueGenericSend+0xca>
  402962:	bf00      	nop
  402964:	00403805 	.word	0x00403805
  402968:	004021e1 	.word	0x004021e1
  40296c:	004024c9 	.word	0x004024c9
  402970:	00402551 	.word	0x00402551
  402974:	e000ed04 	.word	0xe000ed04
  402978:	0040222d 	.word	0x0040222d
  40297c:	0040369d 	.word	0x0040369d
  402980:	00402601 	.word	0x00402601
  402984:	00403281 	.word	0x00403281
  402988:	00403119 	.word	0x00403119
  40298c:	00403765 	.word	0x00403765
  402990:	00403599 	.word	0x00403599
  402994:	00403735 	.word	0x00403735

00402998 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402998:	2800      	cmp	r0, #0
  40299a:	d036      	beq.n	402a0a <xQueueGenericSendFromISR+0x72>
{
  40299c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029a0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4029a2:	2900      	cmp	r1, #0
  4029a4:	d03c      	beq.n	402a20 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4029a6:	2b02      	cmp	r3, #2
  4029a8:	d048      	beq.n	402a3c <xQueueGenericSendFromISR+0xa4>
  4029aa:	461e      	mov	r6, r3
  4029ac:	4615      	mov	r5, r2
  4029ae:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4029b0:	4b35      	ldr	r3, [pc, #212]	; (402a88 <xQueueGenericSendFromISR+0xf0>)
  4029b2:	4798      	blx	r3
	__asm volatile
  4029b4:	f3ef 8711 	mrs	r7, BASEPRI
  4029b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029bc:	b672      	cpsid	i
  4029be:	f383 8811 	msr	BASEPRI, r3
  4029c2:	f3bf 8f6f 	isb	sy
  4029c6:	f3bf 8f4f 	dsb	sy
  4029ca:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4029cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4029ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4029d0:	429a      	cmp	r2, r3
  4029d2:	d301      	bcc.n	4029d8 <xQueueGenericSendFromISR+0x40>
  4029d4:	2e02      	cmp	r6, #2
  4029d6:	d14f      	bne.n	402a78 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4029d8:	4632      	mov	r2, r6
  4029da:	4641      	mov	r1, r8
  4029dc:	4620      	mov	r0, r4
  4029de:	4b2b      	ldr	r3, [pc, #172]	; (402a8c <xQueueGenericSendFromISR+0xf4>)
  4029e0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4029e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4029e8:	d141      	bne.n	402a6e <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4029ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4029ec:	2b00      	cmp	r3, #0
  4029ee:	d033      	beq.n	402a58 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4029f0:	4631      	mov	r1, r6
  4029f2:	4620      	mov	r0, r4
  4029f4:	4b26      	ldr	r3, [pc, #152]	; (402a90 <xQueueGenericSendFromISR+0xf8>)
  4029f6:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4029f8:	2d00      	cmp	r5, #0
  4029fa:	d03f      	beq.n	402a7c <xQueueGenericSendFromISR+0xe4>
  4029fc:	2801      	cmp	r0, #1
  4029fe:	d13d      	bne.n	402a7c <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402a00:	6028      	str	r0, [r5, #0]
	__asm volatile
  402a02:	f387 8811 	msr	BASEPRI, r7
}
  402a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a0e:	b672      	cpsid	i
  402a10:	f383 8811 	msr	BASEPRI, r3
  402a14:	f3bf 8f6f 	isb	sy
  402a18:	f3bf 8f4f 	dsb	sy
  402a1c:	b662      	cpsie	i
  402a1e:	e7fe      	b.n	402a1e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402a20:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402a22:	2800      	cmp	r0, #0
  402a24:	d0bf      	beq.n	4029a6 <xQueueGenericSendFromISR+0xe>
  402a26:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a2a:	b672      	cpsid	i
  402a2c:	f383 8811 	msr	BASEPRI, r3
  402a30:	f3bf 8f6f 	isb	sy
  402a34:	f3bf 8f4f 	dsb	sy
  402a38:	b662      	cpsie	i
  402a3a:	e7fe      	b.n	402a3a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402a3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402a3e:	2801      	cmp	r0, #1
  402a40:	d0b3      	beq.n	4029aa <xQueueGenericSendFromISR+0x12>
  402a42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a46:	b672      	cpsid	i
  402a48:	f383 8811 	msr	BASEPRI, r3
  402a4c:	f3bf 8f6f 	isb	sy
  402a50:	f3bf 8f4f 	dsb	sy
  402a54:	b662      	cpsie	i
  402a56:	e7fe      	b.n	402a56 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a5a:	b18b      	cbz	r3, 402a80 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402a5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a60:	4b0c      	ldr	r3, [pc, #48]	; (402a94 <xQueueGenericSendFromISR+0xfc>)
  402a62:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402a64:	b175      	cbz	r5, 402a84 <xQueueGenericSendFromISR+0xec>
  402a66:	b168      	cbz	r0, 402a84 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402a68:	2001      	movs	r0, #1
  402a6a:	6028      	str	r0, [r5, #0]
  402a6c:	e7c9      	b.n	402a02 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402a6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a70:	3301      	adds	r3, #1
  402a72:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402a74:	2001      	movs	r0, #1
  402a76:	e7c4      	b.n	402a02 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402a78:	2000      	movs	r0, #0
  402a7a:	e7c2      	b.n	402a02 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402a7c:	2001      	movs	r0, #1
  402a7e:	e7c0      	b.n	402a02 <xQueueGenericSendFromISR+0x6a>
  402a80:	2001      	movs	r0, #1
  402a82:	e7be      	b.n	402a02 <xQueueGenericSendFromISR+0x6a>
  402a84:	2001      	movs	r0, #1
  402a86:	e7bc      	b.n	402a02 <xQueueGenericSendFromISR+0x6a>
  402a88:	004023d9 	.word	0x004023d9
  402a8c:	004024c9 	.word	0x004024c9
  402a90:	00402551 	.word	0x00402551
  402a94:	0040369d 	.word	0x0040369d

00402a98 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402a98:	b170      	cbz	r0, 402ab8 <xQueueGiveFromISR+0x20>
{
  402a9a:	b570      	push	{r4, r5, r6, lr}
  402a9c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402a9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402aa0:	b1ab      	cbz	r3, 402ace <xQueueGiveFromISR+0x36>
  402aa2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402aa6:	b672      	cpsid	i
  402aa8:	f383 8811 	msr	BASEPRI, r3
  402aac:	f3bf 8f6f 	isb	sy
  402ab0:	f3bf 8f4f 	dsb	sy
  402ab4:	b662      	cpsie	i
  402ab6:	e7fe      	b.n	402ab6 <xQueueGiveFromISR+0x1e>
  402ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402abc:	b672      	cpsid	i
  402abe:	f383 8811 	msr	BASEPRI, r3
  402ac2:	f3bf 8f6f 	isb	sy
  402ac6:	f3bf 8f4f 	dsb	sy
  402aca:	b662      	cpsie	i
  402acc:	e7fe      	b.n	402acc <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402ace:	6803      	ldr	r3, [r0, #0]
  402ad0:	b333      	cbz	r3, 402b20 <xQueueGiveFromISR+0x88>
  402ad2:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402ad4:	4b25      	ldr	r3, [pc, #148]	; (402b6c <xQueueGiveFromISR+0xd4>)
  402ad6:	4798      	blx	r3
	__asm volatile
  402ad8:	f3ef 8611 	mrs	r6, BASEPRI
  402adc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ae0:	b672      	cpsid	i
  402ae2:	f383 8811 	msr	BASEPRI, r3
  402ae6:	f3bf 8f6f 	isb	sy
  402aea:	f3bf 8f4f 	dsb	sy
  402aee:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402af0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402af2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402af4:	429a      	cmp	r2, r3
  402af6:	d231      	bcs.n	402b5c <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  402af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402afa:	3301      	adds	r3, #1
  402afc:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  402afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b00:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b04:	d125      	bne.n	402b52 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  402b06:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402b08:	b1c3      	cbz	r3, 402b3c <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402b0a:	2100      	movs	r1, #0
  402b0c:	4620      	mov	r0, r4
  402b0e:	4b18      	ldr	r3, [pc, #96]	; (402b70 <xQueueGiveFromISR+0xd8>)
  402b10:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402b12:	b32d      	cbz	r5, 402b60 <xQueueGiveFromISR+0xc8>
  402b14:	2801      	cmp	r0, #1
  402b16:	d123      	bne.n	402b60 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402b18:	6028      	str	r0, [r5, #0]
	__asm volatile
  402b1a:	f386 8811 	msr	BASEPRI, r6
}
  402b1e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402b20:	6843      	ldr	r3, [r0, #4]
  402b22:	2b00      	cmp	r3, #0
  402b24:	d0d5      	beq.n	402ad2 <xQueueGiveFromISR+0x3a>
	__asm volatile
  402b26:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b2a:	b672      	cpsid	i
  402b2c:	f383 8811 	msr	BASEPRI, r3
  402b30:	f3bf 8f6f 	isb	sy
  402b34:	f3bf 8f4f 	dsb	sy
  402b38:	b662      	cpsie	i
  402b3a:	e7fe      	b.n	402b3a <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b3e:	b18b      	cbz	r3, 402b64 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402b40:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402b44:	4b0b      	ldr	r3, [pc, #44]	; (402b74 <xQueueGiveFromISR+0xdc>)
  402b46:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402b48:	b175      	cbz	r5, 402b68 <xQueueGiveFromISR+0xd0>
  402b4a:	b168      	cbz	r0, 402b68 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402b4c:	2001      	movs	r0, #1
  402b4e:	6028      	str	r0, [r5, #0]
  402b50:	e7e3      	b.n	402b1a <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  402b52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b54:	3301      	adds	r3, #1
  402b56:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402b58:	2001      	movs	r0, #1
  402b5a:	e7de      	b.n	402b1a <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402b5c:	2000      	movs	r0, #0
  402b5e:	e7dc      	b.n	402b1a <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402b60:	2001      	movs	r0, #1
  402b62:	e7da      	b.n	402b1a <xQueueGiveFromISR+0x82>
  402b64:	2001      	movs	r0, #1
  402b66:	e7d8      	b.n	402b1a <xQueueGiveFromISR+0x82>
  402b68:	2001      	movs	r0, #1
  402b6a:	e7d6      	b.n	402b1a <xQueueGiveFromISR+0x82>
  402b6c:	004023d9 	.word	0x004023d9
  402b70:	00402551 	.word	0x00402551
  402b74:	0040369d 	.word	0x0040369d

00402b78 <xQueueGenericReceive>:
{
  402b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b7c:	b084      	sub	sp, #16
  402b7e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402b80:	b198      	cbz	r0, 402baa <xQueueGenericReceive+0x32>
  402b82:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402b84:	b1e1      	cbz	r1, 402bc0 <xQueueGenericReceive+0x48>
  402b86:	4698      	mov	r8, r3
  402b88:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402b8a:	4b61      	ldr	r3, [pc, #388]	; (402d10 <xQueueGenericReceive+0x198>)
  402b8c:	4798      	blx	r3
  402b8e:	bb28      	cbnz	r0, 402bdc <xQueueGenericReceive+0x64>
  402b90:	9b01      	ldr	r3, [sp, #4]
  402b92:	b353      	cbz	r3, 402bea <xQueueGenericReceive+0x72>
  402b94:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b98:	b672      	cpsid	i
  402b9a:	f383 8811 	msr	BASEPRI, r3
  402b9e:	f3bf 8f6f 	isb	sy
  402ba2:	f3bf 8f4f 	dsb	sy
  402ba6:	b662      	cpsie	i
  402ba8:	e7fe      	b.n	402ba8 <xQueueGenericReceive+0x30>
  402baa:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bae:	b672      	cpsid	i
  402bb0:	f383 8811 	msr	BASEPRI, r3
  402bb4:	f3bf 8f6f 	isb	sy
  402bb8:	f3bf 8f4f 	dsb	sy
  402bbc:	b662      	cpsie	i
  402bbe:	e7fe      	b.n	402bbe <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402bc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402bc2:	2a00      	cmp	r2, #0
  402bc4:	d0df      	beq.n	402b86 <xQueueGenericReceive+0xe>
  402bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bca:	b672      	cpsid	i
  402bcc:	f383 8811 	msr	BASEPRI, r3
  402bd0:	f3bf 8f6f 	isb	sy
  402bd4:	f3bf 8f4f 	dsb	sy
  402bd8:	b662      	cpsie	i
  402bda:	e7fe      	b.n	402bda <xQueueGenericReceive+0x62>
  402bdc:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402bde:	4d4d      	ldr	r5, [pc, #308]	; (402d14 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402be0:	f8df a160 	ldr.w	sl, [pc, #352]	; 402d44 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402be4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402d24 <xQueueGenericReceive+0x1ac>
  402be8:	e04b      	b.n	402c82 <xQueueGenericReceive+0x10a>
  402bea:	2600      	movs	r6, #0
  402bec:	e7f7      	b.n	402bde <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402bee:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402bf0:	4639      	mov	r1, r7
  402bf2:	4620      	mov	r0, r4
  402bf4:	4b48      	ldr	r3, [pc, #288]	; (402d18 <xQueueGenericReceive+0x1a0>)
  402bf6:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402bf8:	f1b8 0f00 	cmp.w	r8, #0
  402bfc:	d11d      	bne.n	402c3a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402c00:	3b01      	subs	r3, #1
  402c02:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402c04:	6823      	ldr	r3, [r4, #0]
  402c06:	b913      	cbnz	r3, 402c0e <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402c08:	4b44      	ldr	r3, [pc, #272]	; (402d1c <xQueueGenericReceive+0x1a4>)
  402c0a:	4798      	blx	r3
  402c0c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402c0e:	6923      	ldr	r3, [r4, #16]
  402c10:	b16b      	cbz	r3, 402c2e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402c12:	f104 0010 	add.w	r0, r4, #16
  402c16:	4b42      	ldr	r3, [pc, #264]	; (402d20 <xQueueGenericReceive+0x1a8>)
  402c18:	4798      	blx	r3
  402c1a:	2801      	cmp	r0, #1
  402c1c:	d107      	bne.n	402c2e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c22:	4b40      	ldr	r3, [pc, #256]	; (402d24 <xQueueGenericReceive+0x1ac>)
  402c24:	601a      	str	r2, [r3, #0]
  402c26:	f3bf 8f4f 	dsb	sy
  402c2a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402c2e:	4b3e      	ldr	r3, [pc, #248]	; (402d28 <xQueueGenericReceive+0x1b0>)
  402c30:	4798      	blx	r3
				return pdPASS;
  402c32:	2001      	movs	r0, #1
}
  402c34:	b004      	add	sp, #16
  402c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402c3a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402c3e:	2b00      	cmp	r3, #0
  402c40:	d0f5      	beq.n	402c2e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402c42:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402c46:	4b36      	ldr	r3, [pc, #216]	; (402d20 <xQueueGenericReceive+0x1a8>)
  402c48:	4798      	blx	r3
  402c4a:	2800      	cmp	r0, #0
  402c4c:	d0ef      	beq.n	402c2e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c52:	4b34      	ldr	r3, [pc, #208]	; (402d24 <xQueueGenericReceive+0x1ac>)
  402c54:	601a      	str	r2, [r3, #0]
  402c56:	f3bf 8f4f 	dsb	sy
  402c5a:	f3bf 8f6f 	isb	sy
  402c5e:	e7e6      	b.n	402c2e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402c60:	4b31      	ldr	r3, [pc, #196]	; (402d28 <xQueueGenericReceive+0x1b0>)
  402c62:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402c64:	2000      	movs	r0, #0
  402c66:	e7e5      	b.n	402c34 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402c68:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402c6a:	6860      	ldr	r0, [r4, #4]
  402c6c:	4b2f      	ldr	r3, [pc, #188]	; (402d2c <xQueueGenericReceive+0x1b4>)
  402c6e:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402c70:	4b2d      	ldr	r3, [pc, #180]	; (402d28 <xQueueGenericReceive+0x1b0>)
  402c72:	4798      	blx	r3
  402c74:	e030      	b.n	402cd8 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402c76:	4620      	mov	r0, r4
  402c78:	4b2d      	ldr	r3, [pc, #180]	; (402d30 <xQueueGenericReceive+0x1b8>)
  402c7a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402c7c:	4b2d      	ldr	r3, [pc, #180]	; (402d34 <xQueueGenericReceive+0x1bc>)
  402c7e:	4798      	blx	r3
  402c80:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402c82:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402c86:	2b00      	cmp	r3, #0
  402c88:	d1b1      	bne.n	402bee <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402c8a:	9b01      	ldr	r3, [sp, #4]
  402c8c:	2b00      	cmp	r3, #0
  402c8e:	d0e7      	beq.n	402c60 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402c90:	b90e      	cbnz	r6, 402c96 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402c92:	a802      	add	r0, sp, #8
  402c94:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402c96:	4b24      	ldr	r3, [pc, #144]	; (402d28 <xQueueGenericReceive+0x1b0>)
  402c98:	4798      	blx	r3
		vTaskSuspendAll();
  402c9a:	4b27      	ldr	r3, [pc, #156]	; (402d38 <xQueueGenericReceive+0x1c0>)
  402c9c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402c9e:	47a8      	blx	r5
  402ca0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ca6:	d101      	bne.n	402cac <xQueueGenericReceive+0x134>
  402ca8:	2300      	movs	r3, #0
  402caa:	6463      	str	r3, [r4, #68]	; 0x44
  402cac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402cae:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cb2:	d101      	bne.n	402cb8 <xQueueGenericReceive+0x140>
  402cb4:	2300      	movs	r3, #0
  402cb6:	64a3      	str	r3, [r4, #72]	; 0x48
  402cb8:	4b1b      	ldr	r3, [pc, #108]	; (402d28 <xQueueGenericReceive+0x1b0>)
  402cba:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402cbc:	a901      	add	r1, sp, #4
  402cbe:	a802      	add	r0, sp, #8
  402cc0:	4b1e      	ldr	r3, [pc, #120]	; (402d3c <xQueueGenericReceive+0x1c4>)
  402cc2:	4798      	blx	r3
  402cc4:	b9e8      	cbnz	r0, 402d02 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402cc6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402cc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402cca:	4b17      	ldr	r3, [pc, #92]	; (402d28 <xQueueGenericReceive+0x1b0>)
  402ccc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402cce:	2e00      	cmp	r6, #0
  402cd0:	d1d1      	bne.n	402c76 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402cd2:	6823      	ldr	r3, [r4, #0]
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	d0c7      	beq.n	402c68 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402cd8:	9901      	ldr	r1, [sp, #4]
  402cda:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402cde:	4b18      	ldr	r3, [pc, #96]	; (402d40 <xQueueGenericReceive+0x1c8>)
  402ce0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402ce2:	4620      	mov	r0, r4
  402ce4:	4b12      	ldr	r3, [pc, #72]	; (402d30 <xQueueGenericReceive+0x1b8>)
  402ce6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402ce8:	4b12      	ldr	r3, [pc, #72]	; (402d34 <xQueueGenericReceive+0x1bc>)
  402cea:	4798      	blx	r3
  402cec:	2800      	cmp	r0, #0
  402cee:	d1c7      	bne.n	402c80 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402cf4:	f8c9 3000 	str.w	r3, [r9]
  402cf8:	f3bf 8f4f 	dsb	sy
  402cfc:	f3bf 8f6f 	isb	sy
  402d00:	e7be      	b.n	402c80 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402d02:	4620      	mov	r0, r4
  402d04:	4b0a      	ldr	r3, [pc, #40]	; (402d30 <xQueueGenericReceive+0x1b8>)
  402d06:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402d08:	4b0a      	ldr	r3, [pc, #40]	; (402d34 <xQueueGenericReceive+0x1bc>)
  402d0a:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402d0c:	2000      	movs	r0, #0
  402d0e:	e791      	b.n	402c34 <xQueueGenericReceive+0xbc>
  402d10:	00403805 	.word	0x00403805
  402d14:	004021e1 	.word	0x004021e1
  402d18:	004025d9 	.word	0x004025d9
  402d1c:	00403985 	.word	0x00403985
  402d20:	0040369d 	.word	0x0040369d
  402d24:	e000ed04 	.word	0xe000ed04
  402d28:	0040222d 	.word	0x0040222d
  402d2c:	00403825 	.word	0x00403825
  402d30:	00402601 	.word	0x00402601
  402d34:	00403281 	.word	0x00403281
  402d38:	00403119 	.word	0x00403119
  402d3c:	00403765 	.word	0x00403765
  402d40:	00403599 	.word	0x00403599
  402d44:	00403735 	.word	0x00403735

00402d48 <vQueueAddToRegistry>:
	{
  402d48:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402d4a:	4b0b      	ldr	r3, [pc, #44]	; (402d78 <vQueueAddToRegistry+0x30>)
  402d4c:	681b      	ldr	r3, [r3, #0]
  402d4e:	b153      	cbz	r3, 402d66 <vQueueAddToRegistry+0x1e>
  402d50:	2301      	movs	r3, #1
  402d52:	4c09      	ldr	r4, [pc, #36]	; (402d78 <vQueueAddToRegistry+0x30>)
  402d54:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402d58:	b132      	cbz	r2, 402d68 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402d5a:	3301      	adds	r3, #1
  402d5c:	2b08      	cmp	r3, #8
  402d5e:	d1f9      	bne.n	402d54 <vQueueAddToRegistry+0xc>
	}
  402d60:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d64:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402d66:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402d68:	4a03      	ldr	r2, [pc, #12]	; (402d78 <vQueueAddToRegistry+0x30>)
  402d6a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402d6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402d72:	6058      	str	r0, [r3, #4]
				break;
  402d74:	e7f4      	b.n	402d60 <vQueueAddToRegistry+0x18>
  402d76:	bf00      	nop
  402d78:	2040c830 	.word	0x2040c830

00402d7c <vQueueWaitForMessageRestricted>:
	{
  402d7c:	b570      	push	{r4, r5, r6, lr}
  402d7e:	4604      	mov	r4, r0
  402d80:	460d      	mov	r5, r1
  402d82:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402d84:	4b0f      	ldr	r3, [pc, #60]	; (402dc4 <vQueueWaitForMessageRestricted+0x48>)
  402d86:	4798      	blx	r3
  402d88:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d8e:	d00b      	beq.n	402da8 <vQueueWaitForMessageRestricted+0x2c>
  402d90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402d92:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d96:	d00a      	beq.n	402dae <vQueueWaitForMessageRestricted+0x32>
  402d98:	4b0b      	ldr	r3, [pc, #44]	; (402dc8 <vQueueWaitForMessageRestricted+0x4c>)
  402d9a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402d9e:	b14b      	cbz	r3, 402db4 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402da0:	4620      	mov	r0, r4
  402da2:	4b0a      	ldr	r3, [pc, #40]	; (402dcc <vQueueWaitForMessageRestricted+0x50>)
  402da4:	4798      	blx	r3
  402da6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402da8:	2300      	movs	r3, #0
  402daa:	6463      	str	r3, [r4, #68]	; 0x44
  402dac:	e7f0      	b.n	402d90 <vQueueWaitForMessageRestricted+0x14>
  402dae:	2300      	movs	r3, #0
  402db0:	64a3      	str	r3, [r4, #72]	; 0x48
  402db2:	e7f1      	b.n	402d98 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402db4:	4632      	mov	r2, r6
  402db6:	4629      	mov	r1, r5
  402db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402dbc:	4b04      	ldr	r3, [pc, #16]	; (402dd0 <vQueueWaitForMessageRestricted+0x54>)
  402dbe:	4798      	blx	r3
  402dc0:	e7ee      	b.n	402da0 <vQueueWaitForMessageRestricted+0x24>
  402dc2:	bf00      	nop
  402dc4:	004021e1 	.word	0x004021e1
  402dc8:	0040222d 	.word	0x0040222d
  402dcc:	00402601 	.word	0x00402601
  402dd0:	0040361d 	.word	0x0040361d

00402dd4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402dd4:	4b08      	ldr	r3, [pc, #32]	; (402df8 <prvResetNextTaskUnblockTime+0x24>)
  402dd6:	681b      	ldr	r3, [r3, #0]
  402dd8:	681b      	ldr	r3, [r3, #0]
  402dda:	b13b      	cbz	r3, 402dec <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402ddc:	4b06      	ldr	r3, [pc, #24]	; (402df8 <prvResetNextTaskUnblockTime+0x24>)
  402dde:	681b      	ldr	r3, [r3, #0]
  402de0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402de2:	68db      	ldr	r3, [r3, #12]
  402de4:	685a      	ldr	r2, [r3, #4]
  402de6:	4b05      	ldr	r3, [pc, #20]	; (402dfc <prvResetNextTaskUnblockTime+0x28>)
  402de8:	601a      	str	r2, [r3, #0]
  402dea:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402dec:	f04f 32ff 	mov.w	r2, #4294967295
  402df0:	4b02      	ldr	r3, [pc, #8]	; (402dfc <prvResetNextTaskUnblockTime+0x28>)
  402df2:	601a      	str	r2, [r3, #0]
  402df4:	4770      	bx	lr
  402df6:	bf00      	nop
  402df8:	2040c630 	.word	0x2040c630
  402dfc:	2040c6dc 	.word	0x2040c6dc

00402e00 <prvAddCurrentTaskToDelayedList>:
{
  402e00:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402e02:	4b0f      	ldr	r3, [pc, #60]	; (402e40 <prvAddCurrentTaskToDelayedList+0x40>)
  402e04:	681b      	ldr	r3, [r3, #0]
  402e06:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402e08:	4b0e      	ldr	r3, [pc, #56]	; (402e44 <prvAddCurrentTaskToDelayedList+0x44>)
  402e0a:	681b      	ldr	r3, [r3, #0]
  402e0c:	4298      	cmp	r0, r3
  402e0e:	d30e      	bcc.n	402e2e <prvAddCurrentTaskToDelayedList+0x2e>
  402e10:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402e12:	4b0d      	ldr	r3, [pc, #52]	; (402e48 <prvAddCurrentTaskToDelayedList+0x48>)
  402e14:	6818      	ldr	r0, [r3, #0]
  402e16:	4b0a      	ldr	r3, [pc, #40]	; (402e40 <prvAddCurrentTaskToDelayedList+0x40>)
  402e18:	6819      	ldr	r1, [r3, #0]
  402e1a:	3104      	adds	r1, #4
  402e1c:	4b0b      	ldr	r3, [pc, #44]	; (402e4c <prvAddCurrentTaskToDelayedList+0x4c>)
  402e1e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402e20:	4b0b      	ldr	r3, [pc, #44]	; (402e50 <prvAddCurrentTaskToDelayedList+0x50>)
  402e22:	681b      	ldr	r3, [r3, #0]
  402e24:	429c      	cmp	r4, r3
  402e26:	d201      	bcs.n	402e2c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402e28:	4b09      	ldr	r3, [pc, #36]	; (402e50 <prvAddCurrentTaskToDelayedList+0x50>)
  402e2a:	601c      	str	r4, [r3, #0]
  402e2c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402e2e:	4b09      	ldr	r3, [pc, #36]	; (402e54 <prvAddCurrentTaskToDelayedList+0x54>)
  402e30:	6818      	ldr	r0, [r3, #0]
  402e32:	4b03      	ldr	r3, [pc, #12]	; (402e40 <prvAddCurrentTaskToDelayedList+0x40>)
  402e34:	6819      	ldr	r1, [r3, #0]
  402e36:	3104      	adds	r1, #4
  402e38:	4b04      	ldr	r3, [pc, #16]	; (402e4c <prvAddCurrentTaskToDelayedList+0x4c>)
  402e3a:	4798      	blx	r3
  402e3c:	bd10      	pop	{r4, pc}
  402e3e:	bf00      	nop
  402e40:	2040c62c 	.word	0x2040c62c
  402e44:	2040c724 	.word	0x2040c724
  402e48:	2040c630 	.word	0x2040c630
  402e4c:	004020c9 	.word	0x004020c9
  402e50:	2040c6dc 	.word	0x2040c6dc
  402e54:	2040c634 	.word	0x2040c634

00402e58 <xTaskGenericCreate>:
{
  402e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e5c:	b083      	sub	sp, #12
  402e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402e60:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402e64:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402e66:	b160      	cbz	r0, 402e82 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402e68:	2d04      	cmp	r5, #4
  402e6a:	d915      	bls.n	402e98 <xTaskGenericCreate+0x40>
  402e6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e70:	b672      	cpsid	i
  402e72:	f383 8811 	msr	BASEPRI, r3
  402e76:	f3bf 8f6f 	isb	sy
  402e7a:	f3bf 8f4f 	dsb	sy
  402e7e:	b662      	cpsie	i
  402e80:	e7fe      	b.n	402e80 <xTaskGenericCreate+0x28>
  402e82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e86:	b672      	cpsid	i
  402e88:	f383 8811 	msr	BASEPRI, r3
  402e8c:	f3bf 8f6f 	isb	sy
  402e90:	f3bf 8f4f 	dsb	sy
  402e94:	b662      	cpsie	i
  402e96:	e7fe      	b.n	402e96 <xTaskGenericCreate+0x3e>
  402e98:	9001      	str	r0, [sp, #4]
  402e9a:	4698      	mov	r8, r3
  402e9c:	4691      	mov	r9, r2
  402e9e:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402ea0:	b936      	cbnz	r6, 402eb0 <xTaskGenericCreate+0x58>
  402ea2:	0090      	lsls	r0, r2, #2
  402ea4:	4b62      	ldr	r3, [pc, #392]	; (403030 <xTaskGenericCreate+0x1d8>)
  402ea6:	4798      	blx	r3
		if( pxStack != NULL )
  402ea8:	4606      	mov	r6, r0
  402eaa:	2800      	cmp	r0, #0
  402eac:	f000 809e 	beq.w	402fec <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402eb0:	2058      	movs	r0, #88	; 0x58
  402eb2:	4b5f      	ldr	r3, [pc, #380]	; (403030 <xTaskGenericCreate+0x1d8>)
  402eb4:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402eb6:	4604      	mov	r4, r0
  402eb8:	2800      	cmp	r0, #0
  402eba:	f000 8094 	beq.w	402fe6 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402ebe:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402ec0:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402ec4:	21a5      	movs	r1, #165	; 0xa5
  402ec6:	4630      	mov	r0, r6
  402ec8:	4b5a      	ldr	r3, [pc, #360]	; (403034 <xTaskGenericCreate+0x1dc>)
  402eca:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402ecc:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402ed0:	444e      	add	r6, r9
  402ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402ed4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402ed8:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402edc:	783b      	ldrb	r3, [r7, #0]
  402ede:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402ee2:	783b      	ldrb	r3, [r7, #0]
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	f040 8084 	bne.w	402ff2 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402eea:	2700      	movs	r7, #0
  402eec:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402ef0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402ef2:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402ef4:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402ef6:	f104 0904 	add.w	r9, r4, #4
  402efa:	4648      	mov	r0, r9
  402efc:	f8df b184 	ldr.w	fp, [pc, #388]	; 403084 <xTaskGenericCreate+0x22c>
  402f00:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402f02:	f104 0018 	add.w	r0, r4, #24
  402f06:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402f08:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402f0a:	f1c5 0305 	rsb	r3, r5, #5
  402f0e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402f10:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402f12:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402f14:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402f18:	4642      	mov	r2, r8
  402f1a:	9901      	ldr	r1, [sp, #4]
  402f1c:	4630      	mov	r0, r6
  402f1e:	4b46      	ldr	r3, [pc, #280]	; (403038 <xTaskGenericCreate+0x1e0>)
  402f20:	4798      	blx	r3
  402f22:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402f24:	f1ba 0f00 	cmp.w	sl, #0
  402f28:	d001      	beq.n	402f2e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402f2a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402f2e:	4b43      	ldr	r3, [pc, #268]	; (40303c <xTaskGenericCreate+0x1e4>)
  402f30:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402f32:	4a43      	ldr	r2, [pc, #268]	; (403040 <xTaskGenericCreate+0x1e8>)
  402f34:	6813      	ldr	r3, [r2, #0]
  402f36:	3301      	adds	r3, #1
  402f38:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402f3a:	4b42      	ldr	r3, [pc, #264]	; (403044 <xTaskGenericCreate+0x1ec>)
  402f3c:	681b      	ldr	r3, [r3, #0]
  402f3e:	2b00      	cmp	r3, #0
  402f40:	d166      	bne.n	403010 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402f42:	4b40      	ldr	r3, [pc, #256]	; (403044 <xTaskGenericCreate+0x1ec>)
  402f44:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402f46:	6813      	ldr	r3, [r2, #0]
  402f48:	2b01      	cmp	r3, #1
  402f4a:	d121      	bne.n	402f90 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402f4c:	4f3e      	ldr	r7, [pc, #248]	; (403048 <xTaskGenericCreate+0x1f0>)
  402f4e:	4638      	mov	r0, r7
  402f50:	4e3e      	ldr	r6, [pc, #248]	; (40304c <xTaskGenericCreate+0x1f4>)
  402f52:	47b0      	blx	r6
  402f54:	f107 0014 	add.w	r0, r7, #20
  402f58:	47b0      	blx	r6
  402f5a:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402f5e:	47b0      	blx	r6
  402f60:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402f64:	47b0      	blx	r6
  402f66:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402f6a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402f6c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 403088 <xTaskGenericCreate+0x230>
  402f70:	4640      	mov	r0, r8
  402f72:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402f74:	4f36      	ldr	r7, [pc, #216]	; (403050 <xTaskGenericCreate+0x1f8>)
  402f76:	4638      	mov	r0, r7
  402f78:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402f7a:	4836      	ldr	r0, [pc, #216]	; (403054 <xTaskGenericCreate+0x1fc>)
  402f7c:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402f7e:	4836      	ldr	r0, [pc, #216]	; (403058 <xTaskGenericCreate+0x200>)
  402f80:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402f82:	4836      	ldr	r0, [pc, #216]	; (40305c <xTaskGenericCreate+0x204>)
  402f84:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402f86:	4b36      	ldr	r3, [pc, #216]	; (403060 <xTaskGenericCreate+0x208>)
  402f88:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402f8c:	4b35      	ldr	r3, [pc, #212]	; (403064 <xTaskGenericCreate+0x20c>)
  402f8e:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402f90:	4a35      	ldr	r2, [pc, #212]	; (403068 <xTaskGenericCreate+0x210>)
  402f92:	6813      	ldr	r3, [r2, #0]
  402f94:	3301      	adds	r3, #1
  402f96:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402f98:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402f9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402f9c:	4a33      	ldr	r2, [pc, #204]	; (40306c <xTaskGenericCreate+0x214>)
  402f9e:	6811      	ldr	r1, [r2, #0]
  402fa0:	2301      	movs	r3, #1
  402fa2:	4083      	lsls	r3, r0
  402fa4:	430b      	orrs	r3, r1
  402fa6:	6013      	str	r3, [r2, #0]
  402fa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402fac:	4649      	mov	r1, r9
  402fae:	4b26      	ldr	r3, [pc, #152]	; (403048 <xTaskGenericCreate+0x1f0>)
  402fb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402fb4:	4b2e      	ldr	r3, [pc, #184]	; (403070 <xTaskGenericCreate+0x218>)
  402fb6:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402fb8:	4b2e      	ldr	r3, [pc, #184]	; (403074 <xTaskGenericCreate+0x21c>)
  402fba:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402fbc:	4b2e      	ldr	r3, [pc, #184]	; (403078 <xTaskGenericCreate+0x220>)
  402fbe:	681b      	ldr	r3, [r3, #0]
  402fc0:	2b00      	cmp	r3, #0
  402fc2:	d031      	beq.n	403028 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402fc4:	4b1f      	ldr	r3, [pc, #124]	; (403044 <xTaskGenericCreate+0x1ec>)
  402fc6:	681b      	ldr	r3, [r3, #0]
  402fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fca:	429d      	cmp	r5, r3
  402fcc:	d92e      	bls.n	40302c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402fd2:	4b2a      	ldr	r3, [pc, #168]	; (40307c <xTaskGenericCreate+0x224>)
  402fd4:	601a      	str	r2, [r3, #0]
  402fd6:	f3bf 8f4f 	dsb	sy
  402fda:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402fde:	2001      	movs	r0, #1
}
  402fe0:	b003      	add	sp, #12
  402fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402fe6:	4630      	mov	r0, r6
  402fe8:	4b25      	ldr	r3, [pc, #148]	; (403080 <xTaskGenericCreate+0x228>)
  402fea:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402fec:	f04f 30ff 	mov.w	r0, #4294967295
  402ff0:	e7f6      	b.n	402fe0 <xTaskGenericCreate+0x188>
  402ff2:	463b      	mov	r3, r7
  402ff4:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402ff8:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402ffa:	7859      	ldrb	r1, [r3, #1]
  402ffc:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  403000:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  403004:	2900      	cmp	r1, #0
  403006:	f43f af70 	beq.w	402eea <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40300a:	42bb      	cmp	r3, r7
  40300c:	d1f5      	bne.n	402ffa <xTaskGenericCreate+0x1a2>
  40300e:	e76c      	b.n	402eea <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  403010:	4b19      	ldr	r3, [pc, #100]	; (403078 <xTaskGenericCreate+0x220>)
  403012:	681b      	ldr	r3, [r3, #0]
  403014:	2b00      	cmp	r3, #0
  403016:	d1bb      	bne.n	402f90 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  403018:	4b0a      	ldr	r3, [pc, #40]	; (403044 <xTaskGenericCreate+0x1ec>)
  40301a:	681b      	ldr	r3, [r3, #0]
  40301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40301e:	429d      	cmp	r5, r3
  403020:	d3b6      	bcc.n	402f90 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  403022:	4b08      	ldr	r3, [pc, #32]	; (403044 <xTaskGenericCreate+0x1ec>)
  403024:	601c      	str	r4, [r3, #0]
  403026:	e7b3      	b.n	402f90 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  403028:	2001      	movs	r0, #1
  40302a:	e7d9      	b.n	402fe0 <xTaskGenericCreate+0x188>
  40302c:	2001      	movs	r0, #1
	return xReturn;
  40302e:	e7d7      	b.n	402fe0 <xTaskGenericCreate+0x188>
  403030:	0040243d 	.word	0x0040243d
  403034:	00404d6d 	.word	0x00404d6d
  403038:	00402195 	.word	0x00402195
  40303c:	004021e1 	.word	0x004021e1
  403040:	2040c69c 	.word	0x2040c69c
  403044:	2040c62c 	.word	0x2040c62c
  403048:	2040c638 	.word	0x2040c638
  40304c:	00402095 	.word	0x00402095
  403050:	2040c6c8 	.word	0x2040c6c8
  403054:	2040c6e4 	.word	0x2040c6e4
  403058:	2040c710 	.word	0x2040c710
  40305c:	2040c6fc 	.word	0x2040c6fc
  403060:	2040c630 	.word	0x2040c630
  403064:	2040c634 	.word	0x2040c634
  403068:	2040c6a8 	.word	0x2040c6a8
  40306c:	2040c6b0 	.word	0x2040c6b0
  403070:	004020b1 	.word	0x004020b1
  403074:	0040222d 	.word	0x0040222d
  403078:	2040c6f8 	.word	0x2040c6f8
  40307c:	e000ed04 	.word	0xe000ed04
  403080:	004024ad 	.word	0x004024ad
  403084:	004020ab 	.word	0x004020ab
  403088:	2040c6b4 	.word	0x2040c6b4

0040308c <vTaskStartScheduler>:
{
  40308c:	b510      	push	{r4, lr}
  40308e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  403090:	2300      	movs	r3, #0
  403092:	9303      	str	r3, [sp, #12]
  403094:	9302      	str	r3, [sp, #8]
  403096:	9301      	str	r3, [sp, #4]
  403098:	9300      	str	r3, [sp, #0]
  40309a:	2282      	movs	r2, #130	; 0x82
  40309c:	4916      	ldr	r1, [pc, #88]	; (4030f8 <vTaskStartScheduler+0x6c>)
  40309e:	4817      	ldr	r0, [pc, #92]	; (4030fc <vTaskStartScheduler+0x70>)
  4030a0:	4c17      	ldr	r4, [pc, #92]	; (403100 <vTaskStartScheduler+0x74>)
  4030a2:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4030a4:	2801      	cmp	r0, #1
  4030a6:	d00b      	beq.n	4030c0 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4030a8:	bb20      	cbnz	r0, 4030f4 <vTaskStartScheduler+0x68>
  4030aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030ae:	b672      	cpsid	i
  4030b0:	f383 8811 	msr	BASEPRI, r3
  4030b4:	f3bf 8f6f 	isb	sy
  4030b8:	f3bf 8f4f 	dsb	sy
  4030bc:	b662      	cpsie	i
  4030be:	e7fe      	b.n	4030be <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4030c0:	4b10      	ldr	r3, [pc, #64]	; (403104 <vTaskStartScheduler+0x78>)
  4030c2:	4798      	blx	r3
	if( xReturn == pdPASS )
  4030c4:	2801      	cmp	r0, #1
  4030c6:	d1ef      	bne.n	4030a8 <vTaskStartScheduler+0x1c>
  4030c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030cc:	b672      	cpsid	i
  4030ce:	f383 8811 	msr	BASEPRI, r3
  4030d2:	f3bf 8f6f 	isb	sy
  4030d6:	f3bf 8f4f 	dsb	sy
  4030da:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4030dc:	f04f 32ff 	mov.w	r2, #4294967295
  4030e0:	4b09      	ldr	r3, [pc, #36]	; (403108 <vTaskStartScheduler+0x7c>)
  4030e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4030e4:	2201      	movs	r2, #1
  4030e6:	4b09      	ldr	r3, [pc, #36]	; (40310c <vTaskStartScheduler+0x80>)
  4030e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4030ea:	2200      	movs	r2, #0
  4030ec:	4b08      	ldr	r3, [pc, #32]	; (403110 <vTaskStartScheduler+0x84>)
  4030ee:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4030f0:	4b08      	ldr	r3, [pc, #32]	; (403114 <vTaskStartScheduler+0x88>)
  4030f2:	4798      	blx	r3
}
  4030f4:	b004      	add	sp, #16
  4030f6:	bd10      	pop	{r4, pc}
  4030f8:	004075d8 	.word	0x004075d8
  4030fc:	00403431 	.word	0x00403431
  403100:	00402e59 	.word	0x00402e59
  403104:	00403a71 	.word	0x00403a71
  403108:	2040c6dc 	.word	0x2040c6dc
  40310c:	2040c6f8 	.word	0x2040c6f8
  403110:	2040c724 	.word	0x2040c724
  403114:	00402315 	.word	0x00402315

00403118 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  403118:	4a02      	ldr	r2, [pc, #8]	; (403124 <vTaskSuspendAll+0xc>)
  40311a:	6813      	ldr	r3, [r2, #0]
  40311c:	3301      	adds	r3, #1
  40311e:	6013      	str	r3, [r2, #0]
  403120:	4770      	bx	lr
  403122:	bf00      	nop
  403124:	2040c6a4 	.word	0x2040c6a4

00403128 <xTaskGetTickCount>:
		xTicks = xTickCount;
  403128:	4b01      	ldr	r3, [pc, #4]	; (403130 <xTaskGetTickCount+0x8>)
  40312a:	6818      	ldr	r0, [r3, #0]
}
  40312c:	4770      	bx	lr
  40312e:	bf00      	nop
  403130:	2040c724 	.word	0x2040c724

00403134 <xTaskIncrementTick>:
{
  403134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403138:	4b42      	ldr	r3, [pc, #264]	; (403244 <xTaskIncrementTick+0x110>)
  40313a:	681b      	ldr	r3, [r3, #0]
  40313c:	2b00      	cmp	r3, #0
  40313e:	d178      	bne.n	403232 <xTaskIncrementTick+0xfe>
		++xTickCount;
  403140:	4b41      	ldr	r3, [pc, #260]	; (403248 <xTaskIncrementTick+0x114>)
  403142:	681a      	ldr	r2, [r3, #0]
  403144:	3201      	adds	r2, #1
  403146:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  403148:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40314a:	b9d6      	cbnz	r6, 403182 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40314c:	4b3f      	ldr	r3, [pc, #252]	; (40324c <xTaskIncrementTick+0x118>)
  40314e:	681b      	ldr	r3, [r3, #0]
  403150:	681b      	ldr	r3, [r3, #0]
  403152:	b153      	cbz	r3, 40316a <xTaskIncrementTick+0x36>
  403154:	f04f 0380 	mov.w	r3, #128	; 0x80
  403158:	b672      	cpsid	i
  40315a:	f383 8811 	msr	BASEPRI, r3
  40315e:	f3bf 8f6f 	isb	sy
  403162:	f3bf 8f4f 	dsb	sy
  403166:	b662      	cpsie	i
  403168:	e7fe      	b.n	403168 <xTaskIncrementTick+0x34>
  40316a:	4a38      	ldr	r2, [pc, #224]	; (40324c <xTaskIncrementTick+0x118>)
  40316c:	6811      	ldr	r1, [r2, #0]
  40316e:	4b38      	ldr	r3, [pc, #224]	; (403250 <xTaskIncrementTick+0x11c>)
  403170:	6818      	ldr	r0, [r3, #0]
  403172:	6010      	str	r0, [r2, #0]
  403174:	6019      	str	r1, [r3, #0]
  403176:	4a37      	ldr	r2, [pc, #220]	; (403254 <xTaskIncrementTick+0x120>)
  403178:	6813      	ldr	r3, [r2, #0]
  40317a:	3301      	adds	r3, #1
  40317c:	6013      	str	r3, [r2, #0]
  40317e:	4b36      	ldr	r3, [pc, #216]	; (403258 <xTaskIncrementTick+0x124>)
  403180:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  403182:	4b36      	ldr	r3, [pc, #216]	; (40325c <xTaskIncrementTick+0x128>)
  403184:	681b      	ldr	r3, [r3, #0]
  403186:	429e      	cmp	r6, r3
  403188:	d218      	bcs.n	4031bc <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40318a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40318c:	4b34      	ldr	r3, [pc, #208]	; (403260 <xTaskIncrementTick+0x12c>)
  40318e:	681b      	ldr	r3, [r3, #0]
  403190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403196:	4a33      	ldr	r2, [pc, #204]	; (403264 <xTaskIncrementTick+0x130>)
  403198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  40319c:	2b02      	cmp	r3, #2
  40319e:	bf28      	it	cs
  4031a0:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4031a2:	4b31      	ldr	r3, [pc, #196]	; (403268 <xTaskIncrementTick+0x134>)
  4031a4:	681b      	ldr	r3, [r3, #0]
  4031a6:	b90b      	cbnz	r3, 4031ac <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4031a8:	4b30      	ldr	r3, [pc, #192]	; (40326c <xTaskIncrementTick+0x138>)
  4031aa:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4031ac:	4b30      	ldr	r3, [pc, #192]	; (403270 <xTaskIncrementTick+0x13c>)
  4031ae:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4031b0:	2b00      	cmp	r3, #0
}
  4031b2:	bf0c      	ite	eq
  4031b4:	4620      	moveq	r0, r4
  4031b6:	2001      	movne	r0, #1
  4031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031bc:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4031be:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40324c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4031c2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40327c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4031c6:	4f2b      	ldr	r7, [pc, #172]	; (403274 <xTaskIncrementTick+0x140>)
  4031c8:	e01f      	b.n	40320a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4031ca:	f04f 32ff 	mov.w	r2, #4294967295
  4031ce:	4b23      	ldr	r3, [pc, #140]	; (40325c <xTaskIncrementTick+0x128>)
  4031d0:	601a      	str	r2, [r3, #0]
						break;
  4031d2:	e7db      	b.n	40318c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4031d4:	4a21      	ldr	r2, [pc, #132]	; (40325c <xTaskIncrementTick+0x128>)
  4031d6:	6013      	str	r3, [r2, #0]
							break;
  4031d8:	e7d8      	b.n	40318c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4031da:	f105 0018 	add.w	r0, r5, #24
  4031de:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4031e0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4031e2:	683a      	ldr	r2, [r7, #0]
  4031e4:	2301      	movs	r3, #1
  4031e6:	4083      	lsls	r3, r0
  4031e8:	4313      	orrs	r3, r2
  4031ea:	603b      	str	r3, [r7, #0]
  4031ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4031f0:	4651      	mov	r1, sl
  4031f2:	4b1c      	ldr	r3, [pc, #112]	; (403264 <xTaskIncrementTick+0x130>)
  4031f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4031f8:	4b1f      	ldr	r3, [pc, #124]	; (403278 <xTaskIncrementTick+0x144>)
  4031fa:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4031fc:	4b18      	ldr	r3, [pc, #96]	; (403260 <xTaskIncrementTick+0x12c>)
  4031fe:	681b      	ldr	r3, [r3, #0]
  403200:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  403202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  403204:	429a      	cmp	r2, r3
  403206:	bf28      	it	cs
  403208:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40320a:	f8d9 3000 	ldr.w	r3, [r9]
  40320e:	681b      	ldr	r3, [r3, #0]
  403210:	2b00      	cmp	r3, #0
  403212:	d0da      	beq.n	4031ca <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403214:	f8d9 3000 	ldr.w	r3, [r9]
  403218:	68db      	ldr	r3, [r3, #12]
  40321a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40321c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40321e:	429e      	cmp	r6, r3
  403220:	d3d8      	bcc.n	4031d4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403222:	f105 0a04 	add.w	sl, r5, #4
  403226:	4650      	mov	r0, sl
  403228:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40322a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40322c:	2b00      	cmp	r3, #0
  40322e:	d1d4      	bne.n	4031da <xTaskIncrementTick+0xa6>
  403230:	e7d6      	b.n	4031e0 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  403232:	4a0d      	ldr	r2, [pc, #52]	; (403268 <xTaskIncrementTick+0x134>)
  403234:	6813      	ldr	r3, [r2, #0]
  403236:	3301      	adds	r3, #1
  403238:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40323a:	4b0c      	ldr	r3, [pc, #48]	; (40326c <xTaskIncrementTick+0x138>)
  40323c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40323e:	2400      	movs	r4, #0
  403240:	e7b4      	b.n	4031ac <xTaskIncrementTick+0x78>
  403242:	bf00      	nop
  403244:	2040c6a4 	.word	0x2040c6a4
  403248:	2040c724 	.word	0x2040c724
  40324c:	2040c630 	.word	0x2040c630
  403250:	2040c634 	.word	0x2040c634
  403254:	2040c6e0 	.word	0x2040c6e0
  403258:	00402dd5 	.word	0x00402dd5
  40325c:	2040c6dc 	.word	0x2040c6dc
  403260:	2040c62c 	.word	0x2040c62c
  403264:	2040c638 	.word	0x2040c638
  403268:	2040c6a0 	.word	0x2040c6a0
  40326c:	00404105 	.word	0x00404105
  403270:	2040c728 	.word	0x2040c728
  403274:	2040c6b0 	.word	0x2040c6b0
  403278:	004020b1 	.word	0x004020b1
  40327c:	004020fd 	.word	0x004020fd

00403280 <xTaskResumeAll>:
{
  403280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  403284:	4b38      	ldr	r3, [pc, #224]	; (403368 <xTaskResumeAll+0xe8>)
  403286:	681b      	ldr	r3, [r3, #0]
  403288:	b953      	cbnz	r3, 4032a0 <xTaskResumeAll+0x20>
  40328a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40328e:	b672      	cpsid	i
  403290:	f383 8811 	msr	BASEPRI, r3
  403294:	f3bf 8f6f 	isb	sy
  403298:	f3bf 8f4f 	dsb	sy
  40329c:	b662      	cpsie	i
  40329e:	e7fe      	b.n	40329e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4032a0:	4b32      	ldr	r3, [pc, #200]	; (40336c <xTaskResumeAll+0xec>)
  4032a2:	4798      	blx	r3
		--uxSchedulerSuspended;
  4032a4:	4b30      	ldr	r3, [pc, #192]	; (403368 <xTaskResumeAll+0xe8>)
  4032a6:	681a      	ldr	r2, [r3, #0]
  4032a8:	3a01      	subs	r2, #1
  4032aa:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4032ac:	681b      	ldr	r3, [r3, #0]
  4032ae:	2b00      	cmp	r3, #0
  4032b0:	d155      	bne.n	40335e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4032b2:	4b2f      	ldr	r3, [pc, #188]	; (403370 <xTaskResumeAll+0xf0>)
  4032b4:	681b      	ldr	r3, [r3, #0]
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d132      	bne.n	403320 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4032ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4032bc:	4b2d      	ldr	r3, [pc, #180]	; (403374 <xTaskResumeAll+0xf4>)
  4032be:	4798      	blx	r3
}
  4032c0:	4620      	mov	r0, r4
  4032c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4032c6:	68fb      	ldr	r3, [r7, #12]
  4032c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4032ca:	f104 0018 	add.w	r0, r4, #24
  4032ce:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4032d0:	f104 0804 	add.w	r8, r4, #4
  4032d4:	4640      	mov	r0, r8
  4032d6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4032d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4032da:	682a      	ldr	r2, [r5, #0]
  4032dc:	2301      	movs	r3, #1
  4032de:	4083      	lsls	r3, r0
  4032e0:	4313      	orrs	r3, r2
  4032e2:	602b      	str	r3, [r5, #0]
  4032e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4032e8:	4641      	mov	r1, r8
  4032ea:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4032ee:	4b22      	ldr	r3, [pc, #136]	; (403378 <xTaskResumeAll+0xf8>)
  4032f0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4032f2:	4b22      	ldr	r3, [pc, #136]	; (40337c <xTaskResumeAll+0xfc>)
  4032f4:	681b      	ldr	r3, [r3, #0]
  4032f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4032fa:	429a      	cmp	r2, r3
  4032fc:	d20c      	bcs.n	403318 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4032fe:	683b      	ldr	r3, [r7, #0]
  403300:	2b00      	cmp	r3, #0
  403302:	d1e0      	bne.n	4032c6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  403304:	4b1e      	ldr	r3, [pc, #120]	; (403380 <xTaskResumeAll+0x100>)
  403306:	681b      	ldr	r3, [r3, #0]
  403308:	b1db      	cbz	r3, 403342 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40330a:	4b1d      	ldr	r3, [pc, #116]	; (403380 <xTaskResumeAll+0x100>)
  40330c:	681b      	ldr	r3, [r3, #0]
  40330e:	b1c3      	cbz	r3, 403342 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403310:	4e1c      	ldr	r6, [pc, #112]	; (403384 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  403312:	4d1d      	ldr	r5, [pc, #116]	; (403388 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  403314:	4c1a      	ldr	r4, [pc, #104]	; (403380 <xTaskResumeAll+0x100>)
  403316:	e00e      	b.n	403336 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  403318:	2201      	movs	r2, #1
  40331a:	4b1b      	ldr	r3, [pc, #108]	; (403388 <xTaskResumeAll+0x108>)
  40331c:	601a      	str	r2, [r3, #0]
  40331e:	e7ee      	b.n	4032fe <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403320:	4f1a      	ldr	r7, [pc, #104]	; (40338c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403322:	4e1b      	ldr	r6, [pc, #108]	; (403390 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  403324:	4d1b      	ldr	r5, [pc, #108]	; (403394 <xTaskResumeAll+0x114>)
  403326:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40339c <xTaskResumeAll+0x11c>
  40332a:	e7e8      	b.n	4032fe <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40332c:	6823      	ldr	r3, [r4, #0]
  40332e:	3b01      	subs	r3, #1
  403330:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403332:	6823      	ldr	r3, [r4, #0]
  403334:	b12b      	cbz	r3, 403342 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403336:	47b0      	blx	r6
  403338:	2800      	cmp	r0, #0
  40333a:	d0f7      	beq.n	40332c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40333c:	2301      	movs	r3, #1
  40333e:	602b      	str	r3, [r5, #0]
  403340:	e7f4      	b.n	40332c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  403342:	4b11      	ldr	r3, [pc, #68]	; (403388 <xTaskResumeAll+0x108>)
  403344:	681b      	ldr	r3, [r3, #0]
  403346:	2b01      	cmp	r3, #1
  403348:	d10b      	bne.n	403362 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40334e:	4b12      	ldr	r3, [pc, #72]	; (403398 <xTaskResumeAll+0x118>)
  403350:	601a      	str	r2, [r3, #0]
  403352:	f3bf 8f4f 	dsb	sy
  403356:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40335a:	2401      	movs	r4, #1
  40335c:	e7ae      	b.n	4032bc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40335e:	2400      	movs	r4, #0
  403360:	e7ac      	b.n	4032bc <xTaskResumeAll+0x3c>
  403362:	2400      	movs	r4, #0
  403364:	e7aa      	b.n	4032bc <xTaskResumeAll+0x3c>
  403366:	bf00      	nop
  403368:	2040c6a4 	.word	0x2040c6a4
  40336c:	004021e1 	.word	0x004021e1
  403370:	2040c69c 	.word	0x2040c69c
  403374:	0040222d 	.word	0x0040222d
  403378:	004020b1 	.word	0x004020b1
  40337c:	2040c62c 	.word	0x2040c62c
  403380:	2040c6a0 	.word	0x2040c6a0
  403384:	00403135 	.word	0x00403135
  403388:	2040c728 	.word	0x2040c728
  40338c:	2040c6e4 	.word	0x2040c6e4
  403390:	004020fd 	.word	0x004020fd
  403394:	2040c6b0 	.word	0x2040c6b0
  403398:	e000ed04 	.word	0xe000ed04
  40339c:	2040c638 	.word	0x2040c638

004033a0 <vTaskDelay>:
	{
  4033a0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4033a2:	2800      	cmp	r0, #0
  4033a4:	d029      	beq.n	4033fa <vTaskDelay+0x5a>
  4033a6:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4033a8:	4b18      	ldr	r3, [pc, #96]	; (40340c <vTaskDelay+0x6c>)
  4033aa:	681b      	ldr	r3, [r3, #0]
  4033ac:	b153      	cbz	r3, 4033c4 <vTaskDelay+0x24>
  4033ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033b2:	b672      	cpsid	i
  4033b4:	f383 8811 	msr	BASEPRI, r3
  4033b8:	f3bf 8f6f 	isb	sy
  4033bc:	f3bf 8f4f 	dsb	sy
  4033c0:	b662      	cpsie	i
  4033c2:	e7fe      	b.n	4033c2 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4033c4:	4b12      	ldr	r3, [pc, #72]	; (403410 <vTaskDelay+0x70>)
  4033c6:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4033c8:	4b12      	ldr	r3, [pc, #72]	; (403414 <vTaskDelay+0x74>)
  4033ca:	681b      	ldr	r3, [r3, #0]
  4033cc:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4033ce:	4b12      	ldr	r3, [pc, #72]	; (403418 <vTaskDelay+0x78>)
  4033d0:	6818      	ldr	r0, [r3, #0]
  4033d2:	3004      	adds	r0, #4
  4033d4:	4b11      	ldr	r3, [pc, #68]	; (40341c <vTaskDelay+0x7c>)
  4033d6:	4798      	blx	r3
  4033d8:	b948      	cbnz	r0, 4033ee <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4033da:	4b0f      	ldr	r3, [pc, #60]	; (403418 <vTaskDelay+0x78>)
  4033dc:	681a      	ldr	r2, [r3, #0]
  4033de:	4910      	ldr	r1, [pc, #64]	; (403420 <vTaskDelay+0x80>)
  4033e0:	680b      	ldr	r3, [r1, #0]
  4033e2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4033e4:	2201      	movs	r2, #1
  4033e6:	4082      	lsls	r2, r0
  4033e8:	ea23 0302 	bic.w	r3, r3, r2
  4033ec:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4033ee:	4620      	mov	r0, r4
  4033f0:	4b0c      	ldr	r3, [pc, #48]	; (403424 <vTaskDelay+0x84>)
  4033f2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4033f4:	4b0c      	ldr	r3, [pc, #48]	; (403428 <vTaskDelay+0x88>)
  4033f6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4033f8:	b938      	cbnz	r0, 40340a <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4033fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4033fe:	4b0b      	ldr	r3, [pc, #44]	; (40342c <vTaskDelay+0x8c>)
  403400:	601a      	str	r2, [r3, #0]
  403402:	f3bf 8f4f 	dsb	sy
  403406:	f3bf 8f6f 	isb	sy
  40340a:	bd10      	pop	{r4, pc}
  40340c:	2040c6a4 	.word	0x2040c6a4
  403410:	00403119 	.word	0x00403119
  403414:	2040c724 	.word	0x2040c724
  403418:	2040c62c 	.word	0x2040c62c
  40341c:	004020fd 	.word	0x004020fd
  403420:	2040c6b0 	.word	0x2040c6b0
  403424:	00402e01 	.word	0x00402e01
  403428:	00403281 	.word	0x00403281
  40342c:	e000ed04 	.word	0xe000ed04

00403430 <prvIdleTask>:
{
  403430:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  403432:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4034bc <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403436:	4e19      	ldr	r6, [pc, #100]	; (40349c <prvIdleTask+0x6c>)
				taskYIELD();
  403438:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4034c0 <prvIdleTask+0x90>
  40343c:	e02a      	b.n	403494 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40343e:	4b18      	ldr	r3, [pc, #96]	; (4034a0 <prvIdleTask+0x70>)
  403440:	681b      	ldr	r3, [r3, #0]
  403442:	2b01      	cmp	r3, #1
  403444:	d81e      	bhi.n	403484 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403446:	682b      	ldr	r3, [r5, #0]
  403448:	2b00      	cmp	r3, #0
  40344a:	d0f8      	beq.n	40343e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40344c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40344e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  403450:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  403452:	2c00      	cmp	r4, #0
  403454:	d0f7      	beq.n	403446 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  403456:	4b13      	ldr	r3, [pc, #76]	; (4034a4 <prvIdleTask+0x74>)
  403458:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40345a:	68f3      	ldr	r3, [r6, #12]
  40345c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40345e:	1d20      	adds	r0, r4, #4
  403460:	4b11      	ldr	r3, [pc, #68]	; (4034a8 <prvIdleTask+0x78>)
  403462:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  403464:	4a11      	ldr	r2, [pc, #68]	; (4034ac <prvIdleTask+0x7c>)
  403466:	6813      	ldr	r3, [r2, #0]
  403468:	3b01      	subs	r3, #1
  40346a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40346c:	682b      	ldr	r3, [r5, #0]
  40346e:	3b01      	subs	r3, #1
  403470:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  403472:	4b0f      	ldr	r3, [pc, #60]	; (4034b0 <prvIdleTask+0x80>)
  403474:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  403476:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403478:	f8df a048 	ldr.w	sl, [pc, #72]	; 4034c4 <prvIdleTask+0x94>
  40347c:	47d0      	blx	sl
		vPortFree( pxTCB );
  40347e:	4620      	mov	r0, r4
  403480:	47d0      	blx	sl
  403482:	e7e0      	b.n	403446 <prvIdleTask+0x16>
				taskYIELD();
  403484:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403488:	f8c9 3000 	str.w	r3, [r9]
  40348c:	f3bf 8f4f 	dsb	sy
  403490:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403494:	4d07      	ldr	r5, [pc, #28]	; (4034b4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  403496:	4f08      	ldr	r7, [pc, #32]	; (4034b8 <prvIdleTask+0x88>)
  403498:	e7d5      	b.n	403446 <prvIdleTask+0x16>
  40349a:	bf00      	nop
  40349c:	2040c710 	.word	0x2040c710
  4034a0:	2040c638 	.word	0x2040c638
  4034a4:	004021e1 	.word	0x004021e1
  4034a8:	004020fd 	.word	0x004020fd
  4034ac:	2040c69c 	.word	0x2040c69c
  4034b0:	0040222d 	.word	0x0040222d
  4034b4:	2040c6ac 	.word	0x2040c6ac
  4034b8:	00403281 	.word	0x00403281
  4034bc:	00403119 	.word	0x00403119
  4034c0:	e000ed04 	.word	0xe000ed04
  4034c4:	004024ad 	.word	0x004024ad

004034c8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4034c8:	4b2d      	ldr	r3, [pc, #180]	; (403580 <vTaskSwitchContext+0xb8>)
  4034ca:	681b      	ldr	r3, [r3, #0]
  4034cc:	2b00      	cmp	r3, #0
  4034ce:	d12c      	bne.n	40352a <vTaskSwitchContext+0x62>
{
  4034d0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4034d2:	2200      	movs	r2, #0
  4034d4:	4b2b      	ldr	r3, [pc, #172]	; (403584 <vTaskSwitchContext+0xbc>)
  4034d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4034d8:	4b2b      	ldr	r3, [pc, #172]	; (403588 <vTaskSwitchContext+0xc0>)
  4034da:	681b      	ldr	r3, [r3, #0]
  4034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4034de:	681a      	ldr	r2, [r3, #0]
  4034e0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4034e4:	d103      	bne.n	4034ee <vTaskSwitchContext+0x26>
  4034e6:	685a      	ldr	r2, [r3, #4]
  4034e8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4034ec:	d021      	beq.n	403532 <vTaskSwitchContext+0x6a>
  4034ee:	4b26      	ldr	r3, [pc, #152]	; (403588 <vTaskSwitchContext+0xc0>)
  4034f0:	6818      	ldr	r0, [r3, #0]
  4034f2:	6819      	ldr	r1, [r3, #0]
  4034f4:	3134      	adds	r1, #52	; 0x34
  4034f6:	4b25      	ldr	r3, [pc, #148]	; (40358c <vTaskSwitchContext+0xc4>)
  4034f8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4034fa:	4b25      	ldr	r3, [pc, #148]	; (403590 <vTaskSwitchContext+0xc8>)
  4034fc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4034fe:	fab3 f383 	clz	r3, r3
  403502:	b2db      	uxtb	r3, r3
  403504:	f1c3 031f 	rsb	r3, r3, #31
  403508:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40350c:	4a21      	ldr	r2, [pc, #132]	; (403594 <vTaskSwitchContext+0xcc>)
  40350e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403512:	b9ba      	cbnz	r2, 403544 <vTaskSwitchContext+0x7c>
	__asm volatile
  403514:	f04f 0380 	mov.w	r3, #128	; 0x80
  403518:	b672      	cpsid	i
  40351a:	f383 8811 	msr	BASEPRI, r3
  40351e:	f3bf 8f6f 	isb	sy
  403522:	f3bf 8f4f 	dsb	sy
  403526:	b662      	cpsie	i
  403528:	e7fe      	b.n	403528 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40352a:	2201      	movs	r2, #1
  40352c:	4b15      	ldr	r3, [pc, #84]	; (403584 <vTaskSwitchContext+0xbc>)
  40352e:	601a      	str	r2, [r3, #0]
  403530:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  403532:	689a      	ldr	r2, [r3, #8]
  403534:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403538:	d1d9      	bne.n	4034ee <vTaskSwitchContext+0x26>
  40353a:	68db      	ldr	r3, [r3, #12]
  40353c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403540:	d1d5      	bne.n	4034ee <vTaskSwitchContext+0x26>
  403542:	e7da      	b.n	4034fa <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403544:	4a13      	ldr	r2, [pc, #76]	; (403594 <vTaskSwitchContext+0xcc>)
  403546:	0099      	lsls	r1, r3, #2
  403548:	18c8      	adds	r0, r1, r3
  40354a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40354e:	6844      	ldr	r4, [r0, #4]
  403550:	6864      	ldr	r4, [r4, #4]
  403552:	6044      	str	r4, [r0, #4]
  403554:	4419      	add	r1, r3
  403556:	4602      	mov	r2, r0
  403558:	3208      	adds	r2, #8
  40355a:	4294      	cmp	r4, r2
  40355c:	d009      	beq.n	403572 <vTaskSwitchContext+0xaa>
  40355e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403562:	4a0c      	ldr	r2, [pc, #48]	; (403594 <vTaskSwitchContext+0xcc>)
  403564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403568:	685b      	ldr	r3, [r3, #4]
  40356a:	68da      	ldr	r2, [r3, #12]
  40356c:	4b06      	ldr	r3, [pc, #24]	; (403588 <vTaskSwitchContext+0xc0>)
  40356e:	601a      	str	r2, [r3, #0]
  403570:	bd10      	pop	{r4, pc}
  403572:	6860      	ldr	r0, [r4, #4]
  403574:	4a07      	ldr	r2, [pc, #28]	; (403594 <vTaskSwitchContext+0xcc>)
  403576:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40357a:	6050      	str	r0, [r2, #4]
  40357c:	e7ef      	b.n	40355e <vTaskSwitchContext+0x96>
  40357e:	bf00      	nop
  403580:	2040c6a4 	.word	0x2040c6a4
  403584:	2040c728 	.word	0x2040c728
  403588:	2040c62c 	.word	0x2040c62c
  40358c:	004040ed 	.word	0x004040ed
  403590:	2040c6b0 	.word	0x2040c6b0
  403594:	2040c638 	.word	0x2040c638

00403598 <vTaskPlaceOnEventList>:
{
  403598:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40359a:	b1e0      	cbz	r0, 4035d6 <vTaskPlaceOnEventList+0x3e>
  40359c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40359e:	4d17      	ldr	r5, [pc, #92]	; (4035fc <vTaskPlaceOnEventList+0x64>)
  4035a0:	6829      	ldr	r1, [r5, #0]
  4035a2:	3118      	adds	r1, #24
  4035a4:	4b16      	ldr	r3, [pc, #88]	; (403600 <vTaskPlaceOnEventList+0x68>)
  4035a6:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4035a8:	6828      	ldr	r0, [r5, #0]
  4035aa:	3004      	adds	r0, #4
  4035ac:	4b15      	ldr	r3, [pc, #84]	; (403604 <vTaskPlaceOnEventList+0x6c>)
  4035ae:	4798      	blx	r3
  4035b0:	b940      	cbnz	r0, 4035c4 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4035b2:	682a      	ldr	r2, [r5, #0]
  4035b4:	4914      	ldr	r1, [pc, #80]	; (403608 <vTaskPlaceOnEventList+0x70>)
  4035b6:	680b      	ldr	r3, [r1, #0]
  4035b8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4035ba:	2201      	movs	r2, #1
  4035bc:	4082      	lsls	r2, r0
  4035be:	ea23 0302 	bic.w	r3, r3, r2
  4035c2:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4035c4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4035c8:	d010      	beq.n	4035ec <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4035ca:	4b10      	ldr	r3, [pc, #64]	; (40360c <vTaskPlaceOnEventList+0x74>)
  4035cc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4035ce:	4420      	add	r0, r4
  4035d0:	4b0f      	ldr	r3, [pc, #60]	; (403610 <vTaskPlaceOnEventList+0x78>)
  4035d2:	4798      	blx	r3
  4035d4:	bd38      	pop	{r3, r4, r5, pc}
  4035d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035da:	b672      	cpsid	i
  4035dc:	f383 8811 	msr	BASEPRI, r3
  4035e0:	f3bf 8f6f 	isb	sy
  4035e4:	f3bf 8f4f 	dsb	sy
  4035e8:	b662      	cpsie	i
  4035ea:	e7fe      	b.n	4035ea <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4035ec:	4b03      	ldr	r3, [pc, #12]	; (4035fc <vTaskPlaceOnEventList+0x64>)
  4035ee:	6819      	ldr	r1, [r3, #0]
  4035f0:	3104      	adds	r1, #4
  4035f2:	4808      	ldr	r0, [pc, #32]	; (403614 <vTaskPlaceOnEventList+0x7c>)
  4035f4:	4b08      	ldr	r3, [pc, #32]	; (403618 <vTaskPlaceOnEventList+0x80>)
  4035f6:	4798      	blx	r3
  4035f8:	bd38      	pop	{r3, r4, r5, pc}
  4035fa:	bf00      	nop
  4035fc:	2040c62c 	.word	0x2040c62c
  403600:	004020c9 	.word	0x004020c9
  403604:	004020fd 	.word	0x004020fd
  403608:	2040c6b0 	.word	0x2040c6b0
  40360c:	2040c724 	.word	0x2040c724
  403610:	00402e01 	.word	0x00402e01
  403614:	2040c6fc 	.word	0x2040c6fc
  403618:	004020b1 	.word	0x004020b1

0040361c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  40361c:	b1e8      	cbz	r0, 40365a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40361e:	b570      	push	{r4, r5, r6, lr}
  403620:	4615      	mov	r5, r2
  403622:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403624:	4e16      	ldr	r6, [pc, #88]	; (403680 <vTaskPlaceOnEventListRestricted+0x64>)
  403626:	6831      	ldr	r1, [r6, #0]
  403628:	3118      	adds	r1, #24
  40362a:	4b16      	ldr	r3, [pc, #88]	; (403684 <vTaskPlaceOnEventListRestricted+0x68>)
  40362c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40362e:	6830      	ldr	r0, [r6, #0]
  403630:	3004      	adds	r0, #4
  403632:	4b15      	ldr	r3, [pc, #84]	; (403688 <vTaskPlaceOnEventListRestricted+0x6c>)
  403634:	4798      	blx	r3
  403636:	b940      	cbnz	r0, 40364a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403638:	6832      	ldr	r2, [r6, #0]
  40363a:	4914      	ldr	r1, [pc, #80]	; (40368c <vTaskPlaceOnEventListRestricted+0x70>)
  40363c:	680b      	ldr	r3, [r1, #0]
  40363e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403640:	2201      	movs	r2, #1
  403642:	4082      	lsls	r2, r0
  403644:	ea23 0302 	bic.w	r3, r3, r2
  403648:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40364a:	2d01      	cmp	r5, #1
  40364c:	d010      	beq.n	403670 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40364e:	4b10      	ldr	r3, [pc, #64]	; (403690 <vTaskPlaceOnEventListRestricted+0x74>)
  403650:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403652:	4420      	add	r0, r4
  403654:	4b0f      	ldr	r3, [pc, #60]	; (403694 <vTaskPlaceOnEventListRestricted+0x78>)
  403656:	4798      	blx	r3
  403658:	bd70      	pop	{r4, r5, r6, pc}
  40365a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40365e:	b672      	cpsid	i
  403660:	f383 8811 	msr	BASEPRI, r3
  403664:	f3bf 8f6f 	isb	sy
  403668:	f3bf 8f4f 	dsb	sy
  40366c:	b662      	cpsie	i
  40366e:	e7fe      	b.n	40366e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403670:	4b03      	ldr	r3, [pc, #12]	; (403680 <vTaskPlaceOnEventListRestricted+0x64>)
  403672:	6819      	ldr	r1, [r3, #0]
  403674:	3104      	adds	r1, #4
  403676:	4808      	ldr	r0, [pc, #32]	; (403698 <vTaskPlaceOnEventListRestricted+0x7c>)
  403678:	4b02      	ldr	r3, [pc, #8]	; (403684 <vTaskPlaceOnEventListRestricted+0x68>)
  40367a:	4798      	blx	r3
  40367c:	bd70      	pop	{r4, r5, r6, pc}
  40367e:	bf00      	nop
  403680:	2040c62c 	.word	0x2040c62c
  403684:	004020b1 	.word	0x004020b1
  403688:	004020fd 	.word	0x004020fd
  40368c:	2040c6b0 	.word	0x2040c6b0
  403690:	2040c724 	.word	0x2040c724
  403694:	00402e01 	.word	0x00402e01
  403698:	2040c6fc 	.word	0x2040c6fc

0040369c <xTaskRemoveFromEventList>:
{
  40369c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40369e:	68c3      	ldr	r3, [r0, #12]
  4036a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4036a2:	b324      	cbz	r4, 4036ee <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4036a4:	f104 0518 	add.w	r5, r4, #24
  4036a8:	4628      	mov	r0, r5
  4036aa:	4b1a      	ldr	r3, [pc, #104]	; (403714 <xTaskRemoveFromEventList+0x78>)
  4036ac:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4036ae:	4b1a      	ldr	r3, [pc, #104]	; (403718 <xTaskRemoveFromEventList+0x7c>)
  4036b0:	681b      	ldr	r3, [r3, #0]
  4036b2:	bb3b      	cbnz	r3, 403704 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4036b4:	1d25      	adds	r5, r4, #4
  4036b6:	4628      	mov	r0, r5
  4036b8:	4b16      	ldr	r3, [pc, #88]	; (403714 <xTaskRemoveFromEventList+0x78>)
  4036ba:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4036bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4036be:	4a17      	ldr	r2, [pc, #92]	; (40371c <xTaskRemoveFromEventList+0x80>)
  4036c0:	6811      	ldr	r1, [r2, #0]
  4036c2:	2301      	movs	r3, #1
  4036c4:	4083      	lsls	r3, r0
  4036c6:	430b      	orrs	r3, r1
  4036c8:	6013      	str	r3, [r2, #0]
  4036ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4036ce:	4629      	mov	r1, r5
  4036d0:	4b13      	ldr	r3, [pc, #76]	; (403720 <xTaskRemoveFromEventList+0x84>)
  4036d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4036d6:	4b13      	ldr	r3, [pc, #76]	; (403724 <xTaskRemoveFromEventList+0x88>)
  4036d8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4036da:	4b13      	ldr	r3, [pc, #76]	; (403728 <xTaskRemoveFromEventList+0x8c>)
  4036dc:	681b      	ldr	r3, [r3, #0]
  4036de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4036e2:	429a      	cmp	r2, r3
  4036e4:	d913      	bls.n	40370e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4036e6:	2001      	movs	r0, #1
  4036e8:	4b10      	ldr	r3, [pc, #64]	; (40372c <xTaskRemoveFromEventList+0x90>)
  4036ea:	6018      	str	r0, [r3, #0]
  4036ec:	bd38      	pop	{r3, r4, r5, pc}
  4036ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4036f2:	b672      	cpsid	i
  4036f4:	f383 8811 	msr	BASEPRI, r3
  4036f8:	f3bf 8f6f 	isb	sy
  4036fc:	f3bf 8f4f 	dsb	sy
  403700:	b662      	cpsie	i
  403702:	e7fe      	b.n	403702 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403704:	4629      	mov	r1, r5
  403706:	480a      	ldr	r0, [pc, #40]	; (403730 <xTaskRemoveFromEventList+0x94>)
  403708:	4b06      	ldr	r3, [pc, #24]	; (403724 <xTaskRemoveFromEventList+0x88>)
  40370a:	4798      	blx	r3
  40370c:	e7e5      	b.n	4036da <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40370e:	2000      	movs	r0, #0
}
  403710:	bd38      	pop	{r3, r4, r5, pc}
  403712:	bf00      	nop
  403714:	004020fd 	.word	0x004020fd
  403718:	2040c6a4 	.word	0x2040c6a4
  40371c:	2040c6b0 	.word	0x2040c6b0
  403720:	2040c638 	.word	0x2040c638
  403724:	004020b1 	.word	0x004020b1
  403728:	2040c62c 	.word	0x2040c62c
  40372c:	2040c728 	.word	0x2040c728
  403730:	2040c6e4 	.word	0x2040c6e4

00403734 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  403734:	b130      	cbz	r0, 403744 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403736:	4a09      	ldr	r2, [pc, #36]	; (40375c <vTaskSetTimeOutState+0x28>)
  403738:	6812      	ldr	r2, [r2, #0]
  40373a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40373c:	4a08      	ldr	r2, [pc, #32]	; (403760 <vTaskSetTimeOutState+0x2c>)
  40373e:	6812      	ldr	r2, [r2, #0]
  403740:	6042      	str	r2, [r0, #4]
  403742:	4770      	bx	lr
  403744:	f04f 0380 	mov.w	r3, #128	; 0x80
  403748:	b672      	cpsid	i
  40374a:	f383 8811 	msr	BASEPRI, r3
  40374e:	f3bf 8f6f 	isb	sy
  403752:	f3bf 8f4f 	dsb	sy
  403756:	b662      	cpsie	i
  403758:	e7fe      	b.n	403758 <vTaskSetTimeOutState+0x24>
  40375a:	bf00      	nop
  40375c:	2040c6e0 	.word	0x2040c6e0
  403760:	2040c724 	.word	0x2040c724

00403764 <xTaskCheckForTimeOut>:
{
  403764:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403766:	b1c0      	cbz	r0, 40379a <xTaskCheckForTimeOut+0x36>
  403768:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40376a:	b309      	cbz	r1, 4037b0 <xTaskCheckForTimeOut+0x4c>
  40376c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40376e:	4b1d      	ldr	r3, [pc, #116]	; (4037e4 <xTaskCheckForTimeOut+0x80>)
  403770:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  403772:	4b1d      	ldr	r3, [pc, #116]	; (4037e8 <xTaskCheckForTimeOut+0x84>)
  403774:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403776:	682b      	ldr	r3, [r5, #0]
  403778:	f1b3 3fff 	cmp.w	r3, #4294967295
  40377c:	d02e      	beq.n	4037dc <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40377e:	491b      	ldr	r1, [pc, #108]	; (4037ec <xTaskCheckForTimeOut+0x88>)
  403780:	6809      	ldr	r1, [r1, #0]
  403782:	6820      	ldr	r0, [r4, #0]
  403784:	4288      	cmp	r0, r1
  403786:	d002      	beq.n	40378e <xTaskCheckForTimeOut+0x2a>
  403788:	6861      	ldr	r1, [r4, #4]
  40378a:	428a      	cmp	r2, r1
  40378c:	d228      	bcs.n	4037e0 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40378e:	6861      	ldr	r1, [r4, #4]
  403790:	1a50      	subs	r0, r2, r1
  403792:	4283      	cmp	r3, r0
  403794:	d817      	bhi.n	4037c6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403796:	2401      	movs	r4, #1
  403798:	e01c      	b.n	4037d4 <xTaskCheckForTimeOut+0x70>
  40379a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40379e:	b672      	cpsid	i
  4037a0:	f383 8811 	msr	BASEPRI, r3
  4037a4:	f3bf 8f6f 	isb	sy
  4037a8:	f3bf 8f4f 	dsb	sy
  4037ac:	b662      	cpsie	i
  4037ae:	e7fe      	b.n	4037ae <xTaskCheckForTimeOut+0x4a>
  4037b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037b4:	b672      	cpsid	i
  4037b6:	f383 8811 	msr	BASEPRI, r3
  4037ba:	f3bf 8f6f 	isb	sy
  4037be:	f3bf 8f4f 	dsb	sy
  4037c2:	b662      	cpsie	i
  4037c4:	e7fe      	b.n	4037c4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4037c6:	1a9b      	subs	r3, r3, r2
  4037c8:	440b      	add	r3, r1
  4037ca:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4037cc:	4620      	mov	r0, r4
  4037ce:	4b08      	ldr	r3, [pc, #32]	; (4037f0 <xTaskCheckForTimeOut+0x8c>)
  4037d0:	4798      	blx	r3
			xReturn = pdFALSE;
  4037d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4037d4:	4b07      	ldr	r3, [pc, #28]	; (4037f4 <xTaskCheckForTimeOut+0x90>)
  4037d6:	4798      	blx	r3
}
  4037d8:	4620      	mov	r0, r4
  4037da:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4037dc:	2400      	movs	r4, #0
  4037de:	e7f9      	b.n	4037d4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4037e0:	2401      	movs	r4, #1
  4037e2:	e7f7      	b.n	4037d4 <xTaskCheckForTimeOut+0x70>
  4037e4:	004021e1 	.word	0x004021e1
  4037e8:	2040c724 	.word	0x2040c724
  4037ec:	2040c6e0 	.word	0x2040c6e0
  4037f0:	00403735 	.word	0x00403735
  4037f4:	0040222d 	.word	0x0040222d

004037f8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4037f8:	2201      	movs	r2, #1
  4037fa:	4b01      	ldr	r3, [pc, #4]	; (403800 <vTaskMissedYield+0x8>)
  4037fc:	601a      	str	r2, [r3, #0]
  4037fe:	4770      	bx	lr
  403800:	2040c728 	.word	0x2040c728

00403804 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  403804:	4b05      	ldr	r3, [pc, #20]	; (40381c <xTaskGetSchedulerState+0x18>)
  403806:	681b      	ldr	r3, [r3, #0]
  403808:	b133      	cbz	r3, 403818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40380a:	4b05      	ldr	r3, [pc, #20]	; (403820 <xTaskGetSchedulerState+0x1c>)
  40380c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40380e:	2b00      	cmp	r3, #0
  403810:	bf0c      	ite	eq
  403812:	2002      	moveq	r0, #2
  403814:	2000      	movne	r0, #0
  403816:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403818:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40381a:	4770      	bx	lr
  40381c:	2040c6f8 	.word	0x2040c6f8
  403820:	2040c6a4 	.word	0x2040c6a4

00403824 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  403824:	2800      	cmp	r0, #0
  403826:	d044      	beq.n	4038b2 <vTaskPriorityInherit+0x8e>
	{
  403828:	b538      	push	{r3, r4, r5, lr}
  40382a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40382c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40382e:	4921      	ldr	r1, [pc, #132]	; (4038b4 <vTaskPriorityInherit+0x90>)
  403830:	6809      	ldr	r1, [r1, #0]
  403832:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403834:	428a      	cmp	r2, r1
  403836:	d214      	bcs.n	403862 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403838:	6981      	ldr	r1, [r0, #24]
  40383a:	2900      	cmp	r1, #0
  40383c:	db05      	blt.n	40384a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40383e:	491d      	ldr	r1, [pc, #116]	; (4038b4 <vTaskPriorityInherit+0x90>)
  403840:	6809      	ldr	r1, [r1, #0]
  403842:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403844:	f1c1 0105 	rsb	r1, r1, #5
  403848:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40384a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40384e:	491a      	ldr	r1, [pc, #104]	; (4038b8 <vTaskPriorityInherit+0x94>)
  403850:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403854:	6961      	ldr	r1, [r4, #20]
  403856:	4291      	cmp	r1, r2
  403858:	d004      	beq.n	403864 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40385a:	4a16      	ldr	r2, [pc, #88]	; (4038b4 <vTaskPriorityInherit+0x90>)
  40385c:	6812      	ldr	r2, [r2, #0]
  40385e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403860:	62e2      	str	r2, [r4, #44]	; 0x2c
  403862:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403864:	1d25      	adds	r5, r4, #4
  403866:	4628      	mov	r0, r5
  403868:	4b14      	ldr	r3, [pc, #80]	; (4038bc <vTaskPriorityInherit+0x98>)
  40386a:	4798      	blx	r3
  40386c:	b970      	cbnz	r0, 40388c <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40386e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403870:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403874:	4a10      	ldr	r2, [pc, #64]	; (4038b8 <vTaskPriorityInherit+0x94>)
  403876:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40387a:	b93a      	cbnz	r2, 40388c <vTaskPriorityInherit+0x68>
  40387c:	4810      	ldr	r0, [pc, #64]	; (4038c0 <vTaskPriorityInherit+0x9c>)
  40387e:	6802      	ldr	r2, [r0, #0]
  403880:	2101      	movs	r1, #1
  403882:	fa01 f303 	lsl.w	r3, r1, r3
  403886:	ea22 0303 	bic.w	r3, r2, r3
  40388a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40388c:	4b09      	ldr	r3, [pc, #36]	; (4038b4 <vTaskPriorityInherit+0x90>)
  40388e:	681b      	ldr	r3, [r3, #0]
  403890:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  403892:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403894:	4a0a      	ldr	r2, [pc, #40]	; (4038c0 <vTaskPriorityInherit+0x9c>)
  403896:	6811      	ldr	r1, [r2, #0]
  403898:	2301      	movs	r3, #1
  40389a:	4083      	lsls	r3, r0
  40389c:	430b      	orrs	r3, r1
  40389e:	6013      	str	r3, [r2, #0]
  4038a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4038a4:	4629      	mov	r1, r5
  4038a6:	4b04      	ldr	r3, [pc, #16]	; (4038b8 <vTaskPriorityInherit+0x94>)
  4038a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4038ac:	4b05      	ldr	r3, [pc, #20]	; (4038c4 <vTaskPriorityInherit+0xa0>)
  4038ae:	4798      	blx	r3
  4038b0:	bd38      	pop	{r3, r4, r5, pc}
  4038b2:	4770      	bx	lr
  4038b4:	2040c62c 	.word	0x2040c62c
  4038b8:	2040c638 	.word	0x2040c638
  4038bc:	004020fd 	.word	0x004020fd
  4038c0:	2040c6b0 	.word	0x2040c6b0
  4038c4:	004020b1 	.word	0x004020b1

004038c8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4038c8:	2800      	cmp	r0, #0
  4038ca:	d04d      	beq.n	403968 <xTaskPriorityDisinherit+0xa0>
	{
  4038cc:	b538      	push	{r3, r4, r5, lr}
  4038ce:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4038d0:	4a27      	ldr	r2, [pc, #156]	; (403970 <xTaskPriorityDisinherit+0xa8>)
  4038d2:	6812      	ldr	r2, [r2, #0]
  4038d4:	4290      	cmp	r0, r2
  4038d6:	d00a      	beq.n	4038ee <xTaskPriorityDisinherit+0x26>
  4038d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038dc:	b672      	cpsid	i
  4038de:	f383 8811 	msr	BASEPRI, r3
  4038e2:	f3bf 8f6f 	isb	sy
  4038e6:	f3bf 8f4f 	dsb	sy
  4038ea:	b662      	cpsie	i
  4038ec:	e7fe      	b.n	4038ec <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4038ee:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4038f0:	b952      	cbnz	r2, 403908 <xTaskPriorityDisinherit+0x40>
  4038f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038f6:	b672      	cpsid	i
  4038f8:	f383 8811 	msr	BASEPRI, r3
  4038fc:	f3bf 8f6f 	isb	sy
  403900:	f3bf 8f4f 	dsb	sy
  403904:	b662      	cpsie	i
  403906:	e7fe      	b.n	403906 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403908:	3a01      	subs	r2, #1
  40390a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40390c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40390e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403910:	4288      	cmp	r0, r1
  403912:	d02b      	beq.n	40396c <xTaskPriorityDisinherit+0xa4>
  403914:	bb52      	cbnz	r2, 40396c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403916:	1d25      	adds	r5, r4, #4
  403918:	4628      	mov	r0, r5
  40391a:	4b16      	ldr	r3, [pc, #88]	; (403974 <xTaskPriorityDisinherit+0xac>)
  40391c:	4798      	blx	r3
  40391e:	b968      	cbnz	r0, 40393c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403920:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403922:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403926:	4b14      	ldr	r3, [pc, #80]	; (403978 <xTaskPriorityDisinherit+0xb0>)
  403928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40392c:	b933      	cbnz	r3, 40393c <xTaskPriorityDisinherit+0x74>
  40392e:	4813      	ldr	r0, [pc, #76]	; (40397c <xTaskPriorityDisinherit+0xb4>)
  403930:	6803      	ldr	r3, [r0, #0]
  403932:	2201      	movs	r2, #1
  403934:	408a      	lsls	r2, r1
  403936:	ea23 0302 	bic.w	r3, r3, r2
  40393a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40393c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40393e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403940:	f1c0 0305 	rsb	r3, r0, #5
  403944:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403946:	4a0d      	ldr	r2, [pc, #52]	; (40397c <xTaskPriorityDisinherit+0xb4>)
  403948:	6811      	ldr	r1, [r2, #0]
  40394a:	2401      	movs	r4, #1
  40394c:	fa04 f300 	lsl.w	r3, r4, r0
  403950:	430b      	orrs	r3, r1
  403952:	6013      	str	r3, [r2, #0]
  403954:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403958:	4629      	mov	r1, r5
  40395a:	4b07      	ldr	r3, [pc, #28]	; (403978 <xTaskPriorityDisinherit+0xb0>)
  40395c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403960:	4b07      	ldr	r3, [pc, #28]	; (403980 <xTaskPriorityDisinherit+0xb8>)
  403962:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403964:	4620      	mov	r0, r4
  403966:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403968:	2000      	movs	r0, #0
  40396a:	4770      	bx	lr
  40396c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40396e:	bd38      	pop	{r3, r4, r5, pc}
  403970:	2040c62c 	.word	0x2040c62c
  403974:	004020fd 	.word	0x004020fd
  403978:	2040c638 	.word	0x2040c638
  40397c:	2040c6b0 	.word	0x2040c6b0
  403980:	004020b1 	.word	0x004020b1

00403984 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403984:	4b05      	ldr	r3, [pc, #20]	; (40399c <pvTaskIncrementMutexHeldCount+0x18>)
  403986:	681b      	ldr	r3, [r3, #0]
  403988:	b123      	cbz	r3, 403994 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40398a:	4b04      	ldr	r3, [pc, #16]	; (40399c <pvTaskIncrementMutexHeldCount+0x18>)
  40398c:	681a      	ldr	r2, [r3, #0]
  40398e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403990:	3301      	adds	r3, #1
  403992:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403994:	4b01      	ldr	r3, [pc, #4]	; (40399c <pvTaskIncrementMutexHeldCount+0x18>)
  403996:	6818      	ldr	r0, [r3, #0]
	}
  403998:	4770      	bx	lr
  40399a:	bf00      	nop
  40399c:	2040c62c 	.word	0x2040c62c

004039a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4039a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4039a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4039a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4039a6:	4291      	cmp	r1, r2
  4039a8:	d80c      	bhi.n	4039c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4039aa:	1ad2      	subs	r2, r2, r3
  4039ac:	6983      	ldr	r3, [r0, #24]
  4039ae:	429a      	cmp	r2, r3
  4039b0:	d301      	bcc.n	4039b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4039b2:	2001      	movs	r0, #1
  4039b4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4039b6:	1d01      	adds	r1, r0, #4
  4039b8:	4b09      	ldr	r3, [pc, #36]	; (4039e0 <prvInsertTimerInActiveList+0x40>)
  4039ba:	6818      	ldr	r0, [r3, #0]
  4039bc:	4b09      	ldr	r3, [pc, #36]	; (4039e4 <prvInsertTimerInActiveList+0x44>)
  4039be:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4039c0:	2000      	movs	r0, #0
  4039c2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4039c4:	429a      	cmp	r2, r3
  4039c6:	d203      	bcs.n	4039d0 <prvInsertTimerInActiveList+0x30>
  4039c8:	4299      	cmp	r1, r3
  4039ca:	d301      	bcc.n	4039d0 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4039cc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4039ce:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4039d0:	1d01      	adds	r1, r0, #4
  4039d2:	4b05      	ldr	r3, [pc, #20]	; (4039e8 <prvInsertTimerInActiveList+0x48>)
  4039d4:	6818      	ldr	r0, [r3, #0]
  4039d6:	4b03      	ldr	r3, [pc, #12]	; (4039e4 <prvInsertTimerInActiveList+0x44>)
  4039d8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4039da:	2000      	movs	r0, #0
  4039dc:	bd08      	pop	{r3, pc}
  4039de:	bf00      	nop
  4039e0:	2040c730 	.word	0x2040c730
  4039e4:	004020c9 	.word	0x004020c9
  4039e8:	2040c72c 	.word	0x2040c72c

004039ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4039ec:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4039ee:	4b15      	ldr	r3, [pc, #84]	; (403a44 <prvCheckForValidListAndQueue+0x58>)
  4039f0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4039f2:	4b15      	ldr	r3, [pc, #84]	; (403a48 <prvCheckForValidListAndQueue+0x5c>)
  4039f4:	681b      	ldr	r3, [r3, #0]
  4039f6:	b113      	cbz	r3, 4039fe <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4039f8:	4b14      	ldr	r3, [pc, #80]	; (403a4c <prvCheckForValidListAndQueue+0x60>)
  4039fa:	4798      	blx	r3
  4039fc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4039fe:	4d14      	ldr	r5, [pc, #80]	; (403a50 <prvCheckForValidListAndQueue+0x64>)
  403a00:	4628      	mov	r0, r5
  403a02:	4e14      	ldr	r6, [pc, #80]	; (403a54 <prvCheckForValidListAndQueue+0x68>)
  403a04:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  403a06:	4c14      	ldr	r4, [pc, #80]	; (403a58 <prvCheckForValidListAndQueue+0x6c>)
  403a08:	4620      	mov	r0, r4
  403a0a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403a0c:	4b13      	ldr	r3, [pc, #76]	; (403a5c <prvCheckForValidListAndQueue+0x70>)
  403a0e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403a10:	4b13      	ldr	r3, [pc, #76]	; (403a60 <prvCheckForValidListAndQueue+0x74>)
  403a12:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  403a14:	2200      	movs	r2, #0
  403a16:	2110      	movs	r1, #16
  403a18:	2005      	movs	r0, #5
  403a1a:	4b12      	ldr	r3, [pc, #72]	; (403a64 <prvCheckForValidListAndQueue+0x78>)
  403a1c:	4798      	blx	r3
  403a1e:	4b0a      	ldr	r3, [pc, #40]	; (403a48 <prvCheckForValidListAndQueue+0x5c>)
  403a20:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403a22:	b118      	cbz	r0, 403a2c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403a24:	4910      	ldr	r1, [pc, #64]	; (403a68 <prvCheckForValidListAndQueue+0x7c>)
  403a26:	4b11      	ldr	r3, [pc, #68]	; (403a6c <prvCheckForValidListAndQueue+0x80>)
  403a28:	4798      	blx	r3
  403a2a:	e7e5      	b.n	4039f8 <prvCheckForValidListAndQueue+0xc>
  403a2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a30:	b672      	cpsid	i
  403a32:	f383 8811 	msr	BASEPRI, r3
  403a36:	f3bf 8f6f 	isb	sy
  403a3a:	f3bf 8f4f 	dsb	sy
  403a3e:	b662      	cpsie	i
  403a40:	e7fe      	b.n	403a40 <prvCheckForValidListAndQueue+0x54>
  403a42:	bf00      	nop
  403a44:	004021e1 	.word	0x004021e1
  403a48:	2040c760 	.word	0x2040c760
  403a4c:	0040222d 	.word	0x0040222d
  403a50:	2040c734 	.word	0x2040c734
  403a54:	00402095 	.word	0x00402095
  403a58:	2040c748 	.word	0x2040c748
  403a5c:	2040c72c 	.word	0x2040c72c
  403a60:	2040c730 	.word	0x2040c730
  403a64:	00402739 	.word	0x00402739
  403a68:	004075e0 	.word	0x004075e0
  403a6c:	00402d49 	.word	0x00402d49

00403a70 <xTimerCreateTimerTask>:
{
  403a70:	b510      	push	{r4, lr}
  403a72:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403a74:	4b0f      	ldr	r3, [pc, #60]	; (403ab4 <xTimerCreateTimerTask+0x44>)
  403a76:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403a78:	4b0f      	ldr	r3, [pc, #60]	; (403ab8 <xTimerCreateTimerTask+0x48>)
  403a7a:	681b      	ldr	r3, [r3, #0]
  403a7c:	b173      	cbz	r3, 403a9c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403a7e:	2300      	movs	r3, #0
  403a80:	9303      	str	r3, [sp, #12]
  403a82:	9302      	str	r3, [sp, #8]
  403a84:	9301      	str	r3, [sp, #4]
  403a86:	2204      	movs	r2, #4
  403a88:	9200      	str	r2, [sp, #0]
  403a8a:	f44f 7282 	mov.w	r2, #260	; 0x104
  403a8e:	490b      	ldr	r1, [pc, #44]	; (403abc <xTimerCreateTimerTask+0x4c>)
  403a90:	480b      	ldr	r0, [pc, #44]	; (403ac0 <xTimerCreateTimerTask+0x50>)
  403a92:	4c0c      	ldr	r4, [pc, #48]	; (403ac4 <xTimerCreateTimerTask+0x54>)
  403a94:	47a0      	blx	r4
	configASSERT( xReturn );
  403a96:	b108      	cbz	r0, 403a9c <xTimerCreateTimerTask+0x2c>
}
  403a98:	b004      	add	sp, #16
  403a9a:	bd10      	pop	{r4, pc}
  403a9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403aa0:	b672      	cpsid	i
  403aa2:	f383 8811 	msr	BASEPRI, r3
  403aa6:	f3bf 8f6f 	isb	sy
  403aaa:	f3bf 8f4f 	dsb	sy
  403aae:	b662      	cpsie	i
  403ab0:	e7fe      	b.n	403ab0 <xTimerCreateTimerTask+0x40>
  403ab2:	bf00      	nop
  403ab4:	004039ed 	.word	0x004039ed
  403ab8:	2040c760 	.word	0x2040c760
  403abc:	004075e8 	.word	0x004075e8
  403ac0:	00403bf1 	.word	0x00403bf1
  403ac4:	00402e59 	.word	0x00402e59

00403ac8 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403ac8:	b1d8      	cbz	r0, 403b02 <xTimerGenericCommand+0x3a>
{
  403aca:	b530      	push	{r4, r5, lr}
  403acc:	b085      	sub	sp, #20
  403ace:	4615      	mov	r5, r2
  403ad0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403ad2:	4a15      	ldr	r2, [pc, #84]	; (403b28 <xTimerGenericCommand+0x60>)
  403ad4:	6810      	ldr	r0, [r2, #0]
  403ad6:	b320      	cbz	r0, 403b22 <xTimerGenericCommand+0x5a>
  403ad8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403ada:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403adc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403ade:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403ae0:	2905      	cmp	r1, #5
  403ae2:	dc19      	bgt.n	403b18 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403ae4:	4b11      	ldr	r3, [pc, #68]	; (403b2c <xTimerGenericCommand+0x64>)
  403ae6:	4798      	blx	r3
  403ae8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403aea:	f04f 0300 	mov.w	r3, #0
  403aee:	bf0c      	ite	eq
  403af0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403af2:	461a      	movne	r2, r3
  403af4:	4669      	mov	r1, sp
  403af6:	480c      	ldr	r0, [pc, #48]	; (403b28 <xTimerGenericCommand+0x60>)
  403af8:	6800      	ldr	r0, [r0, #0]
  403afa:	4c0d      	ldr	r4, [pc, #52]	; (403b30 <xTimerGenericCommand+0x68>)
  403afc:	47a0      	blx	r4
}
  403afe:	b005      	add	sp, #20
  403b00:	bd30      	pop	{r4, r5, pc}
  403b02:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b06:	b672      	cpsid	i
  403b08:	f383 8811 	msr	BASEPRI, r3
  403b0c:	f3bf 8f6f 	isb	sy
  403b10:	f3bf 8f4f 	dsb	sy
  403b14:	b662      	cpsie	i
  403b16:	e7fe      	b.n	403b16 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403b18:	2300      	movs	r3, #0
  403b1a:	4669      	mov	r1, sp
  403b1c:	4c05      	ldr	r4, [pc, #20]	; (403b34 <xTimerGenericCommand+0x6c>)
  403b1e:	47a0      	blx	r4
  403b20:	e7ed      	b.n	403afe <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403b22:	2000      	movs	r0, #0
	return xReturn;
  403b24:	e7eb      	b.n	403afe <xTimerGenericCommand+0x36>
  403b26:	bf00      	nop
  403b28:	2040c760 	.word	0x2040c760
  403b2c:	00403805 	.word	0x00403805
  403b30:	004027b5 	.word	0x004027b5
  403b34:	00402999 	.word	0x00402999

00403b38 <prvSampleTimeNow>:
{
  403b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b3c:	b082      	sub	sp, #8
  403b3e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403b40:	4b24      	ldr	r3, [pc, #144]	; (403bd4 <prvSampleTimeNow+0x9c>)
  403b42:	4798      	blx	r3
  403b44:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403b46:	4b24      	ldr	r3, [pc, #144]	; (403bd8 <prvSampleTimeNow+0xa0>)
  403b48:	681b      	ldr	r3, [r3, #0]
  403b4a:	4298      	cmp	r0, r3
  403b4c:	d31b      	bcc.n	403b86 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403b4e:	2300      	movs	r3, #0
  403b50:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403b54:	4b20      	ldr	r3, [pc, #128]	; (403bd8 <prvSampleTimeNow+0xa0>)
  403b56:	601f      	str	r7, [r3, #0]
}
  403b58:	4638      	mov	r0, r7
  403b5a:	b002      	add	sp, #8
  403b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403b60:	2100      	movs	r1, #0
  403b62:	9100      	str	r1, [sp, #0]
  403b64:	460b      	mov	r3, r1
  403b66:	4652      	mov	r2, sl
  403b68:	4620      	mov	r0, r4
  403b6a:	4c1c      	ldr	r4, [pc, #112]	; (403bdc <prvSampleTimeNow+0xa4>)
  403b6c:	47a0      	blx	r4
				configASSERT( xResult );
  403b6e:	b960      	cbnz	r0, 403b8a <prvSampleTimeNow+0x52>
  403b70:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b74:	b672      	cpsid	i
  403b76:	f383 8811 	msr	BASEPRI, r3
  403b7a:	f3bf 8f6f 	isb	sy
  403b7e:	f3bf 8f4f 	dsb	sy
  403b82:	b662      	cpsie	i
  403b84:	e7fe      	b.n	403b84 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403b86:	4d16      	ldr	r5, [pc, #88]	; (403be0 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403b88:	4e16      	ldr	r6, [pc, #88]	; (403be4 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403b8a:	682b      	ldr	r3, [r5, #0]
  403b8c:	681a      	ldr	r2, [r3, #0]
  403b8e:	b1c2      	cbz	r2, 403bc2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403b90:	68db      	ldr	r3, [r3, #12]
  403b92:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403b96:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403b98:	f104 0904 	add.w	r9, r4, #4
  403b9c:	4648      	mov	r0, r9
  403b9e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ba2:	4620      	mov	r0, r4
  403ba4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403ba6:	69e3      	ldr	r3, [r4, #28]
  403ba8:	2b01      	cmp	r3, #1
  403baa:	d1ee      	bne.n	403b8a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403bac:	69a3      	ldr	r3, [r4, #24]
  403bae:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403bb0:	459a      	cmp	sl, r3
  403bb2:	d2d5      	bcs.n	403b60 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403bb4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403bb6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403bb8:	4649      	mov	r1, r9
  403bba:	6828      	ldr	r0, [r5, #0]
  403bbc:	4b0a      	ldr	r3, [pc, #40]	; (403be8 <prvSampleTimeNow+0xb0>)
  403bbe:	4798      	blx	r3
  403bc0:	e7e3      	b.n	403b8a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403bc2:	4a0a      	ldr	r2, [pc, #40]	; (403bec <prvSampleTimeNow+0xb4>)
  403bc4:	6810      	ldr	r0, [r2, #0]
  403bc6:	4906      	ldr	r1, [pc, #24]	; (403be0 <prvSampleTimeNow+0xa8>)
  403bc8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403bca:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403bcc:	2301      	movs	r3, #1
  403bce:	f8c8 3000 	str.w	r3, [r8]
  403bd2:	e7bf      	b.n	403b54 <prvSampleTimeNow+0x1c>
  403bd4:	00403129 	.word	0x00403129
  403bd8:	2040c75c 	.word	0x2040c75c
  403bdc:	00403ac9 	.word	0x00403ac9
  403be0:	2040c72c 	.word	0x2040c72c
  403be4:	004020fd 	.word	0x004020fd
  403be8:	004020c9 	.word	0x004020c9
  403bec:	2040c730 	.word	0x2040c730

00403bf0 <prvTimerTask>:
{
  403bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bf4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403bf6:	4e75      	ldr	r6, [pc, #468]	; (403dcc <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403bf8:	4f75      	ldr	r7, [pc, #468]	; (403dd0 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403bfa:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403df8 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403bfe:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403dfc <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403c02:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403c04:	681a      	ldr	r2, [r3, #0]
  403c06:	2a00      	cmp	r2, #0
  403c08:	f000 80ce 	beq.w	403da8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403c0c:	68db      	ldr	r3, [r3, #12]
  403c0e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403c10:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403c12:	a804      	add	r0, sp, #16
  403c14:	4b6f      	ldr	r3, [pc, #444]	; (403dd4 <prvTimerTask+0x1e4>)
  403c16:	4798      	blx	r3
  403c18:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403c1a:	9b04      	ldr	r3, [sp, #16]
  403c1c:	2b00      	cmp	r3, #0
  403c1e:	d144      	bne.n	403caa <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403c20:	42a0      	cmp	r0, r4
  403c22:	d212      	bcs.n	403c4a <prvTimerTask+0x5a>
  403c24:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403c26:	1b61      	subs	r1, r4, r5
  403c28:	4b6b      	ldr	r3, [pc, #428]	; (403dd8 <prvTimerTask+0x1e8>)
  403c2a:	6818      	ldr	r0, [r3, #0]
  403c2c:	4b6b      	ldr	r3, [pc, #428]	; (403ddc <prvTimerTask+0x1ec>)
  403c2e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403c30:	4b6b      	ldr	r3, [pc, #428]	; (403de0 <prvTimerTask+0x1f0>)
  403c32:	4798      	blx	r3
  403c34:	2800      	cmp	r0, #0
  403c36:	d13a      	bne.n	403cae <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403c3c:	f8c9 3000 	str.w	r3, [r9]
  403c40:	f3bf 8f4f 	dsb	sy
  403c44:	f3bf 8f6f 	isb	sy
  403c48:	e031      	b.n	403cae <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403c4a:	4b65      	ldr	r3, [pc, #404]	; (403de0 <prvTimerTask+0x1f0>)
  403c4c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403c4e:	6833      	ldr	r3, [r6, #0]
  403c50:	68db      	ldr	r3, [r3, #12]
  403c52:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403c56:	f10a 0004 	add.w	r0, sl, #4
  403c5a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403c5c:	f8da 301c 	ldr.w	r3, [sl, #28]
  403c60:	2b01      	cmp	r3, #1
  403c62:	d004      	beq.n	403c6e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403c64:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403c68:	4650      	mov	r0, sl
  403c6a:	4798      	blx	r3
  403c6c:	e01f      	b.n	403cae <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403c6e:	f8da 1018 	ldr.w	r1, [sl, #24]
  403c72:	4623      	mov	r3, r4
  403c74:	462a      	mov	r2, r5
  403c76:	4421      	add	r1, r4
  403c78:	4650      	mov	r0, sl
  403c7a:	4d5a      	ldr	r5, [pc, #360]	; (403de4 <prvTimerTask+0x1f4>)
  403c7c:	47a8      	blx	r5
  403c7e:	2801      	cmp	r0, #1
  403c80:	d1f0      	bne.n	403c64 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403c82:	2100      	movs	r1, #0
  403c84:	9100      	str	r1, [sp, #0]
  403c86:	460b      	mov	r3, r1
  403c88:	4622      	mov	r2, r4
  403c8a:	4650      	mov	r0, sl
  403c8c:	4c56      	ldr	r4, [pc, #344]	; (403de8 <prvTimerTask+0x1f8>)
  403c8e:	47a0      	blx	r4
			configASSERT( xResult );
  403c90:	2800      	cmp	r0, #0
  403c92:	d1e7      	bne.n	403c64 <prvTimerTask+0x74>
  403c94:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c98:	b672      	cpsid	i
  403c9a:	f383 8811 	msr	BASEPRI, r3
  403c9e:	f3bf 8f6f 	isb	sy
  403ca2:	f3bf 8f4f 	dsb	sy
  403ca6:	b662      	cpsie	i
  403ca8:	e7fe      	b.n	403ca8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403caa:	4b4d      	ldr	r3, [pc, #308]	; (403de0 <prvTimerTask+0x1f0>)
  403cac:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403cae:	4d4a      	ldr	r5, [pc, #296]	; (403dd8 <prvTimerTask+0x1e8>)
  403cb0:	4c4e      	ldr	r4, [pc, #312]	; (403dec <prvTimerTask+0x1fc>)
  403cb2:	e006      	b.n	403cc2 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403cb4:	9907      	ldr	r1, [sp, #28]
  403cb6:	9806      	ldr	r0, [sp, #24]
  403cb8:	9b05      	ldr	r3, [sp, #20]
  403cba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403cbc:	9b04      	ldr	r3, [sp, #16]
  403cbe:	2b00      	cmp	r3, #0
  403cc0:	da09      	bge.n	403cd6 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403cc2:	2300      	movs	r3, #0
  403cc4:	461a      	mov	r2, r3
  403cc6:	a904      	add	r1, sp, #16
  403cc8:	6828      	ldr	r0, [r5, #0]
  403cca:	47a0      	blx	r4
  403ccc:	2800      	cmp	r0, #0
  403cce:	d098      	beq.n	403c02 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403cd0:	9b04      	ldr	r3, [sp, #16]
  403cd2:	2b00      	cmp	r3, #0
  403cd4:	dbee      	blt.n	403cb4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403cd6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403cda:	f8da 3014 	ldr.w	r3, [sl, #20]
  403cde:	b113      	cbz	r3, 403ce6 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403ce0:	f10a 0004 	add.w	r0, sl, #4
  403ce4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403ce6:	a803      	add	r0, sp, #12
  403ce8:	4b3a      	ldr	r3, [pc, #232]	; (403dd4 <prvTimerTask+0x1e4>)
  403cea:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403cec:	9b04      	ldr	r3, [sp, #16]
  403cee:	2b09      	cmp	r3, #9
  403cf0:	d8e7      	bhi.n	403cc2 <prvTimerTask+0xd2>
  403cf2:	a201      	add	r2, pc, #4	; (adr r2, 403cf8 <prvTimerTask+0x108>)
  403cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403cf8:	00403d21 	.word	0x00403d21
  403cfc:	00403d21 	.word	0x00403d21
  403d00:	00403d21 	.word	0x00403d21
  403d04:	00403cc3 	.word	0x00403cc3
  403d08:	00403d75 	.word	0x00403d75
  403d0c:	00403da1 	.word	0x00403da1
  403d10:	00403d21 	.word	0x00403d21
  403d14:	00403d21 	.word	0x00403d21
  403d18:	00403cc3 	.word	0x00403cc3
  403d1c:	00403d75 	.word	0x00403d75
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403d20:	9c05      	ldr	r4, [sp, #20]
  403d22:	f8da 1018 	ldr.w	r1, [sl, #24]
  403d26:	4623      	mov	r3, r4
  403d28:	4602      	mov	r2, r0
  403d2a:	4421      	add	r1, r4
  403d2c:	4650      	mov	r0, sl
  403d2e:	4c2d      	ldr	r4, [pc, #180]	; (403de4 <prvTimerTask+0x1f4>)
  403d30:	47a0      	blx	r4
  403d32:	2801      	cmp	r0, #1
  403d34:	d1bc      	bne.n	403cb0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403d36:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403d3a:	4650      	mov	r0, sl
  403d3c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403d3e:	f8da 301c 	ldr.w	r3, [sl, #28]
  403d42:	2b01      	cmp	r3, #1
  403d44:	d1b4      	bne.n	403cb0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403d46:	f8da 2018 	ldr.w	r2, [sl, #24]
  403d4a:	2100      	movs	r1, #0
  403d4c:	9100      	str	r1, [sp, #0]
  403d4e:	460b      	mov	r3, r1
  403d50:	9805      	ldr	r0, [sp, #20]
  403d52:	4402      	add	r2, r0
  403d54:	4650      	mov	r0, sl
  403d56:	4c24      	ldr	r4, [pc, #144]	; (403de8 <prvTimerTask+0x1f8>)
  403d58:	47a0      	blx	r4
							configASSERT( xResult );
  403d5a:	2800      	cmp	r0, #0
  403d5c:	d1a8      	bne.n	403cb0 <prvTimerTask+0xc0>
  403d5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d62:	b672      	cpsid	i
  403d64:	f383 8811 	msr	BASEPRI, r3
  403d68:	f3bf 8f6f 	isb	sy
  403d6c:	f3bf 8f4f 	dsb	sy
  403d70:	b662      	cpsie	i
  403d72:	e7fe      	b.n	403d72 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403d74:	9905      	ldr	r1, [sp, #20]
  403d76:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403d7a:	b131      	cbz	r1, 403d8a <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403d7c:	4603      	mov	r3, r0
  403d7e:	4602      	mov	r2, r0
  403d80:	4401      	add	r1, r0
  403d82:	4650      	mov	r0, sl
  403d84:	4c17      	ldr	r4, [pc, #92]	; (403de4 <prvTimerTask+0x1f4>)
  403d86:	47a0      	blx	r4
  403d88:	e792      	b.n	403cb0 <prvTimerTask+0xc0>
  403d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d8e:	b672      	cpsid	i
  403d90:	f383 8811 	msr	BASEPRI, r3
  403d94:	f3bf 8f6f 	isb	sy
  403d98:	f3bf 8f4f 	dsb	sy
  403d9c:	b662      	cpsie	i
  403d9e:	e7fe      	b.n	403d9e <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403da0:	4650      	mov	r0, sl
  403da2:	4b13      	ldr	r3, [pc, #76]	; (403df0 <prvTimerTask+0x200>)
  403da4:	4798      	blx	r3
  403da6:	e783      	b.n	403cb0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403da8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403daa:	a804      	add	r0, sp, #16
  403dac:	4b09      	ldr	r3, [pc, #36]	; (403dd4 <prvTimerTask+0x1e4>)
  403dae:	4798      	blx	r3
  403db0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403db2:	9b04      	ldr	r3, [sp, #16]
  403db4:	2b00      	cmp	r3, #0
  403db6:	f47f af78 	bne.w	403caa <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403dba:	4b0e      	ldr	r3, [pc, #56]	; (403df4 <prvTimerTask+0x204>)
  403dbc:	681b      	ldr	r3, [r3, #0]
  403dbe:	681a      	ldr	r2, [r3, #0]
  403dc0:	fab2 f282 	clz	r2, r2
  403dc4:	0952      	lsrs	r2, r2, #5
  403dc6:	2400      	movs	r4, #0
  403dc8:	e72d      	b.n	403c26 <prvTimerTask+0x36>
  403dca:	bf00      	nop
  403dcc:	2040c72c 	.word	0x2040c72c
  403dd0:	00403119 	.word	0x00403119
  403dd4:	00403b39 	.word	0x00403b39
  403dd8:	2040c760 	.word	0x2040c760
  403ddc:	00402d7d 	.word	0x00402d7d
  403de0:	00403281 	.word	0x00403281
  403de4:	004039a1 	.word	0x004039a1
  403de8:	00403ac9 	.word	0x00403ac9
  403dec:	00402b79 	.word	0x00402b79
  403df0:	004024ad 	.word	0x004024ad
  403df4:	2040c730 	.word	0x2040c730
  403df8:	e000ed04 	.word	0xe000ed04
  403dfc:	004020fd 	.word	0x004020fd

00403e00 <AFEC_pot_callback>:
	afec->AFEC_CSELR = afec_ch;
  403e00:	4b04      	ldr	r3, [pc, #16]	; (403e14 <AFEC_pot_callback+0x14>)
  403e02:	2208      	movs	r2, #8
  403e04:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403e06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 * \brief Called if stack overflow during execution
 */

static void AFEC_pot_callback(void)
{
	pot_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_POT_SENSOR);
  403e08:	4b03      	ldr	r3, [pc, #12]	; (403e18 <AFEC_pot_callback+0x18>)
  403e0a:	601a      	str	r2, [r3, #0]
	g1_is_conversion_done = true;
  403e0c:	2201      	movs	r2, #1
  403e0e:	4b03      	ldr	r3, [pc, #12]	; (403e1c <AFEC_pot_callback+0x1c>)
  403e10:	701a      	strb	r2, [r3, #0]
  403e12:	4770      	bx	lr
  403e14:	4003c000 	.word	0x4003c000
  403e18:	2040c884 	.word	0x2040c884
  403e1c:	2040c764 	.word	0x2040c764

00403e20 <task_semaf>:
			
		}
	}
}

void task_semaf(void){
  403e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e22:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403e24:	ac02      	add	r4, sp, #8
  403e26:	2300      	movs	r3, #0
  403e28:	f844 3d04 	str.w	r3, [r4, #-4]!
	const TickType_t xDelay = 4000 / portTICK_PERIOD_MS;
	printf("but_callback \n");
  403e2c:	4810      	ldr	r0, [pc, #64]	; (403e70 <task_semaf+0x50>)
  403e2e:	4d11      	ldr	r5, [pc, #68]	; (403e74 <task_semaf+0x54>)
  403e30:	47a8      	blx	r5
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  403e32:	4621      	mov	r1, r4
  403e34:	4b10      	ldr	r3, [pc, #64]	; (403e78 <task_semaf+0x58>)
  403e36:	6818      	ldr	r0, [r3, #0]
  403e38:	4b10      	ldr	r3, [pc, #64]	; (403e7c <task_semaf+0x5c>)
  403e3a:	4798      	blx	r3
	vTaskDelay(xDelay);
  403e3c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
  403e40:	4b0f      	ldr	r3, [pc, #60]	; (403e80 <task_semaf+0x60>)
  403e42:	4798      	blx	r3
	printf("semafaro tx \n");
  403e44:	480f      	ldr	r0, [pc, #60]	; (403e84 <task_semaf+0x64>)
  403e46:	47a8      	blx	r5
	
	while(1){
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		const TickType_t xDelay = 4000 / portTICK_PERIOD_MS;
		printf("but_callback \n");
  403e48:	4f09      	ldr	r7, [pc, #36]	; (403e70 <task_semaf+0x50>)
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  403e4a:	4e0b      	ldr	r6, [pc, #44]	; (403e78 <task_semaf+0x58>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403e4c:	ac02      	add	r4, sp, #8
  403e4e:	2300      	movs	r3, #0
  403e50:	f844 3d08 	str.w	r3, [r4, #-8]!
		printf("but_callback \n");
  403e54:	4638      	mov	r0, r7
  403e56:	47a8      	blx	r5
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  403e58:	4621      	mov	r1, r4
  403e5a:	6830      	ldr	r0, [r6, #0]
  403e5c:	4b07      	ldr	r3, [pc, #28]	; (403e7c <task_semaf+0x5c>)
  403e5e:	4798      	blx	r3
		vTaskDelay(xDelay);
  403e60:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
  403e64:	4b06      	ldr	r3, [pc, #24]	; (403e80 <task_semaf+0x60>)
  403e66:	4798      	blx	r3
		printf("semafaro tx \n");
  403e68:	4806      	ldr	r0, [pc, #24]	; (403e84 <task_semaf+0x64>)
  403e6a:	47a8      	blx	r5
  403e6c:	e7ee      	b.n	403e4c <task_semaf+0x2c>
  403e6e:	bf00      	nop
  403e70:	0040f11c 	.word	0x0040f11c
  403e74:	004046a1 	.word	0x004046a1
  403e78:	2040c870 	.word	0x2040c870
  403e7c:	00402a99 	.word	0x00402a99
  403e80:	004033a1 	.word	0x004033a1
  403e84:	0040f12c 	.word	0x0040f12c

00403e88 <task_temp>:
{
  403e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	xSemaphore = xSemaphoreCreateBinary();
  403e8a:	2203      	movs	r2, #3
  403e8c:	2100      	movs	r1, #0
  403e8e:	2001      	movs	r0, #1
  403e90:	4b12      	ldr	r3, [pc, #72]	; (403edc <task_temp+0x54>)
  403e92:	4798      	blx	r3
  403e94:	4b12      	ldr	r3, [pc, #72]	; (403ee0 <task_temp+0x58>)
  403e96:	6018      	str	r0, [r3, #0]
	if (xSemaphore == NULL)
  403e98:	b910      	cbnz	r0, 403ea0 <task_temp+0x18>
		printf("falha em criar o semaforo \n");
  403e9a:	4812      	ldr	r0, [pc, #72]	; (403ee4 <task_temp+0x5c>)
  403e9c:	4b12      	ldr	r3, [pc, #72]	; (403ee8 <task_temp+0x60>)
  403e9e:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphore, ( TickType_t ) 500) == pdTRUE ){
  403ea0:	4e0f      	ldr	r6, [pc, #60]	; (403ee0 <task_temp+0x58>)
  403ea2:	4d12      	ldr	r5, [pc, #72]	; (403eec <task_temp+0x64>)
	afec->AFEC_CR = AFEC_CR_START;
  403ea4:	4f12      	ldr	r7, [pc, #72]	; (403ef0 <task_temp+0x68>)
  403ea6:	2400      	movs	r4, #0
  403ea8:	4623      	mov	r3, r4
  403eaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403eae:	4621      	mov	r1, r4
  403eb0:	6830      	ldr	r0, [r6, #0]
  403eb2:	47a8      	blx	r5
  403eb4:	2801      	cmp	r0, #1
  403eb6:	d1f7      	bne.n	403ea8 <task_temp+0x20>
  403eb8:	2302      	movs	r3, #2
  403eba:	603b      	str	r3, [r7, #0]
			int temp = 100*pot_ul_value/4095;
  403ebc:	4b0d      	ldr	r3, [pc, #52]	; (403ef4 <task_temp+0x6c>)
  403ebe:	6819      	ldr	r1, [r3, #0]
  403ec0:	2364      	movs	r3, #100	; 0x64
  403ec2:	fb03 f301 	mul.w	r3, r3, r1
  403ec6:	490c      	ldr	r1, [pc, #48]	; (403ef8 <task_temp+0x70>)
  403ec8:	fba1 2103 	umull	r2, r1, r1, r3
  403ecc:	1a5b      	subs	r3, r3, r1
  403ece:	eb01 0153 	add.w	r1, r1, r3, lsr #1
			printf("Temperatura %d\n", temp);
  403ed2:	0ac9      	lsrs	r1, r1, #11
  403ed4:	4809      	ldr	r0, [pc, #36]	; (403efc <task_temp+0x74>)
  403ed6:	4b04      	ldr	r3, [pc, #16]	; (403ee8 <task_temp+0x60>)
  403ed8:	4798      	blx	r3
  403eda:	e7e4      	b.n	403ea6 <task_temp+0x1e>
  403edc:	00402739 	.word	0x00402739
  403ee0:	2040c870 	.word	0x2040c870
  403ee4:	0040f13c 	.word	0x0040f13c
  403ee8:	004046a1 	.word	0x004046a1
  403eec:	00402b79 	.word	0x00402b79
  403ef0:	4003c000 	.word	0x4003c000
  403ef4:	2040c884 	.word	0x2040c884
  403ef8:	00100101 	.word	0x00100101
  403efc:	0040f158 	.word	0x0040f158

00403f00 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403f00:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f02:	b083      	sub	sp, #12
  403f04:	4605      	mov	r5, r0
  403f06:	460c      	mov	r4, r1
	uint32_t val = 0;
  403f08:	2300      	movs	r3, #0
  403f0a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403f0c:	4b2a      	ldr	r3, [pc, #168]	; (403fb8 <usart_serial_getchar+0xb8>)
  403f0e:	4298      	cmp	r0, r3
  403f10:	d013      	beq.n	403f3a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403f12:	4b2a      	ldr	r3, [pc, #168]	; (403fbc <usart_serial_getchar+0xbc>)
  403f14:	4298      	cmp	r0, r3
  403f16:	d018      	beq.n	403f4a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403f18:	4b29      	ldr	r3, [pc, #164]	; (403fc0 <usart_serial_getchar+0xc0>)
  403f1a:	4298      	cmp	r0, r3
  403f1c:	d01d      	beq.n	403f5a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403f1e:	4b29      	ldr	r3, [pc, #164]	; (403fc4 <usart_serial_getchar+0xc4>)
  403f20:	429d      	cmp	r5, r3
  403f22:	d022      	beq.n	403f6a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403f24:	4b28      	ldr	r3, [pc, #160]	; (403fc8 <usart_serial_getchar+0xc8>)
  403f26:	429d      	cmp	r5, r3
  403f28:	d027      	beq.n	403f7a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403f2a:	4b28      	ldr	r3, [pc, #160]	; (403fcc <usart_serial_getchar+0xcc>)
  403f2c:	429d      	cmp	r5, r3
  403f2e:	d02e      	beq.n	403f8e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403f30:	4b27      	ldr	r3, [pc, #156]	; (403fd0 <usart_serial_getchar+0xd0>)
  403f32:	429d      	cmp	r5, r3
  403f34:	d035      	beq.n	403fa2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403f36:	b003      	add	sp, #12
  403f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403f3a:	461f      	mov	r7, r3
  403f3c:	4e25      	ldr	r6, [pc, #148]	; (403fd4 <usart_serial_getchar+0xd4>)
  403f3e:	4621      	mov	r1, r4
  403f40:	4638      	mov	r0, r7
  403f42:	47b0      	blx	r6
  403f44:	2800      	cmp	r0, #0
  403f46:	d1fa      	bne.n	403f3e <usart_serial_getchar+0x3e>
  403f48:	e7e9      	b.n	403f1e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403f4a:	461f      	mov	r7, r3
  403f4c:	4e21      	ldr	r6, [pc, #132]	; (403fd4 <usart_serial_getchar+0xd4>)
  403f4e:	4621      	mov	r1, r4
  403f50:	4638      	mov	r0, r7
  403f52:	47b0      	blx	r6
  403f54:	2800      	cmp	r0, #0
  403f56:	d1fa      	bne.n	403f4e <usart_serial_getchar+0x4e>
  403f58:	e7e4      	b.n	403f24 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403f5a:	461f      	mov	r7, r3
  403f5c:	4e1d      	ldr	r6, [pc, #116]	; (403fd4 <usart_serial_getchar+0xd4>)
  403f5e:	4621      	mov	r1, r4
  403f60:	4638      	mov	r0, r7
  403f62:	47b0      	blx	r6
  403f64:	2800      	cmp	r0, #0
  403f66:	d1fa      	bne.n	403f5e <usart_serial_getchar+0x5e>
  403f68:	e7df      	b.n	403f2a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403f6a:	461f      	mov	r7, r3
  403f6c:	4e19      	ldr	r6, [pc, #100]	; (403fd4 <usart_serial_getchar+0xd4>)
  403f6e:	4621      	mov	r1, r4
  403f70:	4638      	mov	r0, r7
  403f72:	47b0      	blx	r6
  403f74:	2800      	cmp	r0, #0
  403f76:	d1fa      	bne.n	403f6e <usart_serial_getchar+0x6e>
  403f78:	e7da      	b.n	403f30 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403f7a:	461e      	mov	r6, r3
  403f7c:	4d16      	ldr	r5, [pc, #88]	; (403fd8 <usart_serial_getchar+0xd8>)
  403f7e:	a901      	add	r1, sp, #4
  403f80:	4630      	mov	r0, r6
  403f82:	47a8      	blx	r5
  403f84:	2800      	cmp	r0, #0
  403f86:	d1fa      	bne.n	403f7e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403f88:	9b01      	ldr	r3, [sp, #4]
  403f8a:	7023      	strb	r3, [r4, #0]
  403f8c:	e7d3      	b.n	403f36 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403f8e:	461e      	mov	r6, r3
  403f90:	4d11      	ldr	r5, [pc, #68]	; (403fd8 <usart_serial_getchar+0xd8>)
  403f92:	a901      	add	r1, sp, #4
  403f94:	4630      	mov	r0, r6
  403f96:	47a8      	blx	r5
  403f98:	2800      	cmp	r0, #0
  403f9a:	d1fa      	bne.n	403f92 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403f9c:	9b01      	ldr	r3, [sp, #4]
  403f9e:	7023      	strb	r3, [r4, #0]
  403fa0:	e7c9      	b.n	403f36 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403fa2:	461e      	mov	r6, r3
  403fa4:	4d0c      	ldr	r5, [pc, #48]	; (403fd8 <usart_serial_getchar+0xd8>)
  403fa6:	a901      	add	r1, sp, #4
  403fa8:	4630      	mov	r0, r6
  403faa:	47a8      	blx	r5
  403fac:	2800      	cmp	r0, #0
  403fae:	d1fa      	bne.n	403fa6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403fb0:	9b01      	ldr	r3, [sp, #4]
  403fb2:	7023      	strb	r3, [r4, #0]
}
  403fb4:	e7bf      	b.n	403f36 <usart_serial_getchar+0x36>
  403fb6:	bf00      	nop
  403fb8:	400e0800 	.word	0x400e0800
  403fbc:	400e0a00 	.word	0x400e0a00
  403fc0:	400e1a00 	.word	0x400e1a00
  403fc4:	400e1c00 	.word	0x400e1c00
  403fc8:	40024000 	.word	0x40024000
  403fcc:	40028000 	.word	0x40028000
  403fd0:	4002c000 	.word	0x4002c000
  403fd4:	00401cbf 	.word	0x00401cbf
  403fd8:	00401dcb 	.word	0x00401dcb

00403fdc <usart_serial_putchar>:
{
  403fdc:	b570      	push	{r4, r5, r6, lr}
  403fde:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403fe0:	4b2a      	ldr	r3, [pc, #168]	; (40408c <usart_serial_putchar+0xb0>)
  403fe2:	4298      	cmp	r0, r3
  403fe4:	d013      	beq.n	40400e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403fe6:	4b2a      	ldr	r3, [pc, #168]	; (404090 <usart_serial_putchar+0xb4>)
  403fe8:	4298      	cmp	r0, r3
  403fea:	d019      	beq.n	404020 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403fec:	4b29      	ldr	r3, [pc, #164]	; (404094 <usart_serial_putchar+0xb8>)
  403fee:	4298      	cmp	r0, r3
  403ff0:	d01f      	beq.n	404032 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403ff2:	4b29      	ldr	r3, [pc, #164]	; (404098 <usart_serial_putchar+0xbc>)
  403ff4:	4298      	cmp	r0, r3
  403ff6:	d025      	beq.n	404044 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403ff8:	4b28      	ldr	r3, [pc, #160]	; (40409c <usart_serial_putchar+0xc0>)
  403ffa:	4298      	cmp	r0, r3
  403ffc:	d02b      	beq.n	404056 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403ffe:	4b28      	ldr	r3, [pc, #160]	; (4040a0 <usart_serial_putchar+0xc4>)
  404000:	4298      	cmp	r0, r3
  404002:	d031      	beq.n	404068 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  404004:	4b27      	ldr	r3, [pc, #156]	; (4040a4 <usart_serial_putchar+0xc8>)
  404006:	4298      	cmp	r0, r3
  404008:	d037      	beq.n	40407a <usart_serial_putchar+0x9e>
	return 0;
  40400a:	2000      	movs	r0, #0
}
  40400c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40400e:	461e      	mov	r6, r3
  404010:	4d25      	ldr	r5, [pc, #148]	; (4040a8 <usart_serial_putchar+0xcc>)
  404012:	4621      	mov	r1, r4
  404014:	4630      	mov	r0, r6
  404016:	47a8      	blx	r5
  404018:	2800      	cmp	r0, #0
  40401a:	d1fa      	bne.n	404012 <usart_serial_putchar+0x36>
		return 1;
  40401c:	2001      	movs	r0, #1
  40401e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404020:	461e      	mov	r6, r3
  404022:	4d21      	ldr	r5, [pc, #132]	; (4040a8 <usart_serial_putchar+0xcc>)
  404024:	4621      	mov	r1, r4
  404026:	4630      	mov	r0, r6
  404028:	47a8      	blx	r5
  40402a:	2800      	cmp	r0, #0
  40402c:	d1fa      	bne.n	404024 <usart_serial_putchar+0x48>
		return 1;
  40402e:	2001      	movs	r0, #1
  404030:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404032:	461e      	mov	r6, r3
  404034:	4d1c      	ldr	r5, [pc, #112]	; (4040a8 <usart_serial_putchar+0xcc>)
  404036:	4621      	mov	r1, r4
  404038:	4630      	mov	r0, r6
  40403a:	47a8      	blx	r5
  40403c:	2800      	cmp	r0, #0
  40403e:	d1fa      	bne.n	404036 <usart_serial_putchar+0x5a>
		return 1;
  404040:	2001      	movs	r0, #1
  404042:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404044:	461e      	mov	r6, r3
  404046:	4d18      	ldr	r5, [pc, #96]	; (4040a8 <usart_serial_putchar+0xcc>)
  404048:	4621      	mov	r1, r4
  40404a:	4630      	mov	r0, r6
  40404c:	47a8      	blx	r5
  40404e:	2800      	cmp	r0, #0
  404050:	d1fa      	bne.n	404048 <usart_serial_putchar+0x6c>
		return 1;
  404052:	2001      	movs	r0, #1
  404054:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404056:	461e      	mov	r6, r3
  404058:	4d14      	ldr	r5, [pc, #80]	; (4040ac <usart_serial_putchar+0xd0>)
  40405a:	4621      	mov	r1, r4
  40405c:	4630      	mov	r0, r6
  40405e:	47a8      	blx	r5
  404060:	2800      	cmp	r0, #0
  404062:	d1fa      	bne.n	40405a <usart_serial_putchar+0x7e>
		return 1;
  404064:	2001      	movs	r0, #1
  404066:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404068:	461e      	mov	r6, r3
  40406a:	4d10      	ldr	r5, [pc, #64]	; (4040ac <usart_serial_putchar+0xd0>)
  40406c:	4621      	mov	r1, r4
  40406e:	4630      	mov	r0, r6
  404070:	47a8      	blx	r5
  404072:	2800      	cmp	r0, #0
  404074:	d1fa      	bne.n	40406c <usart_serial_putchar+0x90>
		return 1;
  404076:	2001      	movs	r0, #1
  404078:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40407a:	461e      	mov	r6, r3
  40407c:	4d0b      	ldr	r5, [pc, #44]	; (4040ac <usart_serial_putchar+0xd0>)
  40407e:	4621      	mov	r1, r4
  404080:	4630      	mov	r0, r6
  404082:	47a8      	blx	r5
  404084:	2800      	cmp	r0, #0
  404086:	d1fa      	bne.n	40407e <usart_serial_putchar+0xa2>
		return 1;
  404088:	2001      	movs	r0, #1
  40408a:	bd70      	pop	{r4, r5, r6, pc}
  40408c:	400e0800 	.word	0x400e0800
  404090:	400e0a00 	.word	0x400e0a00
  404094:	400e1a00 	.word	0x400e1a00
  404098:	400e1c00 	.word	0x400e1c00
  40409c:	40024000 	.word	0x40024000
  4040a0:	40028000 	.word	0x40028000
  4040a4:	4002c000 	.word	0x4002c000
  4040a8:	00401cad 	.word	0x00401cad
  4040ac:	00401db5 	.word	0x00401db5

004040b0 <draw_tela_inicial_logos>:
void draw_tela_inicial_logos(tImage ter, tImage ar){
  4040b0:	b082      	sub	sp, #8
  4040b2:	b510      	push	{r4, lr}
  4040b4:	b086      	sub	sp, #24
  4040b6:	ac06      	add	r4, sp, #24
  4040b8:	e904 0007 	stmdb	r4, {r0, r1, r2}
  4040bc:	9309      	str	r3, [sp, #36]	; 0x24
	ili9488_draw_pixmap(250,
  4040be:	9b03      	ldr	r3, [sp, #12]
  4040c0:	9300      	str	r3, [sp, #0]
  4040c2:	234f      	movs	r3, #79	; 0x4f
  4040c4:	2236      	movs	r2, #54	; 0x36
  4040c6:	2114      	movs	r1, #20
  4040c8:	20fa      	movs	r0, #250	; 0xfa
  4040ca:	4c07      	ldr	r4, [pc, #28]	; (4040e8 <draw_tela_inicial_logos+0x38>)
  4040cc:	47a0      	blx	r4
	ili9488_draw_pixmap(100,
  4040ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4040d0:	9300      	str	r3, [sp, #0]
  4040d2:	2346      	movs	r3, #70	; 0x46
  4040d4:	2258      	movs	r2, #88	; 0x58
  4040d6:	2114      	movs	r1, #20
  4040d8:	2064      	movs	r0, #100	; 0x64
  4040da:	47a0      	blx	r4
}
  4040dc:	b006      	add	sp, #24
  4040de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4040e2:	b002      	add	sp, #8
  4040e4:	4770      	bx	lr
  4040e6:	bf00      	nop
  4040e8:	004013a1 	.word	0x004013a1

004040ec <vApplicationStackOverflowHook>:
{
  4040ec:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4040ee:	460a      	mov	r2, r1
  4040f0:	4601      	mov	r1, r0
  4040f2:	4802      	ldr	r0, [pc, #8]	; (4040fc <vApplicationStackOverflowHook+0x10>)
  4040f4:	4b02      	ldr	r3, [pc, #8]	; (404100 <vApplicationStackOverflowHook+0x14>)
  4040f6:	4798      	blx	r3
  4040f8:	e7fe      	b.n	4040f8 <vApplicationStackOverflowHook+0xc>
  4040fa:	bf00      	nop
  4040fc:	0040f174 	.word	0x0040f174
  404100:	004046a1 	.word	0x004046a1

00404104 <vApplicationTickHook>:
{
  404104:	4770      	bx	lr

00404106 <vApplicationMallocFailedHook>:
  404106:	f04f 0380 	mov.w	r3, #128	; 0x80
  40410a:	b672      	cpsid	i
  40410c:	f383 8811 	msr	BASEPRI, r3
  404110:	f3bf 8f6f 	isb	sy
  404114:	f3bf 8f4f 	dsb	sy
  404118:	b662      	cpsie	i
  40411a:	e7fe      	b.n	40411a <vApplicationMallocFailedHook+0x14>

0040411c <draw_screen>:
void draw_screen(void) {
  40411c:	b510      	push	{r4, lr}
  40411e:	b082      	sub	sp, #8
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  404120:	480b      	ldr	r0, [pc, #44]	; (404150 <draw_screen+0x34>)
  404122:	4b0c      	ldr	r3, [pc, #48]	; (404154 <draw_screen+0x38>)
  404124:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  404126:	f240 13df 	movw	r3, #479	; 0x1df
  40412a:	f240 123f 	movw	r2, #319	; 0x13f
  40412e:	2100      	movs	r1, #0
  404130:	4608      	mov	r0, r1
  404132:	4c09      	ldr	r4, [pc, #36]	; (404158 <draw_screen+0x3c>)
  404134:	47a0      	blx	r4
	draw_tela_inicial_logos(termometro, ar);
  404136:	4b09      	ldr	r3, [pc, #36]	; (40415c <draw_screen+0x40>)
  404138:	4a09      	ldr	r2, [pc, #36]	; (404160 <draw_screen+0x44>)
  40413a:	1d19      	adds	r1, r3, #4
  40413c:	c903      	ldmia	r1, {r0, r1}
  40413e:	e88d 0003 	stmia.w	sp, {r0, r1}
  404142:	681b      	ldr	r3, [r3, #0]
  404144:	ca07      	ldmia	r2, {r0, r1, r2}
  404146:	4c07      	ldr	r4, [pc, #28]	; (404164 <draw_screen+0x48>)
  404148:	47a0      	blx	r4
}
  40414a:	b002      	add	sp, #8
  40414c:	bd10      	pop	{r4, pc}
  40414e:	bf00      	nop
  404150:	00fcfcfc 	.word	0x00fcfcfc
  404154:	00401095 	.word	0x00401095
  404158:	004012e5 	.word	0x004012e5
  40415c:	00407650 	.word	0x00407650
  404160:	0040f168 	.word	0x0040f168
  404164:	004040b1 	.word	0x004040b1

00404168 <draw_button>:
void draw_button(uint32_t clicked) {
  404168:	b538      	push	{r3, r4, r5, lr}
	if(clicked == last_state) return;
  40416a:	4b13      	ldr	r3, [pc, #76]	; (4041b8 <draw_button+0x50>)
  40416c:	681b      	ldr	r3, [r3, #0]
  40416e:	4283      	cmp	r3, r0
  404170:	d016      	beq.n	4041a0 <draw_button+0x38>
  404172:	4604      	mov	r4, r0
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  404174:	2000      	movs	r0, #0
  404176:	4b11      	ldr	r3, [pc, #68]	; (4041bc <draw_button+0x54>)
  404178:	4798      	blx	r3
	ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  40417a:	f240 133b 	movw	r3, #315	; 0x13b
  40417e:	22dc      	movs	r2, #220	; 0xdc
  404180:	21a5      	movs	r1, #165	; 0xa5
  404182:	2064      	movs	r0, #100	; 0x64
  404184:	4d0e      	ldr	r5, [pc, #56]	; (4041c0 <draw_button+0x58>)
  404186:	47a8      	blx	r5
	if(clicked) {
  404188:	b15c      	cbz	r4, 4041a2 <draw_button+0x3a>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40418a:	480e      	ldr	r0, [pc, #56]	; (4041c4 <draw_button+0x5c>)
  40418c:	4b0b      	ldr	r3, [pc, #44]	; (4041bc <draw_button+0x54>)
  40418e:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  404190:	f240 1339 	movw	r3, #313	; 0x139
  404194:	22da      	movs	r2, #218	; 0xda
  404196:	21f2      	movs	r1, #242	; 0xf2
  404198:	2066      	movs	r0, #102	; 0x66
  40419a:	47a8      	blx	r5
	last_state = clicked;
  40419c:	4b06      	ldr	r3, [pc, #24]	; (4041b8 <draw_button+0x50>)
  40419e:	601c      	str	r4, [r3, #0]
  4041a0:	bd38      	pop	{r3, r4, r5, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4041a2:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  4041a6:	4b05      	ldr	r3, [pc, #20]	; (4041bc <draw_button+0x54>)
  4041a8:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  4041aa:	23ee      	movs	r3, #238	; 0xee
  4041ac:	22da      	movs	r2, #218	; 0xda
  4041ae:	21a7      	movs	r1, #167	; 0xa7
  4041b0:	2066      	movs	r0, #102	; 0x66
  4041b2:	4d03      	ldr	r5, [pc, #12]	; (4041c0 <draw_button+0x58>)
  4041b4:	47a8      	blx	r5
  4041b6:	e7f1      	b.n	40419c <draw_button+0x34>
  4041b8:	20400014 	.word	0x20400014
  4041bc:	00401095 	.word	0x00401095
  4041c0:	004012e5 	.word	0x004012e5
  4041c4:	00fc6044 	.word	0x00fc6044

004041c8 <update_screen>:
	if(tx >= BUTTON_X-BUTTON_W/2 && tx <= BUTTON_X + BUTTON_W/2) {
  4041c8:	3864      	subs	r0, #100	; 0x64
  4041ca:	2878      	cmp	r0, #120	; 0x78
  4041cc:	d810      	bhi.n	4041f0 <update_screen+0x28>
void update_screen(uint32_t tx, uint32_t ty) {
  4041ce:	b508      	push	{r3, lr}
		if(ty >= BUTTON_Y-BUTTON_H/2 && ty <= BUTTON_Y) {
  4041d0:	f1a1 03a5 	sub.w	r3, r1, #165	; 0xa5
  4041d4:	2b4b      	cmp	r3, #75	; 0x4b
  4041d6:	d903      	bls.n	4041e0 <update_screen+0x18>
		} else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
  4041d8:	39f1      	subs	r1, #241	; 0xf1
  4041da:	2949      	cmp	r1, #73	; 0x49
  4041dc:	d904      	bls.n	4041e8 <update_screen+0x20>
  4041de:	bd08      	pop	{r3, pc}
			draw_button(1);
  4041e0:	2001      	movs	r0, #1
  4041e2:	4b04      	ldr	r3, [pc, #16]	; (4041f4 <update_screen+0x2c>)
  4041e4:	4798      	blx	r3
  4041e6:	bd08      	pop	{r3, pc}
			draw_button(0);
  4041e8:	2000      	movs	r0, #0
  4041ea:	4b02      	ldr	r3, [pc, #8]	; (4041f4 <update_screen+0x2c>)
  4041ec:	4798      	blx	r3
}
  4041ee:	e7f6      	b.n	4041de <update_screen+0x16>
  4041f0:	4770      	bx	lr
  4041f2:	bf00      	nop
  4041f4:	00404169 	.word	0x00404169

004041f8 <task_lcd>:
	}
	
}


void task_lcd(void){
  4041f8:	b500      	push	{lr}
  4041fa:	b083      	sub	sp, #12
  xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  4041fc:	2200      	movs	r2, #0
  4041fe:	2108      	movs	r1, #8
  404200:	200a      	movs	r0, #10
  404202:	4b14      	ldr	r3, [pc, #80]	; (404254 <task_lcd+0x5c>)
  404204:	4798      	blx	r3
  404206:	4b14      	ldr	r3, [pc, #80]	; (404258 <task_lcd+0x60>)
  404208:	6018      	str	r0, [r3, #0]
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  40420a:	4814      	ldr	r0, [pc, #80]	; (40425c <task_lcd+0x64>)
  40420c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  404210:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  404212:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  404216:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  404218:	4b11      	ldr	r3, [pc, #68]	; (404260 <task_lcd+0x68>)
  40421a:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  40421c:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  40421e:	4b11      	ldr	r3, [pc, #68]	; (404264 <task_lcd+0x6c>)
  404220:	4798      	blx	r3
	configure_lcd();
  
  draw_screen();
  404222:	4b11      	ldr	r3, [pc, #68]	; (404268 <task_lcd+0x70>)
  404224:	4798      	blx	r3
  draw_button(0);
  404226:	2000      	movs	r0, #0
  404228:	4b10      	ldr	r3, [pc, #64]	; (40426c <task_lcd+0x74>)
  40422a:	4798      	blx	r3
  touchData touch;
    
  while (true) {  
     if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  40422c:	4d0a      	ldr	r5, [pc, #40]	; (404258 <task_lcd+0x60>)
  40422e:	4c10      	ldr	r4, [pc, #64]	; (404270 <task_lcd+0x78>)
       update_screen(touch.x, touch.y);
  404230:	4e10      	ldr	r6, [pc, #64]	; (404274 <task_lcd+0x7c>)
     if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404232:	2300      	movs	r3, #0
  404234:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  404238:	4669      	mov	r1, sp
  40423a:	6828      	ldr	r0, [r5, #0]
  40423c:	47a0      	blx	r4
  40423e:	2800      	cmp	r0, #0
  404240:	d0f7      	beq.n	404232 <task_lcd+0x3a>
       update_screen(touch.x, touch.y);
  404242:	9901      	ldr	r1, [sp, #4]
  404244:	9800      	ldr	r0, [sp, #0]
  404246:	47b0      	blx	r6
       printf("x:%d y:%d\n", touch.x, touch.y);
  404248:	9a01      	ldr	r2, [sp, #4]
  40424a:	9900      	ldr	r1, [sp, #0]
  40424c:	480a      	ldr	r0, [pc, #40]	; (404278 <task_lcd+0x80>)
  40424e:	4b0b      	ldr	r3, [pc, #44]	; (40427c <task_lcd+0x84>)
  404250:	4798      	blx	r3
  404252:	e7ee      	b.n	404232 <task_lcd+0x3a>
  404254:	00402739 	.word	0x00402739
  404258:	2040c888 	.word	0x2040c888
  40425c:	2040c874 	.word	0x2040c874
  404260:	00fcfcfc 	.word	0x00fcfcfc
  404264:	00401121 	.word	0x00401121
  404268:	0040411d 	.word	0x0040411d
  40426c:	00404169 	.word	0x00404169
  404270:	00402b79 	.word	0x00402b79
  404274:	004041c9 	.word	0x004041c9
  404278:	0040f110 	.word	0x0040f110
  40427c:	004046a1 	.word	0x004046a1

00404280 <mxt_handler>:
{
  404280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404284:	b084      	sub	sp, #16
  404286:	4605      	mov	r5, r0
  404288:	4689      	mov	r9, r1
  40428a:	4690      	mov	r8, r2
  uint first = 0;
  40428c:	f04f 0a00 	mov.w	sl, #0
	uint8_t i = 0; /* Iterator */
  404290:	4654      	mov	r4, sl
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  404292:	4f15      	ldr	r7, [pc, #84]	; (4042e8 <mxt_handler+0x68>)
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  404294:	4e15      	ldr	r6, [pc, #84]	; (4042ec <mxt_handler+0x6c>)
  404296:	e008      	b.n	4042aa <mxt_handler+0x2a>
		i++;
  404298:	3401      	adds	r4, #1
  40429a:	b2e4      	uxtb	r4, r4
  40429c:	f04f 0a01 	mov.w	sl, #1
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  4042a0:	4628      	mov	r0, r5
  4042a2:	47b0      	blx	r6
  4042a4:	2c02      	cmp	r4, #2
  4042a6:	d81b      	bhi.n	4042e0 <mxt_handler+0x60>
  4042a8:	b1d0      	cbz	r0, 4042e0 <mxt_handler+0x60>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4042aa:	a901      	add	r1, sp, #4
  4042ac:	4628      	mov	r0, r5
  4042ae:	47b8      	blx	r7
  4042b0:	2800      	cmp	r0, #0
  4042b2:	d1f5      	bne.n	4042a0 <mxt_handler+0x20>
    if(first == 0 ){
  4042b4:	f1ba 0f00 	cmp.w	sl, #0
  4042b8:	d1ee      	bne.n	404298 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  4042ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  4042be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4042c2:	f3c3 1393 	ubfx	r3, r3, #6, #20
  4042c6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  4042ca:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  4042ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  4042d2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4042d6:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  4042da:	f8c8 3000 	str.w	r3, [r8]
  4042de:	e7db      	b.n	404298 <mxt_handler+0x18>
}
  4042e0:	b004      	add	sp, #16
  4042e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042e6:	bf00      	nop
  4042e8:	004008b5 	.word	0x004008b5
  4042ec:	00400845 	.word	0x00400845

004042f0 <task_mxt>:
void task_mxt(void){
  4042f0:	b580      	push	{r7, lr}
  4042f2:	b0a6      	sub	sp, #152	; 0x98
	uint8_t t8_object[] = {
  4042f4:	4c51      	ldr	r4, [pc, #324]	; (40443c <task_mxt+0x14c>)
  4042f6:	ab04      	add	r3, sp, #16
  4042f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  4042fc:	c303      	stmia	r3!, {r0, r1}
  4042fe:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  404300:	ad13      	add	r5, sp, #76	; 0x4c
  404302:	f104 060c 	add.w	r6, r4, #12
  404306:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  404308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40430a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40430c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40430e:	6833      	ldr	r3, [r6, #0]
  404310:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  404312:	ab01      	add	r3, sp, #4
  404314:	f104 0230 	add.w	r2, r4, #48	; 0x30
  404318:	ca07      	ldmia	r2, {r0, r1, r2}
  40431a:	c303      	stmia	r3!, {r0, r1}
  40431c:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  40431e:	ad0a      	add	r5, sp, #40	; 0x28
  404320:	343c      	adds	r4, #60	; 0x3c
  404322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  404324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  404326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  404328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40432a:	6823      	ldr	r3, [r4, #0]
  40432c:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  40432e:	2400      	movs	r4, #0
  404330:	9409      	str	r4, [sp, #36]	; 0x24
  404332:	4b43      	ldr	r3, [pc, #268]	; (404440 <task_mxt+0x150>)
  404334:	9308      	str	r3, [sp, #32]
  404336:	264a      	movs	r6, #74	; 0x4a
  404338:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40433c:	4b41      	ldr	r3, [pc, #260]	; (404444 <task_mxt+0x154>)
  40433e:	9307      	str	r3, [sp, #28]
  404340:	2013      	movs	r0, #19
  404342:	4b41      	ldr	r3, [pc, #260]	; (404448 <task_mxt+0x158>)
  404344:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  404346:	4d41      	ldr	r5, [pc, #260]	; (40444c <task_mxt+0x15c>)
  404348:	a907      	add	r1, sp, #28
  40434a:	4628      	mov	r0, r5
  40434c:	4b40      	ldr	r3, [pc, #256]	; (404450 <task_mxt+0x160>)
  40434e:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  404350:	2302      	movs	r3, #2
  404352:	4632      	mov	r2, r6
  404354:	4629      	mov	r1, r5
  404356:	a81e      	add	r0, sp, #120	; 0x78
  404358:	4d3e      	ldr	r5, [pc, #248]	; (404454 <task_mxt+0x164>)
  40435a:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  40435c:	4622      	mov	r2, r4
  40435e:	2106      	movs	r1, #6
  404360:	a81e      	add	r0, sp, #120	; 0x78
  404362:	4d3d      	ldr	r5, [pc, #244]	; (404458 <task_mxt+0x168>)
  404364:	47a8      	blx	r5
  404366:	2201      	movs	r2, #1
  404368:	4601      	mov	r1, r0
  40436a:	a81e      	add	r0, sp, #120	; 0x78
  40436c:	4e3b      	ldr	r6, [pc, #236]	; (40445c <task_mxt+0x16c>)
  40436e:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  404370:	483b      	ldr	r0, [pc, #236]	; (404460 <task_mxt+0x170>)
  404372:	4b3c      	ldr	r3, [pc, #240]	; (404464 <task_mxt+0x174>)
  404374:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  404376:	4622      	mov	r2, r4
  404378:	2107      	movs	r1, #7
  40437a:	a81e      	add	r0, sp, #120	; 0x78
  40437c:	47a8      	blx	r5
  40437e:	2220      	movs	r2, #32
  404380:	4601      	mov	r1, r0
  404382:	a81e      	add	r0, sp, #120	; 0x78
  404384:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  404386:	4622      	mov	r2, r4
  404388:	2107      	movs	r1, #7
  40438a:	a81e      	add	r0, sp, #120	; 0x78
  40438c:	47a8      	blx	r5
  40438e:	1c41      	adds	r1, r0, #1
  404390:	2210      	movs	r2, #16
  404392:	b289      	uxth	r1, r1
  404394:	a81e      	add	r0, sp, #120	; 0x78
  404396:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  404398:	4622      	mov	r2, r4
  40439a:	2107      	movs	r1, #7
  40439c:	a81e      	add	r0, sp, #120	; 0x78
  40439e:	47a8      	blx	r5
  4043a0:	1c81      	adds	r1, r0, #2
  4043a2:	224b      	movs	r2, #75	; 0x4b
  4043a4:	b289      	uxth	r1, r1
  4043a6:	a81e      	add	r0, sp, #120	; 0x78
  4043a8:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  4043aa:	4622      	mov	r2, r4
  4043ac:	2107      	movs	r1, #7
  4043ae:	a81e      	add	r0, sp, #120	; 0x78
  4043b0:	47a8      	blx	r5
  4043b2:	1cc1      	adds	r1, r0, #3
  4043b4:	2284      	movs	r2, #132	; 0x84
  4043b6:	b289      	uxth	r1, r1
  4043b8:	a81e      	add	r0, sp, #120	; 0x78
  4043ba:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  4043bc:	4622      	mov	r2, r4
  4043be:	2108      	movs	r1, #8
  4043c0:	a81e      	add	r0, sp, #120	; 0x78
  4043c2:	47a8      	blx	r5
  4043c4:	aa04      	add	r2, sp, #16
  4043c6:	4601      	mov	r1, r0
  4043c8:	a81e      	add	r0, sp, #120	; 0x78
  4043ca:	4f27      	ldr	r7, [pc, #156]	; (404468 <task_mxt+0x178>)
  4043cc:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  4043ce:	4622      	mov	r2, r4
  4043d0:	2109      	movs	r1, #9
  4043d2:	a81e      	add	r0, sp, #120	; 0x78
  4043d4:	47a8      	blx	r5
  4043d6:	aa13      	add	r2, sp, #76	; 0x4c
  4043d8:	4601      	mov	r1, r0
  4043da:	a81e      	add	r0, sp, #120	; 0x78
  4043dc:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  4043de:	4622      	mov	r2, r4
  4043e0:	212e      	movs	r1, #46	; 0x2e
  4043e2:	a81e      	add	r0, sp, #120	; 0x78
  4043e4:	47a8      	blx	r5
  4043e6:	aa01      	add	r2, sp, #4
  4043e8:	4601      	mov	r1, r0
  4043ea:	a81e      	add	r0, sp, #120	; 0x78
  4043ec:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  4043ee:	4622      	mov	r2, r4
  4043f0:	2138      	movs	r1, #56	; 0x38
  4043f2:	a81e      	add	r0, sp, #120	; 0x78
  4043f4:	47a8      	blx	r5
  4043f6:	aa0a      	add	r2, sp, #40	; 0x28
  4043f8:	4601      	mov	r1, r0
  4043fa:	a81e      	add	r0, sp, #120	; 0x78
  4043fc:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  4043fe:	4622      	mov	r2, r4
  404400:	2106      	movs	r1, #6
  404402:	a81e      	add	r0, sp, #120	; 0x78
  404404:	47a8      	blx	r5
  404406:	1c81      	adds	r1, r0, #2
  404408:	2201      	movs	r2, #1
  40440a:	b289      	uxth	r1, r1
  40440c:	a81e      	add	r0, sp, #120	; 0x78
  40440e:	47b0      	blx	r6
		  if (mxt_is_message_pending(&device)) {
  404410:	4c16      	ldr	r4, [pc, #88]	; (40446c <task_mxt+0x17c>)
		  	mxt_handler(&device, &touch.x, &touch.y);
  404412:	4f17      	ldr	r7, [pc, #92]	; (404470 <task_mxt+0x180>)
        xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  404414:	4e17      	ldr	r6, [pc, #92]	; (404474 <task_mxt+0x184>)
  404416:	e002      	b.n	40441e <task_mxt+0x12e>
     vTaskDelay(100);
  404418:	2064      	movs	r0, #100	; 0x64
  40441a:	4b17      	ldr	r3, [pc, #92]	; (404478 <task_mxt+0x188>)
  40441c:	4798      	blx	r3
		  if (mxt_is_message_pending(&device)) {
  40441e:	a81e      	add	r0, sp, #120	; 0x78
  404420:	47a0      	blx	r4
  404422:	2800      	cmp	r0, #0
  404424:	d0f8      	beq.n	404418 <task_mxt+0x128>
		  	mxt_handler(&device, &touch.x, &touch.y);
  404426:	aa1d      	add	r2, sp, #116	; 0x74
  404428:	a91c      	add	r1, sp, #112	; 0x70
  40442a:	a81e      	add	r0, sp, #120	; 0x78
  40442c:	47b8      	blx	r7
        xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  40442e:	2300      	movs	r3, #0
  404430:	461a      	mov	r2, r3
  404432:	a91c      	add	r1, sp, #112	; 0x70
  404434:	6830      	ldr	r0, [r6, #0]
  404436:	4d11      	ldr	r5, [pc, #68]	; (40447c <task_mxt+0x18c>)
  404438:	47a8      	blx	r5
  40443a:	e7ed      	b.n	404418 <task_mxt+0x128>
  40443c:	004075f0 	.word	0x004075f0
  404440:	00061a80 	.word	0x00061a80
  404444:	08f0d180 	.word	0x08f0d180
  404448:	004018e1 	.word	0x004018e1
  40444c:	40018000 	.word	0x40018000
  404450:	00401b2d 	.word	0x00401b2d
  404454:	004004ad 	.word	0x004004ad
  404458:	00400745 	.word	0x00400745
  40445c:	004007fd 	.word	0x004007fd
  404460:	003228d8 	.word	0x003228d8
  404464:	20400001 	.word	0x20400001
  404468:	00400785 	.word	0x00400785
  40446c:	00400845 	.word	0x00400845
  404470:	00404281 	.word	0x00404281
  404474:	2040c888 	.word	0x2040c888
  404478:	004033a1 	.word	0x004033a1
  40447c:	004027b5 	.word	0x004027b5

00404480 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  404480:	b500      	push	{lr}
  404482:	b08d      	sub	sp, #52	; 0x34
	};
	
	
	

	sysclk_init(); /* Initialize system clocks */
  404484:	4b4d      	ldr	r3, [pc, #308]	; (4045bc <main+0x13c>)
  404486:	4798      	blx	r3
	board_init();  /* Initialize board */
  404488:	4b4d      	ldr	r3, [pc, #308]	; (4045c0 <main+0x140>)
  40448a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40448c:	4c4d      	ldr	r4, [pc, #308]	; (4045c4 <main+0x144>)
  40448e:	4b4e      	ldr	r3, [pc, #312]	; (4045c8 <main+0x148>)
  404490:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404492:	4a4e      	ldr	r2, [pc, #312]	; (4045cc <main+0x14c>)
  404494:	4b4e      	ldr	r3, [pc, #312]	; (4045d0 <main+0x150>)
  404496:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404498:	4a4e      	ldr	r2, [pc, #312]	; (4045d4 <main+0x154>)
  40449a:	4b4f      	ldr	r3, [pc, #316]	; (4045d8 <main+0x158>)
  40449c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40449e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4044a2:	9306      	str	r3, [sp, #24]
	usart_settings.char_length = opt->charlength;
  4044a4:	23c0      	movs	r3, #192	; 0xc0
  4044a6:	9307      	str	r3, [sp, #28]
	usart_settings.parity_type = opt->paritytype;
  4044a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4044ac:	9308      	str	r3, [sp, #32]
	usart_settings.stop_bits= opt->stopbits;
  4044ae:	2500      	movs	r5, #0
  4044b0:	9509      	str	r5, [sp, #36]	; 0x24
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4044b2:	950a      	str	r5, [sp, #40]	; 0x28
  4044b4:	200e      	movs	r0, #14
  4044b6:	4b49      	ldr	r3, [pc, #292]	; (4045dc <main+0x15c>)
  4044b8:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4044ba:	4a49      	ldr	r2, [pc, #292]	; (4045e0 <main+0x160>)
  4044bc:	a906      	add	r1, sp, #24
  4044be:	4620      	mov	r0, r4
  4044c0:	4b48      	ldr	r3, [pc, #288]	; (4045e4 <main+0x164>)
  4044c2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4044c4:	4620      	mov	r0, r4
  4044c6:	4b48      	ldr	r3, [pc, #288]	; (4045e8 <main+0x168>)
  4044c8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4044ca:	4620      	mov	r0, r4
  4044cc:	4b47      	ldr	r3, [pc, #284]	; (4045ec <main+0x16c>)
  4044ce:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4044d0:	4e47      	ldr	r6, [pc, #284]	; (4045f0 <main+0x170>)
  4044d2:	6833      	ldr	r3, [r6, #0]
  4044d4:	4629      	mov	r1, r5
  4044d6:	6898      	ldr	r0, [r3, #8]
  4044d8:	4c46      	ldr	r4, [pc, #280]	; (4045f4 <main+0x174>)
  4044da:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4044dc:	6833      	ldr	r3, [r6, #0]
  4044de:	4629      	mov	r1, r5
  4044e0:	6858      	ldr	r0, [r3, #4]
  4044e2:	47a0      	blx	r4
	afec_enable(AFEC0);
  4044e4:	4c44      	ldr	r4, [pc, #272]	; (4045f8 <main+0x178>)
  4044e6:	4620      	mov	r0, r4
  4044e8:	4b44      	ldr	r3, [pc, #272]	; (4045fc <main+0x17c>)
  4044ea:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4044ec:	a806      	add	r0, sp, #24
  4044ee:	4b44      	ldr	r3, [pc, #272]	; (404600 <main+0x180>)
  4044f0:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  4044f2:	a906      	add	r1, sp, #24
  4044f4:	4620      	mov	r0, r4
  4044f6:	4b43      	ldr	r3, [pc, #268]	; (404604 <main+0x184>)
  4044f8:	4798      	blx	r3
	reg = afec->AFEC_MR;
  4044fa:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4044fc:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  404500:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_8,	AFEC_pot_callback, 1);
  404502:	2301      	movs	r3, #1
  404504:	4a40      	ldr	r2, [pc, #256]	; (404608 <main+0x188>)
  404506:	2108      	movs	r1, #8
  404508:	4620      	mov	r0, r4
  40450a:	4e40      	ldr	r6, [pc, #256]	; (40460c <main+0x18c>)
  40450c:	47b0      	blx	r6
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40450e:	a805      	add	r0, sp, #20
  404510:	4b3f      	ldr	r3, [pc, #252]	; (404610 <main+0x190>)
  404512:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  404514:	f88d 5015 	strb.w	r5, [sp, #21]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_POT_SENSOR, &afec_ch_cfg);
  404518:	aa05      	add	r2, sp, #20
  40451a:	2108      	movs	r1, #8
  40451c:	4620      	mov	r0, r4
  40451e:	4b3d      	ldr	r3, [pc, #244]	; (404614 <main+0x194>)
  404520:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  404522:	2308      	movs	r3, #8
  404524:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  404526:	f44f 7200 	mov.w	r2, #512	; 0x200
  40452a:	66e2      	str	r2, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40452c:	f44f 7380 	mov.w	r3, #256	; 0x100
  404530:	6163      	str	r3, [r4, #20]
  404532:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  404534:	2302      	movs	r3, #2
  404536:	6023      	str	r3, [r4, #0]
	config_POT();
	afec_channel_enable(AFEC0, AFEC_CHANNEL_POT_SENSOR);
	afec_start_software_conversion(AFEC0);
		
  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  404538:	9503      	str	r5, [sp, #12]
  40453a:	9502      	str	r5, [sp, #8]
  40453c:	9501      	str	r5, [sp, #4]
  40453e:	9500      	str	r5, [sp, #0]
  404540:	462b      	mov	r3, r5
  404542:	4935      	ldr	r1, [pc, #212]	; (404618 <main+0x198>)
  404544:	4835      	ldr	r0, [pc, #212]	; (40461c <main+0x19c>)
  404546:	4c36      	ldr	r4, [pc, #216]	; (404620 <main+0x1a0>)
  404548:	47a0      	blx	r4
  40454a:	2801      	cmp	r0, #1
  40454c:	d002      	beq.n	404554 <main+0xd4>
    printf("Failed to create test led task\r\n");
  40454e:	4835      	ldr	r0, [pc, #212]	; (404624 <main+0x1a4>)
  404550:	4b35      	ldr	r3, [pc, #212]	; (404628 <main+0x1a8>)
  404552:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  404554:	2300      	movs	r3, #0
  404556:	9303      	str	r3, [sp, #12]
  404558:	9302      	str	r3, [sp, #8]
  40455a:	9301      	str	r3, [sp, #4]
  40455c:	9300      	str	r3, [sp, #0]
  40455e:	f44f 7200 	mov.w	r2, #512	; 0x200
  404562:	4932      	ldr	r1, [pc, #200]	; (40462c <main+0x1ac>)
  404564:	4832      	ldr	r0, [pc, #200]	; (404630 <main+0x1b0>)
  404566:	4c2e      	ldr	r4, [pc, #184]	; (404620 <main+0x1a0>)
  404568:	47a0      	blx	r4
  40456a:	2801      	cmp	r0, #1
  40456c:	d002      	beq.n	404574 <main+0xf4>
    printf("Failed to create test led task\r\n");
  40456e:	482d      	ldr	r0, [pc, #180]	; (404624 <main+0x1a4>)
  404570:	4b2d      	ldr	r3, [pc, #180]	; (404628 <main+0x1a8>)
  404572:	4798      	blx	r3
  }
  
    /* Create task to handler LCD */
    if (xTaskCreate(task_temp, "temp", TASK_TEMP_STACK_SIZE, NULL, TASK_TEMP_STACK_PRIORITY, NULL) != pdPASS) {
  404574:	2300      	movs	r3, #0
  404576:	9303      	str	r3, [sp, #12]
  404578:	9302      	str	r3, [sp, #8]
  40457a:	9301      	str	r3, [sp, #4]
  40457c:	9300      	str	r3, [sp, #0]
  40457e:	f44f 7200 	mov.w	r2, #512	; 0x200
  404582:	492c      	ldr	r1, [pc, #176]	; (404634 <main+0x1b4>)
  404584:	482c      	ldr	r0, [pc, #176]	; (404638 <main+0x1b8>)
  404586:	4c26      	ldr	r4, [pc, #152]	; (404620 <main+0x1a0>)
  404588:	47a0      	blx	r4
  40458a:	2801      	cmp	r0, #1
  40458c:	d002      	beq.n	404594 <main+0x114>
	    printf("Failed to create test temp task\r\n");
  40458e:	482b      	ldr	r0, [pc, #172]	; (40463c <main+0x1bc>)
  404590:	4b25      	ldr	r3, [pc, #148]	; (404628 <main+0x1a8>)
  404592:	4798      	blx	r3
    }
	
	    /* Create task to handler LCD */
	if (xTaskCreate(task_semaf, "semaf", TASK_SEM_STACK_SIZE, NULL, TASK_SEM_STACK_PRIORITY, NULL) != pdPASS) {
  404594:	2300      	movs	r3, #0
  404596:	9303      	str	r3, [sp, #12]
  404598:	9302      	str	r3, [sp, #8]
  40459a:	9301      	str	r3, [sp, #4]
  40459c:	9300      	str	r3, [sp, #0]
  40459e:	f44f 7200 	mov.w	r2, #512	; 0x200
  4045a2:	4927      	ldr	r1, [pc, #156]	; (404640 <main+0x1c0>)
  4045a4:	4827      	ldr	r0, [pc, #156]	; (404644 <main+0x1c4>)
  4045a6:	4c1e      	ldr	r4, [pc, #120]	; (404620 <main+0x1a0>)
  4045a8:	47a0      	blx	r4
  4045aa:	2801      	cmp	r0, #1
  4045ac:	d002      	beq.n	4045b4 <main+0x134>
		 printf("Failed to create test semaf task\r\n");
  4045ae:	4826      	ldr	r0, [pc, #152]	; (404648 <main+0x1c8>)
  4045b0:	4b1d      	ldr	r3, [pc, #116]	; (404628 <main+0x1a8>)
  4045b2:	4798      	blx	r3
	    }



  /* Start the scheduler. */
  vTaskStartScheduler();
  4045b4:	4b25      	ldr	r3, [pc, #148]	; (40464c <main+0x1cc>)
  4045b6:	4798      	blx	r3
  4045b8:	e7fe      	b.n	4045b8 <main+0x138>
  4045ba:	bf00      	nop
  4045bc:	00400925 	.word	0x00400925
  4045c0:	00400bb5 	.word	0x00400bb5
  4045c4:	40028000 	.word	0x40028000
  4045c8:	2040c82c 	.word	0x2040c82c
  4045cc:	00403fdd 	.word	0x00403fdd
  4045d0:	2040c828 	.word	0x2040c828
  4045d4:	00403f01 	.word	0x00403f01
  4045d8:	2040c824 	.word	0x2040c824
  4045dc:	004018e1 	.word	0x004018e1
  4045e0:	08f0d180 	.word	0x08f0d180
  4045e4:	00401d55 	.word	0x00401d55
  4045e8:	00401da9 	.word	0x00401da9
  4045ec:	00401daf 	.word	0x00401daf
  4045f0:	20400018 	.word	0x20400018
  4045f4:	00404e45 	.word	0x00404e45
  4045f8:	4003c000 	.word	0x4003c000
  4045fc:	00400449 	.word	0x00400449
  404600:	0040028d 	.word	0x0040028d
  404604:	004002c9 	.word	0x004002c9
  404608:	00403e01 	.word	0x00403e01
  40460c:	004003c9 	.word	0x004003c9
  404610:	004002bd 	.word	0x004002bd
  404614:	0040025d 	.word	0x0040025d
  404618:	0040f08c 	.word	0x0040f08c
  40461c:	004042f1 	.word	0x004042f1
  404620:	00402e59 	.word	0x00402e59
  404624:	0040f090 	.word	0x0040f090
  404628:	004046a1 	.word	0x004046a1
  40462c:	0040f0b4 	.word	0x0040f0b4
  404630:	004041f9 	.word	0x004041f9
  404634:	0040f0b8 	.word	0x0040f0b8
  404638:	00403e89 	.word	0x00403e89
  40463c:	0040f0c0 	.word	0x0040f0c0
  404640:	0040f0e4 	.word	0x0040f0e4
  404644:	00403e21 	.word	0x00403e21
  404648:	0040f0ec 	.word	0x0040f0ec
  40464c:	0040308d 	.word	0x0040308d

00404650 <__libc_init_array>:
  404650:	b570      	push	{r4, r5, r6, lr}
  404652:	4e0f      	ldr	r6, [pc, #60]	; (404690 <__libc_init_array+0x40>)
  404654:	4d0f      	ldr	r5, [pc, #60]	; (404694 <__libc_init_array+0x44>)
  404656:	1b76      	subs	r6, r6, r5
  404658:	10b6      	asrs	r6, r6, #2
  40465a:	bf18      	it	ne
  40465c:	2400      	movne	r4, #0
  40465e:	d005      	beq.n	40466c <__libc_init_array+0x1c>
  404660:	3401      	adds	r4, #1
  404662:	f855 3b04 	ldr.w	r3, [r5], #4
  404666:	4798      	blx	r3
  404668:	42a6      	cmp	r6, r4
  40466a:	d1f9      	bne.n	404660 <__libc_init_array+0x10>
  40466c:	4e0a      	ldr	r6, [pc, #40]	; (404698 <__libc_init_array+0x48>)
  40466e:	4d0b      	ldr	r5, [pc, #44]	; (40469c <__libc_init_array+0x4c>)
  404670:	1b76      	subs	r6, r6, r5
  404672:	f00a fe3f 	bl	40f2f4 <_init>
  404676:	10b6      	asrs	r6, r6, #2
  404678:	bf18      	it	ne
  40467a:	2400      	movne	r4, #0
  40467c:	d006      	beq.n	40468c <__libc_init_array+0x3c>
  40467e:	3401      	adds	r4, #1
  404680:	f855 3b04 	ldr.w	r3, [r5], #4
  404684:	4798      	blx	r3
  404686:	42a6      	cmp	r6, r4
  404688:	d1f9      	bne.n	40467e <__libc_init_array+0x2e>
  40468a:	bd70      	pop	{r4, r5, r6, pc}
  40468c:	bd70      	pop	{r4, r5, r6, pc}
  40468e:	bf00      	nop
  404690:	0040f300 	.word	0x0040f300
  404694:	0040f300 	.word	0x0040f300
  404698:	0040f308 	.word	0x0040f308
  40469c:	0040f300 	.word	0x0040f300

004046a0 <iprintf>:
  4046a0:	b40f      	push	{r0, r1, r2, r3}
  4046a2:	b500      	push	{lr}
  4046a4:	4907      	ldr	r1, [pc, #28]	; (4046c4 <iprintf+0x24>)
  4046a6:	b083      	sub	sp, #12
  4046a8:	ab04      	add	r3, sp, #16
  4046aa:	6808      	ldr	r0, [r1, #0]
  4046ac:	f853 2b04 	ldr.w	r2, [r3], #4
  4046b0:	6881      	ldr	r1, [r0, #8]
  4046b2:	9301      	str	r3, [sp, #4]
  4046b4:	f000 fd52 	bl	40515c <_vfiprintf_r>
  4046b8:	b003      	add	sp, #12
  4046ba:	f85d eb04 	ldr.w	lr, [sp], #4
  4046be:	b004      	add	sp, #16
  4046c0:	4770      	bx	lr
  4046c2:	bf00      	nop
  4046c4:	20400018 	.word	0x20400018

004046c8 <malloc>:
  4046c8:	4b02      	ldr	r3, [pc, #8]	; (4046d4 <malloc+0xc>)
  4046ca:	4601      	mov	r1, r0
  4046cc:	6818      	ldr	r0, [r3, #0]
  4046ce:	f000 b803 	b.w	4046d8 <_malloc_r>
  4046d2:	bf00      	nop
  4046d4:	20400018 	.word	0x20400018

004046d8 <_malloc_r>:
  4046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046dc:	f101 060b 	add.w	r6, r1, #11
  4046e0:	2e16      	cmp	r6, #22
  4046e2:	b083      	sub	sp, #12
  4046e4:	4605      	mov	r5, r0
  4046e6:	f240 809e 	bls.w	404826 <_malloc_r+0x14e>
  4046ea:	f036 0607 	bics.w	r6, r6, #7
  4046ee:	f100 80bd 	bmi.w	40486c <_malloc_r+0x194>
  4046f2:	42b1      	cmp	r1, r6
  4046f4:	f200 80ba 	bhi.w	40486c <_malloc_r+0x194>
  4046f8:	f000 fb86 	bl	404e08 <__malloc_lock>
  4046fc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404700:	f0c0 8293 	bcc.w	404c2a <_malloc_r+0x552>
  404704:	0a73      	lsrs	r3, r6, #9
  404706:	f000 80b8 	beq.w	40487a <_malloc_r+0x1a2>
  40470a:	2b04      	cmp	r3, #4
  40470c:	f200 8179 	bhi.w	404a02 <_malloc_r+0x32a>
  404710:	09b3      	lsrs	r3, r6, #6
  404712:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404716:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40471a:	00c3      	lsls	r3, r0, #3
  40471c:	4fbf      	ldr	r7, [pc, #764]	; (404a1c <_malloc_r+0x344>)
  40471e:	443b      	add	r3, r7
  404720:	f1a3 0108 	sub.w	r1, r3, #8
  404724:	685c      	ldr	r4, [r3, #4]
  404726:	42a1      	cmp	r1, r4
  404728:	d106      	bne.n	404738 <_malloc_r+0x60>
  40472a:	e00c      	b.n	404746 <_malloc_r+0x6e>
  40472c:	2a00      	cmp	r2, #0
  40472e:	f280 80aa 	bge.w	404886 <_malloc_r+0x1ae>
  404732:	68e4      	ldr	r4, [r4, #12]
  404734:	42a1      	cmp	r1, r4
  404736:	d006      	beq.n	404746 <_malloc_r+0x6e>
  404738:	6863      	ldr	r3, [r4, #4]
  40473a:	f023 0303 	bic.w	r3, r3, #3
  40473e:	1b9a      	subs	r2, r3, r6
  404740:	2a0f      	cmp	r2, #15
  404742:	ddf3      	ble.n	40472c <_malloc_r+0x54>
  404744:	4670      	mov	r0, lr
  404746:	693c      	ldr	r4, [r7, #16]
  404748:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404a30 <_malloc_r+0x358>
  40474c:	4574      	cmp	r4, lr
  40474e:	f000 81ab 	beq.w	404aa8 <_malloc_r+0x3d0>
  404752:	6863      	ldr	r3, [r4, #4]
  404754:	f023 0303 	bic.w	r3, r3, #3
  404758:	1b9a      	subs	r2, r3, r6
  40475a:	2a0f      	cmp	r2, #15
  40475c:	f300 8190 	bgt.w	404a80 <_malloc_r+0x3a8>
  404760:	2a00      	cmp	r2, #0
  404762:	f8c7 e014 	str.w	lr, [r7, #20]
  404766:	f8c7 e010 	str.w	lr, [r7, #16]
  40476a:	f280 809d 	bge.w	4048a8 <_malloc_r+0x1d0>
  40476e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404772:	f080 8161 	bcs.w	404a38 <_malloc_r+0x360>
  404776:	08db      	lsrs	r3, r3, #3
  404778:	f103 0c01 	add.w	ip, r3, #1
  40477c:	1099      	asrs	r1, r3, #2
  40477e:	687a      	ldr	r2, [r7, #4]
  404780:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404784:	f8c4 8008 	str.w	r8, [r4, #8]
  404788:	2301      	movs	r3, #1
  40478a:	408b      	lsls	r3, r1
  40478c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404790:	4313      	orrs	r3, r2
  404792:	3908      	subs	r1, #8
  404794:	60e1      	str	r1, [r4, #12]
  404796:	607b      	str	r3, [r7, #4]
  404798:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40479c:	f8c8 400c 	str.w	r4, [r8, #12]
  4047a0:	1082      	asrs	r2, r0, #2
  4047a2:	2401      	movs	r4, #1
  4047a4:	4094      	lsls	r4, r2
  4047a6:	429c      	cmp	r4, r3
  4047a8:	f200 808b 	bhi.w	4048c2 <_malloc_r+0x1ea>
  4047ac:	421c      	tst	r4, r3
  4047ae:	d106      	bne.n	4047be <_malloc_r+0xe6>
  4047b0:	f020 0003 	bic.w	r0, r0, #3
  4047b4:	0064      	lsls	r4, r4, #1
  4047b6:	421c      	tst	r4, r3
  4047b8:	f100 0004 	add.w	r0, r0, #4
  4047bc:	d0fa      	beq.n	4047b4 <_malloc_r+0xdc>
  4047be:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4047c2:	46cc      	mov	ip, r9
  4047c4:	4680      	mov	r8, r0
  4047c6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4047ca:	459c      	cmp	ip, r3
  4047cc:	d107      	bne.n	4047de <_malloc_r+0x106>
  4047ce:	e16d      	b.n	404aac <_malloc_r+0x3d4>
  4047d0:	2a00      	cmp	r2, #0
  4047d2:	f280 817b 	bge.w	404acc <_malloc_r+0x3f4>
  4047d6:	68db      	ldr	r3, [r3, #12]
  4047d8:	459c      	cmp	ip, r3
  4047da:	f000 8167 	beq.w	404aac <_malloc_r+0x3d4>
  4047de:	6859      	ldr	r1, [r3, #4]
  4047e0:	f021 0103 	bic.w	r1, r1, #3
  4047e4:	1b8a      	subs	r2, r1, r6
  4047e6:	2a0f      	cmp	r2, #15
  4047e8:	ddf2      	ble.n	4047d0 <_malloc_r+0xf8>
  4047ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4047ee:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4047f2:	9300      	str	r3, [sp, #0]
  4047f4:	199c      	adds	r4, r3, r6
  4047f6:	4628      	mov	r0, r5
  4047f8:	f046 0601 	orr.w	r6, r6, #1
  4047fc:	f042 0501 	orr.w	r5, r2, #1
  404800:	605e      	str	r6, [r3, #4]
  404802:	f8c8 c00c 	str.w	ip, [r8, #12]
  404806:	f8cc 8008 	str.w	r8, [ip, #8]
  40480a:	617c      	str	r4, [r7, #20]
  40480c:	613c      	str	r4, [r7, #16]
  40480e:	f8c4 e00c 	str.w	lr, [r4, #12]
  404812:	f8c4 e008 	str.w	lr, [r4, #8]
  404816:	6065      	str	r5, [r4, #4]
  404818:	505a      	str	r2, [r3, r1]
  40481a:	f000 fafb 	bl	404e14 <__malloc_unlock>
  40481e:	9b00      	ldr	r3, [sp, #0]
  404820:	f103 0408 	add.w	r4, r3, #8
  404824:	e01e      	b.n	404864 <_malloc_r+0x18c>
  404826:	2910      	cmp	r1, #16
  404828:	d820      	bhi.n	40486c <_malloc_r+0x194>
  40482a:	f000 faed 	bl	404e08 <__malloc_lock>
  40482e:	2610      	movs	r6, #16
  404830:	2318      	movs	r3, #24
  404832:	2002      	movs	r0, #2
  404834:	4f79      	ldr	r7, [pc, #484]	; (404a1c <_malloc_r+0x344>)
  404836:	443b      	add	r3, r7
  404838:	f1a3 0208 	sub.w	r2, r3, #8
  40483c:	685c      	ldr	r4, [r3, #4]
  40483e:	4294      	cmp	r4, r2
  404840:	f000 813d 	beq.w	404abe <_malloc_r+0x3e6>
  404844:	6863      	ldr	r3, [r4, #4]
  404846:	68e1      	ldr	r1, [r4, #12]
  404848:	68a6      	ldr	r6, [r4, #8]
  40484a:	f023 0303 	bic.w	r3, r3, #3
  40484e:	4423      	add	r3, r4
  404850:	4628      	mov	r0, r5
  404852:	685a      	ldr	r2, [r3, #4]
  404854:	60f1      	str	r1, [r6, #12]
  404856:	f042 0201 	orr.w	r2, r2, #1
  40485a:	608e      	str	r6, [r1, #8]
  40485c:	605a      	str	r2, [r3, #4]
  40485e:	f000 fad9 	bl	404e14 <__malloc_unlock>
  404862:	3408      	adds	r4, #8
  404864:	4620      	mov	r0, r4
  404866:	b003      	add	sp, #12
  404868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40486c:	2400      	movs	r4, #0
  40486e:	230c      	movs	r3, #12
  404870:	4620      	mov	r0, r4
  404872:	602b      	str	r3, [r5, #0]
  404874:	b003      	add	sp, #12
  404876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40487a:	2040      	movs	r0, #64	; 0x40
  40487c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404880:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404884:	e74a      	b.n	40471c <_malloc_r+0x44>
  404886:	4423      	add	r3, r4
  404888:	68e1      	ldr	r1, [r4, #12]
  40488a:	685a      	ldr	r2, [r3, #4]
  40488c:	68a6      	ldr	r6, [r4, #8]
  40488e:	f042 0201 	orr.w	r2, r2, #1
  404892:	60f1      	str	r1, [r6, #12]
  404894:	4628      	mov	r0, r5
  404896:	608e      	str	r6, [r1, #8]
  404898:	605a      	str	r2, [r3, #4]
  40489a:	f000 fabb 	bl	404e14 <__malloc_unlock>
  40489e:	3408      	adds	r4, #8
  4048a0:	4620      	mov	r0, r4
  4048a2:	b003      	add	sp, #12
  4048a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048a8:	4423      	add	r3, r4
  4048aa:	4628      	mov	r0, r5
  4048ac:	685a      	ldr	r2, [r3, #4]
  4048ae:	f042 0201 	orr.w	r2, r2, #1
  4048b2:	605a      	str	r2, [r3, #4]
  4048b4:	f000 faae 	bl	404e14 <__malloc_unlock>
  4048b8:	3408      	adds	r4, #8
  4048ba:	4620      	mov	r0, r4
  4048bc:	b003      	add	sp, #12
  4048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048c2:	68bc      	ldr	r4, [r7, #8]
  4048c4:	6863      	ldr	r3, [r4, #4]
  4048c6:	f023 0803 	bic.w	r8, r3, #3
  4048ca:	45b0      	cmp	r8, r6
  4048cc:	d304      	bcc.n	4048d8 <_malloc_r+0x200>
  4048ce:	eba8 0306 	sub.w	r3, r8, r6
  4048d2:	2b0f      	cmp	r3, #15
  4048d4:	f300 8085 	bgt.w	4049e2 <_malloc_r+0x30a>
  4048d8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404a34 <_malloc_r+0x35c>
  4048dc:	4b50      	ldr	r3, [pc, #320]	; (404a20 <_malloc_r+0x348>)
  4048de:	f8d9 2000 	ldr.w	r2, [r9]
  4048e2:	681b      	ldr	r3, [r3, #0]
  4048e4:	3201      	adds	r2, #1
  4048e6:	4433      	add	r3, r6
  4048e8:	eb04 0a08 	add.w	sl, r4, r8
  4048ec:	f000 8155 	beq.w	404b9a <_malloc_r+0x4c2>
  4048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4048f4:	330f      	adds	r3, #15
  4048f6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4048fa:	f02b 0b0f 	bic.w	fp, fp, #15
  4048fe:	4659      	mov	r1, fp
  404900:	4628      	mov	r0, r5
  404902:	f000 fa8d 	bl	404e20 <_sbrk_r>
  404906:	1c41      	adds	r1, r0, #1
  404908:	4602      	mov	r2, r0
  40490a:	f000 80fc 	beq.w	404b06 <_malloc_r+0x42e>
  40490e:	4582      	cmp	sl, r0
  404910:	f200 80f7 	bhi.w	404b02 <_malloc_r+0x42a>
  404914:	4b43      	ldr	r3, [pc, #268]	; (404a24 <_malloc_r+0x34c>)
  404916:	6819      	ldr	r1, [r3, #0]
  404918:	4459      	add	r1, fp
  40491a:	6019      	str	r1, [r3, #0]
  40491c:	f000 814d 	beq.w	404bba <_malloc_r+0x4e2>
  404920:	f8d9 0000 	ldr.w	r0, [r9]
  404924:	3001      	adds	r0, #1
  404926:	bf1b      	ittet	ne
  404928:	eba2 0a0a 	subne.w	sl, r2, sl
  40492c:	4451      	addne	r1, sl
  40492e:	f8c9 2000 	streq.w	r2, [r9]
  404932:	6019      	strne	r1, [r3, #0]
  404934:	f012 0107 	ands.w	r1, r2, #7
  404938:	f000 8115 	beq.w	404b66 <_malloc_r+0x48e>
  40493c:	f1c1 0008 	rsb	r0, r1, #8
  404940:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404944:	4402      	add	r2, r0
  404946:	3108      	adds	r1, #8
  404948:	eb02 090b 	add.w	r9, r2, fp
  40494c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404950:	eba1 0909 	sub.w	r9, r1, r9
  404954:	4649      	mov	r1, r9
  404956:	4628      	mov	r0, r5
  404958:	9301      	str	r3, [sp, #4]
  40495a:	9200      	str	r2, [sp, #0]
  40495c:	f000 fa60 	bl	404e20 <_sbrk_r>
  404960:	1c43      	adds	r3, r0, #1
  404962:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404966:	f000 8143 	beq.w	404bf0 <_malloc_r+0x518>
  40496a:	1a80      	subs	r0, r0, r2
  40496c:	4448      	add	r0, r9
  40496e:	f040 0001 	orr.w	r0, r0, #1
  404972:	6819      	ldr	r1, [r3, #0]
  404974:	60ba      	str	r2, [r7, #8]
  404976:	4449      	add	r1, r9
  404978:	42bc      	cmp	r4, r7
  40497a:	6050      	str	r0, [r2, #4]
  40497c:	6019      	str	r1, [r3, #0]
  40497e:	d017      	beq.n	4049b0 <_malloc_r+0x2d8>
  404980:	f1b8 0f0f 	cmp.w	r8, #15
  404984:	f240 80fb 	bls.w	404b7e <_malloc_r+0x4a6>
  404988:	6860      	ldr	r0, [r4, #4]
  40498a:	f1a8 020c 	sub.w	r2, r8, #12
  40498e:	f022 0207 	bic.w	r2, r2, #7
  404992:	eb04 0e02 	add.w	lr, r4, r2
  404996:	f000 0001 	and.w	r0, r0, #1
  40499a:	f04f 0c05 	mov.w	ip, #5
  40499e:	4310      	orrs	r0, r2
  4049a0:	2a0f      	cmp	r2, #15
  4049a2:	6060      	str	r0, [r4, #4]
  4049a4:	f8ce c004 	str.w	ip, [lr, #4]
  4049a8:	f8ce c008 	str.w	ip, [lr, #8]
  4049ac:	f200 8117 	bhi.w	404bde <_malloc_r+0x506>
  4049b0:	4b1d      	ldr	r3, [pc, #116]	; (404a28 <_malloc_r+0x350>)
  4049b2:	68bc      	ldr	r4, [r7, #8]
  4049b4:	681a      	ldr	r2, [r3, #0]
  4049b6:	4291      	cmp	r1, r2
  4049b8:	bf88      	it	hi
  4049ba:	6019      	strhi	r1, [r3, #0]
  4049bc:	4b1b      	ldr	r3, [pc, #108]	; (404a2c <_malloc_r+0x354>)
  4049be:	681a      	ldr	r2, [r3, #0]
  4049c0:	4291      	cmp	r1, r2
  4049c2:	6862      	ldr	r2, [r4, #4]
  4049c4:	bf88      	it	hi
  4049c6:	6019      	strhi	r1, [r3, #0]
  4049c8:	f022 0203 	bic.w	r2, r2, #3
  4049cc:	4296      	cmp	r6, r2
  4049ce:	eba2 0306 	sub.w	r3, r2, r6
  4049d2:	d801      	bhi.n	4049d8 <_malloc_r+0x300>
  4049d4:	2b0f      	cmp	r3, #15
  4049d6:	dc04      	bgt.n	4049e2 <_malloc_r+0x30a>
  4049d8:	4628      	mov	r0, r5
  4049da:	f000 fa1b 	bl	404e14 <__malloc_unlock>
  4049de:	2400      	movs	r4, #0
  4049e0:	e740      	b.n	404864 <_malloc_r+0x18c>
  4049e2:	19a2      	adds	r2, r4, r6
  4049e4:	f043 0301 	orr.w	r3, r3, #1
  4049e8:	f046 0601 	orr.w	r6, r6, #1
  4049ec:	6066      	str	r6, [r4, #4]
  4049ee:	4628      	mov	r0, r5
  4049f0:	60ba      	str	r2, [r7, #8]
  4049f2:	6053      	str	r3, [r2, #4]
  4049f4:	f000 fa0e 	bl	404e14 <__malloc_unlock>
  4049f8:	3408      	adds	r4, #8
  4049fa:	4620      	mov	r0, r4
  4049fc:	b003      	add	sp, #12
  4049fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a02:	2b14      	cmp	r3, #20
  404a04:	d971      	bls.n	404aea <_malloc_r+0x412>
  404a06:	2b54      	cmp	r3, #84	; 0x54
  404a08:	f200 80a3 	bhi.w	404b52 <_malloc_r+0x47a>
  404a0c:	0b33      	lsrs	r3, r6, #12
  404a0e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404a12:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404a16:	00c3      	lsls	r3, r0, #3
  404a18:	e680      	b.n	40471c <_malloc_r+0x44>
  404a1a:	bf00      	nop
  404a1c:	20400448 	.word	0x20400448
  404a20:	2040c798 	.word	0x2040c798
  404a24:	2040c768 	.word	0x2040c768
  404a28:	2040c790 	.word	0x2040c790
  404a2c:	2040c794 	.word	0x2040c794
  404a30:	20400450 	.word	0x20400450
  404a34:	20400850 	.word	0x20400850
  404a38:	0a5a      	lsrs	r2, r3, #9
  404a3a:	2a04      	cmp	r2, #4
  404a3c:	d95b      	bls.n	404af6 <_malloc_r+0x41e>
  404a3e:	2a14      	cmp	r2, #20
  404a40:	f200 80ae 	bhi.w	404ba0 <_malloc_r+0x4c8>
  404a44:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404a48:	00c9      	lsls	r1, r1, #3
  404a4a:	325b      	adds	r2, #91	; 0x5b
  404a4c:	eb07 0c01 	add.w	ip, r7, r1
  404a50:	5879      	ldr	r1, [r7, r1]
  404a52:	f1ac 0c08 	sub.w	ip, ip, #8
  404a56:	458c      	cmp	ip, r1
  404a58:	f000 8088 	beq.w	404b6c <_malloc_r+0x494>
  404a5c:	684a      	ldr	r2, [r1, #4]
  404a5e:	f022 0203 	bic.w	r2, r2, #3
  404a62:	4293      	cmp	r3, r2
  404a64:	d273      	bcs.n	404b4e <_malloc_r+0x476>
  404a66:	6889      	ldr	r1, [r1, #8]
  404a68:	458c      	cmp	ip, r1
  404a6a:	d1f7      	bne.n	404a5c <_malloc_r+0x384>
  404a6c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404a70:	687b      	ldr	r3, [r7, #4]
  404a72:	60e2      	str	r2, [r4, #12]
  404a74:	f8c4 c008 	str.w	ip, [r4, #8]
  404a78:	6094      	str	r4, [r2, #8]
  404a7a:	f8cc 400c 	str.w	r4, [ip, #12]
  404a7e:	e68f      	b.n	4047a0 <_malloc_r+0xc8>
  404a80:	19a1      	adds	r1, r4, r6
  404a82:	f046 0c01 	orr.w	ip, r6, #1
  404a86:	f042 0601 	orr.w	r6, r2, #1
  404a8a:	f8c4 c004 	str.w	ip, [r4, #4]
  404a8e:	4628      	mov	r0, r5
  404a90:	6179      	str	r1, [r7, #20]
  404a92:	6139      	str	r1, [r7, #16]
  404a94:	f8c1 e00c 	str.w	lr, [r1, #12]
  404a98:	f8c1 e008 	str.w	lr, [r1, #8]
  404a9c:	604e      	str	r6, [r1, #4]
  404a9e:	50e2      	str	r2, [r4, r3]
  404aa0:	f000 f9b8 	bl	404e14 <__malloc_unlock>
  404aa4:	3408      	adds	r4, #8
  404aa6:	e6dd      	b.n	404864 <_malloc_r+0x18c>
  404aa8:	687b      	ldr	r3, [r7, #4]
  404aaa:	e679      	b.n	4047a0 <_malloc_r+0xc8>
  404aac:	f108 0801 	add.w	r8, r8, #1
  404ab0:	f018 0f03 	tst.w	r8, #3
  404ab4:	f10c 0c08 	add.w	ip, ip, #8
  404ab8:	f47f ae85 	bne.w	4047c6 <_malloc_r+0xee>
  404abc:	e02d      	b.n	404b1a <_malloc_r+0x442>
  404abe:	68dc      	ldr	r4, [r3, #12]
  404ac0:	42a3      	cmp	r3, r4
  404ac2:	bf08      	it	eq
  404ac4:	3002      	addeq	r0, #2
  404ac6:	f43f ae3e 	beq.w	404746 <_malloc_r+0x6e>
  404aca:	e6bb      	b.n	404844 <_malloc_r+0x16c>
  404acc:	4419      	add	r1, r3
  404ace:	461c      	mov	r4, r3
  404ad0:	684a      	ldr	r2, [r1, #4]
  404ad2:	68db      	ldr	r3, [r3, #12]
  404ad4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404ad8:	f042 0201 	orr.w	r2, r2, #1
  404adc:	604a      	str	r2, [r1, #4]
  404ade:	4628      	mov	r0, r5
  404ae0:	60f3      	str	r3, [r6, #12]
  404ae2:	609e      	str	r6, [r3, #8]
  404ae4:	f000 f996 	bl	404e14 <__malloc_unlock>
  404ae8:	e6bc      	b.n	404864 <_malloc_r+0x18c>
  404aea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404aee:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404af2:	00c3      	lsls	r3, r0, #3
  404af4:	e612      	b.n	40471c <_malloc_r+0x44>
  404af6:	099a      	lsrs	r2, r3, #6
  404af8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404afc:	00c9      	lsls	r1, r1, #3
  404afe:	3238      	adds	r2, #56	; 0x38
  404b00:	e7a4      	b.n	404a4c <_malloc_r+0x374>
  404b02:	42bc      	cmp	r4, r7
  404b04:	d054      	beq.n	404bb0 <_malloc_r+0x4d8>
  404b06:	68bc      	ldr	r4, [r7, #8]
  404b08:	6862      	ldr	r2, [r4, #4]
  404b0a:	f022 0203 	bic.w	r2, r2, #3
  404b0e:	e75d      	b.n	4049cc <_malloc_r+0x2f4>
  404b10:	f859 3908 	ldr.w	r3, [r9], #-8
  404b14:	4599      	cmp	r9, r3
  404b16:	f040 8086 	bne.w	404c26 <_malloc_r+0x54e>
  404b1a:	f010 0f03 	tst.w	r0, #3
  404b1e:	f100 30ff 	add.w	r0, r0, #4294967295
  404b22:	d1f5      	bne.n	404b10 <_malloc_r+0x438>
  404b24:	687b      	ldr	r3, [r7, #4]
  404b26:	ea23 0304 	bic.w	r3, r3, r4
  404b2a:	607b      	str	r3, [r7, #4]
  404b2c:	0064      	lsls	r4, r4, #1
  404b2e:	429c      	cmp	r4, r3
  404b30:	f63f aec7 	bhi.w	4048c2 <_malloc_r+0x1ea>
  404b34:	2c00      	cmp	r4, #0
  404b36:	f43f aec4 	beq.w	4048c2 <_malloc_r+0x1ea>
  404b3a:	421c      	tst	r4, r3
  404b3c:	4640      	mov	r0, r8
  404b3e:	f47f ae3e 	bne.w	4047be <_malloc_r+0xe6>
  404b42:	0064      	lsls	r4, r4, #1
  404b44:	421c      	tst	r4, r3
  404b46:	f100 0004 	add.w	r0, r0, #4
  404b4a:	d0fa      	beq.n	404b42 <_malloc_r+0x46a>
  404b4c:	e637      	b.n	4047be <_malloc_r+0xe6>
  404b4e:	468c      	mov	ip, r1
  404b50:	e78c      	b.n	404a6c <_malloc_r+0x394>
  404b52:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404b56:	d815      	bhi.n	404b84 <_malloc_r+0x4ac>
  404b58:	0bf3      	lsrs	r3, r6, #15
  404b5a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404b5e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404b62:	00c3      	lsls	r3, r0, #3
  404b64:	e5da      	b.n	40471c <_malloc_r+0x44>
  404b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404b6a:	e6ed      	b.n	404948 <_malloc_r+0x270>
  404b6c:	687b      	ldr	r3, [r7, #4]
  404b6e:	1092      	asrs	r2, r2, #2
  404b70:	2101      	movs	r1, #1
  404b72:	fa01 f202 	lsl.w	r2, r1, r2
  404b76:	4313      	orrs	r3, r2
  404b78:	607b      	str	r3, [r7, #4]
  404b7a:	4662      	mov	r2, ip
  404b7c:	e779      	b.n	404a72 <_malloc_r+0x39a>
  404b7e:	2301      	movs	r3, #1
  404b80:	6053      	str	r3, [r2, #4]
  404b82:	e729      	b.n	4049d8 <_malloc_r+0x300>
  404b84:	f240 5254 	movw	r2, #1364	; 0x554
  404b88:	4293      	cmp	r3, r2
  404b8a:	d822      	bhi.n	404bd2 <_malloc_r+0x4fa>
  404b8c:	0cb3      	lsrs	r3, r6, #18
  404b8e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404b92:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404b96:	00c3      	lsls	r3, r0, #3
  404b98:	e5c0      	b.n	40471c <_malloc_r+0x44>
  404b9a:	f103 0b10 	add.w	fp, r3, #16
  404b9e:	e6ae      	b.n	4048fe <_malloc_r+0x226>
  404ba0:	2a54      	cmp	r2, #84	; 0x54
  404ba2:	d829      	bhi.n	404bf8 <_malloc_r+0x520>
  404ba4:	0b1a      	lsrs	r2, r3, #12
  404ba6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404baa:	00c9      	lsls	r1, r1, #3
  404bac:	326e      	adds	r2, #110	; 0x6e
  404bae:	e74d      	b.n	404a4c <_malloc_r+0x374>
  404bb0:	4b20      	ldr	r3, [pc, #128]	; (404c34 <_malloc_r+0x55c>)
  404bb2:	6819      	ldr	r1, [r3, #0]
  404bb4:	4459      	add	r1, fp
  404bb6:	6019      	str	r1, [r3, #0]
  404bb8:	e6b2      	b.n	404920 <_malloc_r+0x248>
  404bba:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404bbe:	2800      	cmp	r0, #0
  404bc0:	f47f aeae 	bne.w	404920 <_malloc_r+0x248>
  404bc4:	eb08 030b 	add.w	r3, r8, fp
  404bc8:	68ba      	ldr	r2, [r7, #8]
  404bca:	f043 0301 	orr.w	r3, r3, #1
  404bce:	6053      	str	r3, [r2, #4]
  404bd0:	e6ee      	b.n	4049b0 <_malloc_r+0x2d8>
  404bd2:	207f      	movs	r0, #127	; 0x7f
  404bd4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404bd8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404bdc:	e59e      	b.n	40471c <_malloc_r+0x44>
  404bde:	f104 0108 	add.w	r1, r4, #8
  404be2:	4628      	mov	r0, r5
  404be4:	9300      	str	r3, [sp, #0]
  404be6:	f001 fbd5 	bl	406394 <_free_r>
  404bea:	9b00      	ldr	r3, [sp, #0]
  404bec:	6819      	ldr	r1, [r3, #0]
  404bee:	e6df      	b.n	4049b0 <_malloc_r+0x2d8>
  404bf0:	2001      	movs	r0, #1
  404bf2:	f04f 0900 	mov.w	r9, #0
  404bf6:	e6bc      	b.n	404972 <_malloc_r+0x29a>
  404bf8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404bfc:	d805      	bhi.n	404c0a <_malloc_r+0x532>
  404bfe:	0bda      	lsrs	r2, r3, #15
  404c00:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404c04:	00c9      	lsls	r1, r1, #3
  404c06:	3277      	adds	r2, #119	; 0x77
  404c08:	e720      	b.n	404a4c <_malloc_r+0x374>
  404c0a:	f240 5154 	movw	r1, #1364	; 0x554
  404c0e:	428a      	cmp	r2, r1
  404c10:	d805      	bhi.n	404c1e <_malloc_r+0x546>
  404c12:	0c9a      	lsrs	r2, r3, #18
  404c14:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404c18:	00c9      	lsls	r1, r1, #3
  404c1a:	327c      	adds	r2, #124	; 0x7c
  404c1c:	e716      	b.n	404a4c <_malloc_r+0x374>
  404c1e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404c22:	227e      	movs	r2, #126	; 0x7e
  404c24:	e712      	b.n	404a4c <_malloc_r+0x374>
  404c26:	687b      	ldr	r3, [r7, #4]
  404c28:	e780      	b.n	404b2c <_malloc_r+0x454>
  404c2a:	08f0      	lsrs	r0, r6, #3
  404c2c:	f106 0308 	add.w	r3, r6, #8
  404c30:	e600      	b.n	404834 <_malloc_r+0x15c>
  404c32:	bf00      	nop
  404c34:	2040c768 	.word	0x2040c768

00404c38 <memcpy>:
  404c38:	4684      	mov	ip, r0
  404c3a:	ea41 0300 	orr.w	r3, r1, r0
  404c3e:	f013 0303 	ands.w	r3, r3, #3
  404c42:	d16d      	bne.n	404d20 <memcpy+0xe8>
  404c44:	3a40      	subs	r2, #64	; 0x40
  404c46:	d341      	bcc.n	404ccc <memcpy+0x94>
  404c48:	f851 3b04 	ldr.w	r3, [r1], #4
  404c4c:	f840 3b04 	str.w	r3, [r0], #4
  404c50:	f851 3b04 	ldr.w	r3, [r1], #4
  404c54:	f840 3b04 	str.w	r3, [r0], #4
  404c58:	f851 3b04 	ldr.w	r3, [r1], #4
  404c5c:	f840 3b04 	str.w	r3, [r0], #4
  404c60:	f851 3b04 	ldr.w	r3, [r1], #4
  404c64:	f840 3b04 	str.w	r3, [r0], #4
  404c68:	f851 3b04 	ldr.w	r3, [r1], #4
  404c6c:	f840 3b04 	str.w	r3, [r0], #4
  404c70:	f851 3b04 	ldr.w	r3, [r1], #4
  404c74:	f840 3b04 	str.w	r3, [r0], #4
  404c78:	f851 3b04 	ldr.w	r3, [r1], #4
  404c7c:	f840 3b04 	str.w	r3, [r0], #4
  404c80:	f851 3b04 	ldr.w	r3, [r1], #4
  404c84:	f840 3b04 	str.w	r3, [r0], #4
  404c88:	f851 3b04 	ldr.w	r3, [r1], #4
  404c8c:	f840 3b04 	str.w	r3, [r0], #4
  404c90:	f851 3b04 	ldr.w	r3, [r1], #4
  404c94:	f840 3b04 	str.w	r3, [r0], #4
  404c98:	f851 3b04 	ldr.w	r3, [r1], #4
  404c9c:	f840 3b04 	str.w	r3, [r0], #4
  404ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ca4:	f840 3b04 	str.w	r3, [r0], #4
  404ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cac:	f840 3b04 	str.w	r3, [r0], #4
  404cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cb4:	f840 3b04 	str.w	r3, [r0], #4
  404cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cbc:	f840 3b04 	str.w	r3, [r0], #4
  404cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cc4:	f840 3b04 	str.w	r3, [r0], #4
  404cc8:	3a40      	subs	r2, #64	; 0x40
  404cca:	d2bd      	bcs.n	404c48 <memcpy+0x10>
  404ccc:	3230      	adds	r2, #48	; 0x30
  404cce:	d311      	bcc.n	404cf4 <memcpy+0xbc>
  404cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cd4:	f840 3b04 	str.w	r3, [r0], #4
  404cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cdc:	f840 3b04 	str.w	r3, [r0], #4
  404ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ce4:	f840 3b04 	str.w	r3, [r0], #4
  404ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cec:	f840 3b04 	str.w	r3, [r0], #4
  404cf0:	3a10      	subs	r2, #16
  404cf2:	d2ed      	bcs.n	404cd0 <memcpy+0x98>
  404cf4:	320c      	adds	r2, #12
  404cf6:	d305      	bcc.n	404d04 <memcpy+0xcc>
  404cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cfc:	f840 3b04 	str.w	r3, [r0], #4
  404d00:	3a04      	subs	r2, #4
  404d02:	d2f9      	bcs.n	404cf8 <memcpy+0xc0>
  404d04:	3204      	adds	r2, #4
  404d06:	d008      	beq.n	404d1a <memcpy+0xe2>
  404d08:	07d2      	lsls	r2, r2, #31
  404d0a:	bf1c      	itt	ne
  404d0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d10:	f800 3b01 	strbne.w	r3, [r0], #1
  404d14:	d301      	bcc.n	404d1a <memcpy+0xe2>
  404d16:	880b      	ldrh	r3, [r1, #0]
  404d18:	8003      	strh	r3, [r0, #0]
  404d1a:	4660      	mov	r0, ip
  404d1c:	4770      	bx	lr
  404d1e:	bf00      	nop
  404d20:	2a08      	cmp	r2, #8
  404d22:	d313      	bcc.n	404d4c <memcpy+0x114>
  404d24:	078b      	lsls	r3, r1, #30
  404d26:	d08d      	beq.n	404c44 <memcpy+0xc>
  404d28:	f010 0303 	ands.w	r3, r0, #3
  404d2c:	d08a      	beq.n	404c44 <memcpy+0xc>
  404d2e:	f1c3 0304 	rsb	r3, r3, #4
  404d32:	1ad2      	subs	r2, r2, r3
  404d34:	07db      	lsls	r3, r3, #31
  404d36:	bf1c      	itt	ne
  404d38:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d3c:	f800 3b01 	strbne.w	r3, [r0], #1
  404d40:	d380      	bcc.n	404c44 <memcpy+0xc>
  404d42:	f831 3b02 	ldrh.w	r3, [r1], #2
  404d46:	f820 3b02 	strh.w	r3, [r0], #2
  404d4a:	e77b      	b.n	404c44 <memcpy+0xc>
  404d4c:	3a04      	subs	r2, #4
  404d4e:	d3d9      	bcc.n	404d04 <memcpy+0xcc>
  404d50:	3a01      	subs	r2, #1
  404d52:	f811 3b01 	ldrb.w	r3, [r1], #1
  404d56:	f800 3b01 	strb.w	r3, [r0], #1
  404d5a:	d2f9      	bcs.n	404d50 <memcpy+0x118>
  404d5c:	780b      	ldrb	r3, [r1, #0]
  404d5e:	7003      	strb	r3, [r0, #0]
  404d60:	784b      	ldrb	r3, [r1, #1]
  404d62:	7043      	strb	r3, [r0, #1]
  404d64:	788b      	ldrb	r3, [r1, #2]
  404d66:	7083      	strb	r3, [r0, #2]
  404d68:	4660      	mov	r0, ip
  404d6a:	4770      	bx	lr

00404d6c <memset>:
  404d6c:	b470      	push	{r4, r5, r6}
  404d6e:	0786      	lsls	r6, r0, #30
  404d70:	d046      	beq.n	404e00 <memset+0x94>
  404d72:	1e54      	subs	r4, r2, #1
  404d74:	2a00      	cmp	r2, #0
  404d76:	d041      	beq.n	404dfc <memset+0x90>
  404d78:	b2ca      	uxtb	r2, r1
  404d7a:	4603      	mov	r3, r0
  404d7c:	e002      	b.n	404d84 <memset+0x18>
  404d7e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404d82:	d33b      	bcc.n	404dfc <memset+0x90>
  404d84:	f803 2b01 	strb.w	r2, [r3], #1
  404d88:	079d      	lsls	r5, r3, #30
  404d8a:	d1f8      	bne.n	404d7e <memset+0x12>
  404d8c:	2c03      	cmp	r4, #3
  404d8e:	d92e      	bls.n	404dee <memset+0x82>
  404d90:	b2cd      	uxtb	r5, r1
  404d92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404d96:	2c0f      	cmp	r4, #15
  404d98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404d9c:	d919      	bls.n	404dd2 <memset+0x66>
  404d9e:	f103 0210 	add.w	r2, r3, #16
  404da2:	4626      	mov	r6, r4
  404da4:	3e10      	subs	r6, #16
  404da6:	2e0f      	cmp	r6, #15
  404da8:	f842 5c10 	str.w	r5, [r2, #-16]
  404dac:	f842 5c0c 	str.w	r5, [r2, #-12]
  404db0:	f842 5c08 	str.w	r5, [r2, #-8]
  404db4:	f842 5c04 	str.w	r5, [r2, #-4]
  404db8:	f102 0210 	add.w	r2, r2, #16
  404dbc:	d8f2      	bhi.n	404da4 <memset+0x38>
  404dbe:	f1a4 0210 	sub.w	r2, r4, #16
  404dc2:	f022 020f 	bic.w	r2, r2, #15
  404dc6:	f004 040f 	and.w	r4, r4, #15
  404dca:	3210      	adds	r2, #16
  404dcc:	2c03      	cmp	r4, #3
  404dce:	4413      	add	r3, r2
  404dd0:	d90d      	bls.n	404dee <memset+0x82>
  404dd2:	461e      	mov	r6, r3
  404dd4:	4622      	mov	r2, r4
  404dd6:	3a04      	subs	r2, #4
  404dd8:	2a03      	cmp	r2, #3
  404dda:	f846 5b04 	str.w	r5, [r6], #4
  404dde:	d8fa      	bhi.n	404dd6 <memset+0x6a>
  404de0:	1f22      	subs	r2, r4, #4
  404de2:	f022 0203 	bic.w	r2, r2, #3
  404de6:	3204      	adds	r2, #4
  404de8:	4413      	add	r3, r2
  404dea:	f004 0403 	and.w	r4, r4, #3
  404dee:	b12c      	cbz	r4, 404dfc <memset+0x90>
  404df0:	b2c9      	uxtb	r1, r1
  404df2:	441c      	add	r4, r3
  404df4:	f803 1b01 	strb.w	r1, [r3], #1
  404df8:	429c      	cmp	r4, r3
  404dfa:	d1fb      	bne.n	404df4 <memset+0x88>
  404dfc:	bc70      	pop	{r4, r5, r6}
  404dfe:	4770      	bx	lr
  404e00:	4614      	mov	r4, r2
  404e02:	4603      	mov	r3, r0
  404e04:	e7c2      	b.n	404d8c <memset+0x20>
  404e06:	bf00      	nop

00404e08 <__malloc_lock>:
  404e08:	4801      	ldr	r0, [pc, #4]	; (404e10 <__malloc_lock+0x8>)
  404e0a:	f001 bd5d 	b.w	4068c8 <__retarget_lock_acquire_recursive>
  404e0e:	bf00      	nop
  404e10:	2040c89c 	.word	0x2040c89c

00404e14 <__malloc_unlock>:
  404e14:	4801      	ldr	r0, [pc, #4]	; (404e1c <__malloc_unlock+0x8>)
  404e16:	f001 bd59 	b.w	4068cc <__retarget_lock_release_recursive>
  404e1a:	bf00      	nop
  404e1c:	2040c89c 	.word	0x2040c89c

00404e20 <_sbrk_r>:
  404e20:	b538      	push	{r3, r4, r5, lr}
  404e22:	4c07      	ldr	r4, [pc, #28]	; (404e40 <_sbrk_r+0x20>)
  404e24:	2300      	movs	r3, #0
  404e26:	4605      	mov	r5, r0
  404e28:	4608      	mov	r0, r1
  404e2a:	6023      	str	r3, [r4, #0]
  404e2c:	f7fd f90a 	bl	402044 <_sbrk>
  404e30:	1c43      	adds	r3, r0, #1
  404e32:	d000      	beq.n	404e36 <_sbrk_r+0x16>
  404e34:	bd38      	pop	{r3, r4, r5, pc}
  404e36:	6823      	ldr	r3, [r4, #0]
  404e38:	2b00      	cmp	r3, #0
  404e3a:	d0fb      	beq.n	404e34 <_sbrk_r+0x14>
  404e3c:	602b      	str	r3, [r5, #0]
  404e3e:	bd38      	pop	{r3, r4, r5, pc}
  404e40:	2040c8b0 	.word	0x2040c8b0

00404e44 <setbuf>:
  404e44:	2900      	cmp	r1, #0
  404e46:	bf0c      	ite	eq
  404e48:	2202      	moveq	r2, #2
  404e4a:	2200      	movne	r2, #0
  404e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404e50:	f000 b800 	b.w	404e54 <setvbuf>

00404e54 <setvbuf>:
  404e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404e58:	4c61      	ldr	r4, [pc, #388]	; (404fe0 <setvbuf+0x18c>)
  404e5a:	6825      	ldr	r5, [r4, #0]
  404e5c:	b083      	sub	sp, #12
  404e5e:	4604      	mov	r4, r0
  404e60:	460f      	mov	r7, r1
  404e62:	4690      	mov	r8, r2
  404e64:	461e      	mov	r6, r3
  404e66:	b115      	cbz	r5, 404e6e <setvbuf+0x1a>
  404e68:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404e6a:	2b00      	cmp	r3, #0
  404e6c:	d064      	beq.n	404f38 <setvbuf+0xe4>
  404e6e:	f1b8 0f02 	cmp.w	r8, #2
  404e72:	d006      	beq.n	404e82 <setvbuf+0x2e>
  404e74:	f1b8 0f01 	cmp.w	r8, #1
  404e78:	f200 809f 	bhi.w	404fba <setvbuf+0x166>
  404e7c:	2e00      	cmp	r6, #0
  404e7e:	f2c0 809c 	blt.w	404fba <setvbuf+0x166>
  404e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404e84:	07d8      	lsls	r0, r3, #31
  404e86:	d534      	bpl.n	404ef2 <setvbuf+0x9e>
  404e88:	4621      	mov	r1, r4
  404e8a:	4628      	mov	r0, r5
  404e8c:	f001 f904 	bl	406098 <_fflush_r>
  404e90:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404e92:	b141      	cbz	r1, 404ea6 <setvbuf+0x52>
  404e94:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404e98:	4299      	cmp	r1, r3
  404e9a:	d002      	beq.n	404ea2 <setvbuf+0x4e>
  404e9c:	4628      	mov	r0, r5
  404e9e:	f001 fa79 	bl	406394 <_free_r>
  404ea2:	2300      	movs	r3, #0
  404ea4:	6323      	str	r3, [r4, #48]	; 0x30
  404ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404eaa:	2200      	movs	r2, #0
  404eac:	61a2      	str	r2, [r4, #24]
  404eae:	6062      	str	r2, [r4, #4]
  404eb0:	061a      	lsls	r2, r3, #24
  404eb2:	d43a      	bmi.n	404f2a <setvbuf+0xd6>
  404eb4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404eb8:	f023 0303 	bic.w	r3, r3, #3
  404ebc:	f1b8 0f02 	cmp.w	r8, #2
  404ec0:	81a3      	strh	r3, [r4, #12]
  404ec2:	d01d      	beq.n	404f00 <setvbuf+0xac>
  404ec4:	ab01      	add	r3, sp, #4
  404ec6:	466a      	mov	r2, sp
  404ec8:	4621      	mov	r1, r4
  404eca:	4628      	mov	r0, r5
  404ecc:	f001 fd00 	bl	4068d0 <__swhatbuf_r>
  404ed0:	89a3      	ldrh	r3, [r4, #12]
  404ed2:	4318      	orrs	r0, r3
  404ed4:	81a0      	strh	r0, [r4, #12]
  404ed6:	2e00      	cmp	r6, #0
  404ed8:	d132      	bne.n	404f40 <setvbuf+0xec>
  404eda:	9e00      	ldr	r6, [sp, #0]
  404edc:	4630      	mov	r0, r6
  404ede:	f7ff fbf3 	bl	4046c8 <malloc>
  404ee2:	4607      	mov	r7, r0
  404ee4:	2800      	cmp	r0, #0
  404ee6:	d06b      	beq.n	404fc0 <setvbuf+0x16c>
  404ee8:	89a3      	ldrh	r3, [r4, #12]
  404eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404eee:	81a3      	strh	r3, [r4, #12]
  404ef0:	e028      	b.n	404f44 <setvbuf+0xf0>
  404ef2:	89a3      	ldrh	r3, [r4, #12]
  404ef4:	0599      	lsls	r1, r3, #22
  404ef6:	d4c7      	bmi.n	404e88 <setvbuf+0x34>
  404ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404efa:	f001 fce5 	bl	4068c8 <__retarget_lock_acquire_recursive>
  404efe:	e7c3      	b.n	404e88 <setvbuf+0x34>
  404f00:	2500      	movs	r5, #0
  404f02:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404f04:	2600      	movs	r6, #0
  404f06:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404f0a:	f043 0302 	orr.w	r3, r3, #2
  404f0e:	2001      	movs	r0, #1
  404f10:	60a6      	str	r6, [r4, #8]
  404f12:	07ce      	lsls	r6, r1, #31
  404f14:	81a3      	strh	r3, [r4, #12]
  404f16:	6022      	str	r2, [r4, #0]
  404f18:	6122      	str	r2, [r4, #16]
  404f1a:	6160      	str	r0, [r4, #20]
  404f1c:	d401      	bmi.n	404f22 <setvbuf+0xce>
  404f1e:	0598      	lsls	r0, r3, #22
  404f20:	d53e      	bpl.n	404fa0 <setvbuf+0x14c>
  404f22:	4628      	mov	r0, r5
  404f24:	b003      	add	sp, #12
  404f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404f2a:	6921      	ldr	r1, [r4, #16]
  404f2c:	4628      	mov	r0, r5
  404f2e:	f001 fa31 	bl	406394 <_free_r>
  404f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f36:	e7bd      	b.n	404eb4 <setvbuf+0x60>
  404f38:	4628      	mov	r0, r5
  404f3a:	f001 f905 	bl	406148 <__sinit>
  404f3e:	e796      	b.n	404e6e <setvbuf+0x1a>
  404f40:	2f00      	cmp	r7, #0
  404f42:	d0cb      	beq.n	404edc <setvbuf+0x88>
  404f44:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404f46:	2b00      	cmp	r3, #0
  404f48:	d033      	beq.n	404fb2 <setvbuf+0x15e>
  404f4a:	9b00      	ldr	r3, [sp, #0]
  404f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404f50:	6027      	str	r7, [r4, #0]
  404f52:	429e      	cmp	r6, r3
  404f54:	bf1c      	itt	ne
  404f56:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404f5a:	81a2      	strhne	r2, [r4, #12]
  404f5c:	f1b8 0f01 	cmp.w	r8, #1
  404f60:	bf04      	itt	eq
  404f62:	f042 0201 	orreq.w	r2, r2, #1
  404f66:	81a2      	strheq	r2, [r4, #12]
  404f68:	b292      	uxth	r2, r2
  404f6a:	f012 0308 	ands.w	r3, r2, #8
  404f6e:	6127      	str	r7, [r4, #16]
  404f70:	6166      	str	r6, [r4, #20]
  404f72:	d00e      	beq.n	404f92 <setvbuf+0x13e>
  404f74:	07d1      	lsls	r1, r2, #31
  404f76:	d51a      	bpl.n	404fae <setvbuf+0x15a>
  404f78:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404f7a:	4276      	negs	r6, r6
  404f7c:	2300      	movs	r3, #0
  404f7e:	f015 0501 	ands.w	r5, r5, #1
  404f82:	61a6      	str	r6, [r4, #24]
  404f84:	60a3      	str	r3, [r4, #8]
  404f86:	d009      	beq.n	404f9c <setvbuf+0x148>
  404f88:	2500      	movs	r5, #0
  404f8a:	4628      	mov	r0, r5
  404f8c:	b003      	add	sp, #12
  404f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404f92:	60a3      	str	r3, [r4, #8]
  404f94:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404f96:	f015 0501 	ands.w	r5, r5, #1
  404f9a:	d1f5      	bne.n	404f88 <setvbuf+0x134>
  404f9c:	0593      	lsls	r3, r2, #22
  404f9e:	d4c0      	bmi.n	404f22 <setvbuf+0xce>
  404fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404fa2:	f001 fc93 	bl	4068cc <__retarget_lock_release_recursive>
  404fa6:	4628      	mov	r0, r5
  404fa8:	b003      	add	sp, #12
  404faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404fae:	60a6      	str	r6, [r4, #8]
  404fb0:	e7f0      	b.n	404f94 <setvbuf+0x140>
  404fb2:	4628      	mov	r0, r5
  404fb4:	f001 f8c8 	bl	406148 <__sinit>
  404fb8:	e7c7      	b.n	404f4a <setvbuf+0xf6>
  404fba:	f04f 35ff 	mov.w	r5, #4294967295
  404fbe:	e7b0      	b.n	404f22 <setvbuf+0xce>
  404fc0:	f8dd 9000 	ldr.w	r9, [sp]
  404fc4:	45b1      	cmp	r9, r6
  404fc6:	d004      	beq.n	404fd2 <setvbuf+0x17e>
  404fc8:	4648      	mov	r0, r9
  404fca:	f7ff fb7d 	bl	4046c8 <malloc>
  404fce:	4607      	mov	r7, r0
  404fd0:	b920      	cbnz	r0, 404fdc <setvbuf+0x188>
  404fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404fd6:	f04f 35ff 	mov.w	r5, #4294967295
  404fda:	e792      	b.n	404f02 <setvbuf+0xae>
  404fdc:	464e      	mov	r6, r9
  404fde:	e783      	b.n	404ee8 <setvbuf+0x94>
  404fe0:	20400018 	.word	0x20400018
	...

00405000 <strlen>:
  405000:	f890 f000 	pld	[r0]
  405004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405008:	f020 0107 	bic.w	r1, r0, #7
  40500c:	f06f 0c00 	mvn.w	ip, #0
  405010:	f010 0407 	ands.w	r4, r0, #7
  405014:	f891 f020 	pld	[r1, #32]
  405018:	f040 8049 	bne.w	4050ae <strlen+0xae>
  40501c:	f04f 0400 	mov.w	r4, #0
  405020:	f06f 0007 	mvn.w	r0, #7
  405024:	e9d1 2300 	ldrd	r2, r3, [r1]
  405028:	f891 f040 	pld	[r1, #64]	; 0x40
  40502c:	f100 0008 	add.w	r0, r0, #8
  405030:	fa82 f24c 	uadd8	r2, r2, ip
  405034:	faa4 f28c 	sel	r2, r4, ip
  405038:	fa83 f34c 	uadd8	r3, r3, ip
  40503c:	faa2 f38c 	sel	r3, r2, ip
  405040:	bb4b      	cbnz	r3, 405096 <strlen+0x96>
  405042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405046:	fa82 f24c 	uadd8	r2, r2, ip
  40504a:	f100 0008 	add.w	r0, r0, #8
  40504e:	faa4 f28c 	sel	r2, r4, ip
  405052:	fa83 f34c 	uadd8	r3, r3, ip
  405056:	faa2 f38c 	sel	r3, r2, ip
  40505a:	b9e3      	cbnz	r3, 405096 <strlen+0x96>
  40505c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405060:	fa82 f24c 	uadd8	r2, r2, ip
  405064:	f100 0008 	add.w	r0, r0, #8
  405068:	faa4 f28c 	sel	r2, r4, ip
  40506c:	fa83 f34c 	uadd8	r3, r3, ip
  405070:	faa2 f38c 	sel	r3, r2, ip
  405074:	b97b      	cbnz	r3, 405096 <strlen+0x96>
  405076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40507a:	f101 0120 	add.w	r1, r1, #32
  40507e:	fa82 f24c 	uadd8	r2, r2, ip
  405082:	f100 0008 	add.w	r0, r0, #8
  405086:	faa4 f28c 	sel	r2, r4, ip
  40508a:	fa83 f34c 	uadd8	r3, r3, ip
  40508e:	faa2 f38c 	sel	r3, r2, ip
  405092:	2b00      	cmp	r3, #0
  405094:	d0c6      	beq.n	405024 <strlen+0x24>
  405096:	2a00      	cmp	r2, #0
  405098:	bf04      	itt	eq
  40509a:	3004      	addeq	r0, #4
  40509c:	461a      	moveq	r2, r3
  40509e:	ba12      	rev	r2, r2
  4050a0:	fab2 f282 	clz	r2, r2
  4050a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4050a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4050ac:	4770      	bx	lr
  4050ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4050b2:	f004 0503 	and.w	r5, r4, #3
  4050b6:	f1c4 0000 	rsb	r0, r4, #0
  4050ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4050be:	f014 0f04 	tst.w	r4, #4
  4050c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4050c6:	fa0c f505 	lsl.w	r5, ip, r5
  4050ca:	ea62 0205 	orn	r2, r2, r5
  4050ce:	bf1c      	itt	ne
  4050d0:	ea63 0305 	ornne	r3, r3, r5
  4050d4:	4662      	movne	r2, ip
  4050d6:	f04f 0400 	mov.w	r4, #0
  4050da:	e7a9      	b.n	405030 <strlen+0x30>

004050dc <__sprint_r.part.0>:
  4050dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4050e2:	049c      	lsls	r4, r3, #18
  4050e4:	4693      	mov	fp, r2
  4050e6:	d52f      	bpl.n	405148 <__sprint_r.part.0+0x6c>
  4050e8:	6893      	ldr	r3, [r2, #8]
  4050ea:	6812      	ldr	r2, [r2, #0]
  4050ec:	b353      	cbz	r3, 405144 <__sprint_r.part.0+0x68>
  4050ee:	460e      	mov	r6, r1
  4050f0:	4607      	mov	r7, r0
  4050f2:	f102 0908 	add.w	r9, r2, #8
  4050f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4050fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4050fe:	d017      	beq.n	405130 <__sprint_r.part.0+0x54>
  405100:	3d04      	subs	r5, #4
  405102:	2400      	movs	r4, #0
  405104:	e001      	b.n	40510a <__sprint_r.part.0+0x2e>
  405106:	45a0      	cmp	r8, r4
  405108:	d010      	beq.n	40512c <__sprint_r.part.0+0x50>
  40510a:	4632      	mov	r2, r6
  40510c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405110:	4638      	mov	r0, r7
  405112:	f001 f8bb 	bl	40628c <_fputwc_r>
  405116:	1c43      	adds	r3, r0, #1
  405118:	f104 0401 	add.w	r4, r4, #1
  40511c:	d1f3      	bne.n	405106 <__sprint_r.part.0+0x2a>
  40511e:	2300      	movs	r3, #0
  405120:	f8cb 3008 	str.w	r3, [fp, #8]
  405124:	f8cb 3004 	str.w	r3, [fp, #4]
  405128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40512c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405130:	f02a 0a03 	bic.w	sl, sl, #3
  405134:	eba3 030a 	sub.w	r3, r3, sl
  405138:	f8cb 3008 	str.w	r3, [fp, #8]
  40513c:	f109 0908 	add.w	r9, r9, #8
  405140:	2b00      	cmp	r3, #0
  405142:	d1d8      	bne.n	4050f6 <__sprint_r.part.0+0x1a>
  405144:	2000      	movs	r0, #0
  405146:	e7ea      	b.n	40511e <__sprint_r.part.0+0x42>
  405148:	f001 fa0a 	bl	406560 <__sfvwrite_r>
  40514c:	2300      	movs	r3, #0
  40514e:	f8cb 3008 	str.w	r3, [fp, #8]
  405152:	f8cb 3004 	str.w	r3, [fp, #4]
  405156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40515a:	bf00      	nop

0040515c <_vfiprintf_r>:
  40515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405160:	b0ad      	sub	sp, #180	; 0xb4
  405162:	461d      	mov	r5, r3
  405164:	468b      	mov	fp, r1
  405166:	4690      	mov	r8, r2
  405168:	9307      	str	r3, [sp, #28]
  40516a:	9006      	str	r0, [sp, #24]
  40516c:	b118      	cbz	r0, 405176 <_vfiprintf_r+0x1a>
  40516e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405170:	2b00      	cmp	r3, #0
  405172:	f000 80f3 	beq.w	40535c <_vfiprintf_r+0x200>
  405176:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40517a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40517e:	07df      	lsls	r7, r3, #31
  405180:	b281      	uxth	r1, r0
  405182:	d402      	bmi.n	40518a <_vfiprintf_r+0x2e>
  405184:	058e      	lsls	r6, r1, #22
  405186:	f140 80fc 	bpl.w	405382 <_vfiprintf_r+0x226>
  40518a:	048c      	lsls	r4, r1, #18
  40518c:	d40a      	bmi.n	4051a4 <_vfiprintf_r+0x48>
  40518e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405192:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40519a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40519e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4051a2:	b289      	uxth	r1, r1
  4051a4:	0708      	lsls	r0, r1, #28
  4051a6:	f140 80b3 	bpl.w	405310 <_vfiprintf_r+0x1b4>
  4051aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4051ae:	2b00      	cmp	r3, #0
  4051b0:	f000 80ae 	beq.w	405310 <_vfiprintf_r+0x1b4>
  4051b4:	f001 031a 	and.w	r3, r1, #26
  4051b8:	2b0a      	cmp	r3, #10
  4051ba:	f000 80b5 	beq.w	405328 <_vfiprintf_r+0x1cc>
  4051be:	2300      	movs	r3, #0
  4051c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4051c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4051c6:	9311      	str	r3, [sp, #68]	; 0x44
  4051c8:	9310      	str	r3, [sp, #64]	; 0x40
  4051ca:	9303      	str	r3, [sp, #12]
  4051cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4051d0:	46ca      	mov	sl, r9
  4051d2:	f8cd b010 	str.w	fp, [sp, #16]
  4051d6:	f898 3000 	ldrb.w	r3, [r8]
  4051da:	4644      	mov	r4, r8
  4051dc:	b1fb      	cbz	r3, 40521e <_vfiprintf_r+0xc2>
  4051de:	2b25      	cmp	r3, #37	; 0x25
  4051e0:	d102      	bne.n	4051e8 <_vfiprintf_r+0x8c>
  4051e2:	e01c      	b.n	40521e <_vfiprintf_r+0xc2>
  4051e4:	2b25      	cmp	r3, #37	; 0x25
  4051e6:	d003      	beq.n	4051f0 <_vfiprintf_r+0x94>
  4051e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4051ec:	2b00      	cmp	r3, #0
  4051ee:	d1f9      	bne.n	4051e4 <_vfiprintf_r+0x88>
  4051f0:	eba4 0508 	sub.w	r5, r4, r8
  4051f4:	b19d      	cbz	r5, 40521e <_vfiprintf_r+0xc2>
  4051f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051fa:	f8ca 8000 	str.w	r8, [sl]
  4051fe:	3301      	adds	r3, #1
  405200:	442a      	add	r2, r5
  405202:	2b07      	cmp	r3, #7
  405204:	f8ca 5004 	str.w	r5, [sl, #4]
  405208:	9211      	str	r2, [sp, #68]	; 0x44
  40520a:	9310      	str	r3, [sp, #64]	; 0x40
  40520c:	dd7a      	ble.n	405304 <_vfiprintf_r+0x1a8>
  40520e:	2a00      	cmp	r2, #0
  405210:	f040 84b0 	bne.w	405b74 <_vfiprintf_r+0xa18>
  405214:	9b03      	ldr	r3, [sp, #12]
  405216:	9210      	str	r2, [sp, #64]	; 0x40
  405218:	442b      	add	r3, r5
  40521a:	46ca      	mov	sl, r9
  40521c:	9303      	str	r3, [sp, #12]
  40521e:	7823      	ldrb	r3, [r4, #0]
  405220:	2b00      	cmp	r3, #0
  405222:	f000 83e0 	beq.w	4059e6 <_vfiprintf_r+0x88a>
  405226:	2000      	movs	r0, #0
  405228:	f04f 0300 	mov.w	r3, #0
  40522c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405230:	f104 0801 	add.w	r8, r4, #1
  405234:	7862      	ldrb	r2, [r4, #1]
  405236:	4605      	mov	r5, r0
  405238:	4606      	mov	r6, r0
  40523a:	4603      	mov	r3, r0
  40523c:	f04f 34ff 	mov.w	r4, #4294967295
  405240:	f108 0801 	add.w	r8, r8, #1
  405244:	f1a2 0120 	sub.w	r1, r2, #32
  405248:	2958      	cmp	r1, #88	; 0x58
  40524a:	f200 82de 	bhi.w	40580a <_vfiprintf_r+0x6ae>
  40524e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405252:	0221      	.short	0x0221
  405254:	02dc02dc 	.word	0x02dc02dc
  405258:	02dc0229 	.word	0x02dc0229
  40525c:	02dc02dc 	.word	0x02dc02dc
  405260:	02dc02dc 	.word	0x02dc02dc
  405264:	028902dc 	.word	0x028902dc
  405268:	02dc0295 	.word	0x02dc0295
  40526c:	02bd00a2 	.word	0x02bd00a2
  405270:	019f02dc 	.word	0x019f02dc
  405274:	01a401a4 	.word	0x01a401a4
  405278:	01a401a4 	.word	0x01a401a4
  40527c:	01a401a4 	.word	0x01a401a4
  405280:	01a401a4 	.word	0x01a401a4
  405284:	02dc01a4 	.word	0x02dc01a4
  405288:	02dc02dc 	.word	0x02dc02dc
  40528c:	02dc02dc 	.word	0x02dc02dc
  405290:	02dc02dc 	.word	0x02dc02dc
  405294:	02dc02dc 	.word	0x02dc02dc
  405298:	01b202dc 	.word	0x01b202dc
  40529c:	02dc02dc 	.word	0x02dc02dc
  4052a0:	02dc02dc 	.word	0x02dc02dc
  4052a4:	02dc02dc 	.word	0x02dc02dc
  4052a8:	02dc02dc 	.word	0x02dc02dc
  4052ac:	02dc02dc 	.word	0x02dc02dc
  4052b0:	02dc0197 	.word	0x02dc0197
  4052b4:	02dc02dc 	.word	0x02dc02dc
  4052b8:	02dc02dc 	.word	0x02dc02dc
  4052bc:	02dc019b 	.word	0x02dc019b
  4052c0:	025302dc 	.word	0x025302dc
  4052c4:	02dc02dc 	.word	0x02dc02dc
  4052c8:	02dc02dc 	.word	0x02dc02dc
  4052cc:	02dc02dc 	.word	0x02dc02dc
  4052d0:	02dc02dc 	.word	0x02dc02dc
  4052d4:	02dc02dc 	.word	0x02dc02dc
  4052d8:	021b025a 	.word	0x021b025a
  4052dc:	02dc02dc 	.word	0x02dc02dc
  4052e0:	026e02dc 	.word	0x026e02dc
  4052e4:	02dc021b 	.word	0x02dc021b
  4052e8:	027302dc 	.word	0x027302dc
  4052ec:	01f502dc 	.word	0x01f502dc
  4052f0:	02090182 	.word	0x02090182
  4052f4:	02dc02d7 	.word	0x02dc02d7
  4052f8:	02dc029a 	.word	0x02dc029a
  4052fc:	02dc00a7 	.word	0x02dc00a7
  405300:	022e02dc 	.word	0x022e02dc
  405304:	f10a 0a08 	add.w	sl, sl, #8
  405308:	9b03      	ldr	r3, [sp, #12]
  40530a:	442b      	add	r3, r5
  40530c:	9303      	str	r3, [sp, #12]
  40530e:	e786      	b.n	40521e <_vfiprintf_r+0xc2>
  405310:	4659      	mov	r1, fp
  405312:	9806      	ldr	r0, [sp, #24]
  405314:	f000 fdac 	bl	405e70 <__swsetup_r>
  405318:	bb18      	cbnz	r0, 405362 <_vfiprintf_r+0x206>
  40531a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40531e:	f001 031a 	and.w	r3, r1, #26
  405322:	2b0a      	cmp	r3, #10
  405324:	f47f af4b 	bne.w	4051be <_vfiprintf_r+0x62>
  405328:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40532c:	2b00      	cmp	r3, #0
  40532e:	f6ff af46 	blt.w	4051be <_vfiprintf_r+0x62>
  405332:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405336:	07db      	lsls	r3, r3, #31
  405338:	d405      	bmi.n	405346 <_vfiprintf_r+0x1ea>
  40533a:	058f      	lsls	r7, r1, #22
  40533c:	d403      	bmi.n	405346 <_vfiprintf_r+0x1ea>
  40533e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405342:	f001 fac3 	bl	4068cc <__retarget_lock_release_recursive>
  405346:	462b      	mov	r3, r5
  405348:	4642      	mov	r2, r8
  40534a:	4659      	mov	r1, fp
  40534c:	9806      	ldr	r0, [sp, #24]
  40534e:	f000 fd4d 	bl	405dec <__sbprintf>
  405352:	9003      	str	r0, [sp, #12]
  405354:	9803      	ldr	r0, [sp, #12]
  405356:	b02d      	add	sp, #180	; 0xb4
  405358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40535c:	f000 fef4 	bl	406148 <__sinit>
  405360:	e709      	b.n	405176 <_vfiprintf_r+0x1a>
  405362:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405366:	07d9      	lsls	r1, r3, #31
  405368:	d404      	bmi.n	405374 <_vfiprintf_r+0x218>
  40536a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40536e:	059a      	lsls	r2, r3, #22
  405370:	f140 84aa 	bpl.w	405cc8 <_vfiprintf_r+0xb6c>
  405374:	f04f 33ff 	mov.w	r3, #4294967295
  405378:	9303      	str	r3, [sp, #12]
  40537a:	9803      	ldr	r0, [sp, #12]
  40537c:	b02d      	add	sp, #180	; 0xb4
  40537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405382:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405386:	f001 fa9f 	bl	4068c8 <__retarget_lock_acquire_recursive>
  40538a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40538e:	b281      	uxth	r1, r0
  405390:	e6fb      	b.n	40518a <_vfiprintf_r+0x2e>
  405392:	4276      	negs	r6, r6
  405394:	9207      	str	r2, [sp, #28]
  405396:	f043 0304 	orr.w	r3, r3, #4
  40539a:	f898 2000 	ldrb.w	r2, [r8]
  40539e:	e74f      	b.n	405240 <_vfiprintf_r+0xe4>
  4053a0:	9608      	str	r6, [sp, #32]
  4053a2:	069e      	lsls	r6, r3, #26
  4053a4:	f100 8450 	bmi.w	405c48 <_vfiprintf_r+0xaec>
  4053a8:	9907      	ldr	r1, [sp, #28]
  4053aa:	06dd      	lsls	r5, r3, #27
  4053ac:	460a      	mov	r2, r1
  4053ae:	f100 83ef 	bmi.w	405b90 <_vfiprintf_r+0xa34>
  4053b2:	0658      	lsls	r0, r3, #25
  4053b4:	f140 83ec 	bpl.w	405b90 <_vfiprintf_r+0xa34>
  4053b8:	880e      	ldrh	r6, [r1, #0]
  4053ba:	3104      	adds	r1, #4
  4053bc:	2700      	movs	r7, #0
  4053be:	2201      	movs	r2, #1
  4053c0:	9107      	str	r1, [sp, #28]
  4053c2:	f04f 0100 	mov.w	r1, #0
  4053c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4053ca:	2500      	movs	r5, #0
  4053cc:	1c61      	adds	r1, r4, #1
  4053ce:	f000 8116 	beq.w	4055fe <_vfiprintf_r+0x4a2>
  4053d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4053d6:	9102      	str	r1, [sp, #8]
  4053d8:	ea56 0107 	orrs.w	r1, r6, r7
  4053dc:	f040 8114 	bne.w	405608 <_vfiprintf_r+0x4ac>
  4053e0:	2c00      	cmp	r4, #0
  4053e2:	f040 835c 	bne.w	405a9e <_vfiprintf_r+0x942>
  4053e6:	2a00      	cmp	r2, #0
  4053e8:	f040 83b7 	bne.w	405b5a <_vfiprintf_r+0x9fe>
  4053ec:	f013 0301 	ands.w	r3, r3, #1
  4053f0:	9305      	str	r3, [sp, #20]
  4053f2:	f000 8457 	beq.w	405ca4 <_vfiprintf_r+0xb48>
  4053f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4053fa:	2330      	movs	r3, #48	; 0x30
  4053fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405400:	9b05      	ldr	r3, [sp, #20]
  405402:	42a3      	cmp	r3, r4
  405404:	bfb8      	it	lt
  405406:	4623      	movlt	r3, r4
  405408:	9301      	str	r3, [sp, #4]
  40540a:	b10d      	cbz	r5, 405410 <_vfiprintf_r+0x2b4>
  40540c:	3301      	adds	r3, #1
  40540e:	9301      	str	r3, [sp, #4]
  405410:	9b02      	ldr	r3, [sp, #8]
  405412:	f013 0302 	ands.w	r3, r3, #2
  405416:	9309      	str	r3, [sp, #36]	; 0x24
  405418:	d002      	beq.n	405420 <_vfiprintf_r+0x2c4>
  40541a:	9b01      	ldr	r3, [sp, #4]
  40541c:	3302      	adds	r3, #2
  40541e:	9301      	str	r3, [sp, #4]
  405420:	9b02      	ldr	r3, [sp, #8]
  405422:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405426:	930a      	str	r3, [sp, #40]	; 0x28
  405428:	f040 8217 	bne.w	40585a <_vfiprintf_r+0x6fe>
  40542c:	9b08      	ldr	r3, [sp, #32]
  40542e:	9a01      	ldr	r2, [sp, #4]
  405430:	1a9d      	subs	r5, r3, r2
  405432:	2d00      	cmp	r5, #0
  405434:	f340 8211 	ble.w	40585a <_vfiprintf_r+0x6fe>
  405438:	2d10      	cmp	r5, #16
  40543a:	f340 8490 	ble.w	405d5e <_vfiprintf_r+0xc02>
  40543e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405440:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405442:	4ec4      	ldr	r6, [pc, #784]	; (405754 <_vfiprintf_r+0x5f8>)
  405444:	46d6      	mov	lr, sl
  405446:	2710      	movs	r7, #16
  405448:	46a2      	mov	sl, r4
  40544a:	4619      	mov	r1, r3
  40544c:	9c06      	ldr	r4, [sp, #24]
  40544e:	e007      	b.n	405460 <_vfiprintf_r+0x304>
  405450:	f101 0c02 	add.w	ip, r1, #2
  405454:	f10e 0e08 	add.w	lr, lr, #8
  405458:	4601      	mov	r1, r0
  40545a:	3d10      	subs	r5, #16
  40545c:	2d10      	cmp	r5, #16
  40545e:	dd11      	ble.n	405484 <_vfiprintf_r+0x328>
  405460:	1c48      	adds	r0, r1, #1
  405462:	3210      	adds	r2, #16
  405464:	2807      	cmp	r0, #7
  405466:	9211      	str	r2, [sp, #68]	; 0x44
  405468:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40546c:	9010      	str	r0, [sp, #64]	; 0x40
  40546e:	ddef      	ble.n	405450 <_vfiprintf_r+0x2f4>
  405470:	2a00      	cmp	r2, #0
  405472:	f040 81e4 	bne.w	40583e <_vfiprintf_r+0x6e2>
  405476:	3d10      	subs	r5, #16
  405478:	2d10      	cmp	r5, #16
  40547a:	4611      	mov	r1, r2
  40547c:	f04f 0c01 	mov.w	ip, #1
  405480:	46ce      	mov	lr, r9
  405482:	dced      	bgt.n	405460 <_vfiprintf_r+0x304>
  405484:	4654      	mov	r4, sl
  405486:	4661      	mov	r1, ip
  405488:	46f2      	mov	sl, lr
  40548a:	442a      	add	r2, r5
  40548c:	2907      	cmp	r1, #7
  40548e:	9211      	str	r2, [sp, #68]	; 0x44
  405490:	f8ca 6000 	str.w	r6, [sl]
  405494:	f8ca 5004 	str.w	r5, [sl, #4]
  405498:	9110      	str	r1, [sp, #64]	; 0x40
  40549a:	f300 82ec 	bgt.w	405a76 <_vfiprintf_r+0x91a>
  40549e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4054a2:	f10a 0a08 	add.w	sl, sl, #8
  4054a6:	1c48      	adds	r0, r1, #1
  4054a8:	2d00      	cmp	r5, #0
  4054aa:	f040 81de 	bne.w	40586a <_vfiprintf_r+0x70e>
  4054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4054b0:	2b00      	cmp	r3, #0
  4054b2:	f000 81f8 	beq.w	4058a6 <_vfiprintf_r+0x74a>
  4054b6:	3202      	adds	r2, #2
  4054b8:	a90e      	add	r1, sp, #56	; 0x38
  4054ba:	2302      	movs	r3, #2
  4054bc:	2807      	cmp	r0, #7
  4054be:	9211      	str	r2, [sp, #68]	; 0x44
  4054c0:	9010      	str	r0, [sp, #64]	; 0x40
  4054c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4054c6:	f340 81ea 	ble.w	40589e <_vfiprintf_r+0x742>
  4054ca:	2a00      	cmp	r2, #0
  4054cc:	f040 838c 	bne.w	405be8 <_vfiprintf_r+0xa8c>
  4054d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054d2:	2b80      	cmp	r3, #128	; 0x80
  4054d4:	f04f 0001 	mov.w	r0, #1
  4054d8:	4611      	mov	r1, r2
  4054da:	46ca      	mov	sl, r9
  4054dc:	f040 81e7 	bne.w	4058ae <_vfiprintf_r+0x752>
  4054e0:	9b08      	ldr	r3, [sp, #32]
  4054e2:	9d01      	ldr	r5, [sp, #4]
  4054e4:	1b5e      	subs	r6, r3, r5
  4054e6:	2e00      	cmp	r6, #0
  4054e8:	f340 81e1 	ble.w	4058ae <_vfiprintf_r+0x752>
  4054ec:	2e10      	cmp	r6, #16
  4054ee:	4d9a      	ldr	r5, [pc, #616]	; (405758 <_vfiprintf_r+0x5fc>)
  4054f0:	f340 8450 	ble.w	405d94 <_vfiprintf_r+0xc38>
  4054f4:	46d4      	mov	ip, sl
  4054f6:	2710      	movs	r7, #16
  4054f8:	46a2      	mov	sl, r4
  4054fa:	9c06      	ldr	r4, [sp, #24]
  4054fc:	e007      	b.n	40550e <_vfiprintf_r+0x3b2>
  4054fe:	f101 0e02 	add.w	lr, r1, #2
  405502:	f10c 0c08 	add.w	ip, ip, #8
  405506:	4601      	mov	r1, r0
  405508:	3e10      	subs	r6, #16
  40550a:	2e10      	cmp	r6, #16
  40550c:	dd11      	ble.n	405532 <_vfiprintf_r+0x3d6>
  40550e:	1c48      	adds	r0, r1, #1
  405510:	3210      	adds	r2, #16
  405512:	2807      	cmp	r0, #7
  405514:	9211      	str	r2, [sp, #68]	; 0x44
  405516:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40551a:	9010      	str	r0, [sp, #64]	; 0x40
  40551c:	ddef      	ble.n	4054fe <_vfiprintf_r+0x3a2>
  40551e:	2a00      	cmp	r2, #0
  405520:	f040 829d 	bne.w	405a5e <_vfiprintf_r+0x902>
  405524:	3e10      	subs	r6, #16
  405526:	2e10      	cmp	r6, #16
  405528:	f04f 0e01 	mov.w	lr, #1
  40552c:	4611      	mov	r1, r2
  40552e:	46cc      	mov	ip, r9
  405530:	dced      	bgt.n	40550e <_vfiprintf_r+0x3b2>
  405532:	4654      	mov	r4, sl
  405534:	46e2      	mov	sl, ip
  405536:	4432      	add	r2, r6
  405538:	f1be 0f07 	cmp.w	lr, #7
  40553c:	9211      	str	r2, [sp, #68]	; 0x44
  40553e:	e88a 0060 	stmia.w	sl, {r5, r6}
  405542:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405546:	f300 8369 	bgt.w	405c1c <_vfiprintf_r+0xac0>
  40554a:	f10a 0a08 	add.w	sl, sl, #8
  40554e:	f10e 0001 	add.w	r0, lr, #1
  405552:	4671      	mov	r1, lr
  405554:	e1ab      	b.n	4058ae <_vfiprintf_r+0x752>
  405556:	9608      	str	r6, [sp, #32]
  405558:	f013 0220 	ands.w	r2, r3, #32
  40555c:	f040 838c 	bne.w	405c78 <_vfiprintf_r+0xb1c>
  405560:	f013 0110 	ands.w	r1, r3, #16
  405564:	f040 831a 	bne.w	405b9c <_vfiprintf_r+0xa40>
  405568:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40556c:	f000 8316 	beq.w	405b9c <_vfiprintf_r+0xa40>
  405570:	9807      	ldr	r0, [sp, #28]
  405572:	460a      	mov	r2, r1
  405574:	4601      	mov	r1, r0
  405576:	3104      	adds	r1, #4
  405578:	8806      	ldrh	r6, [r0, #0]
  40557a:	9107      	str	r1, [sp, #28]
  40557c:	2700      	movs	r7, #0
  40557e:	e720      	b.n	4053c2 <_vfiprintf_r+0x266>
  405580:	9608      	str	r6, [sp, #32]
  405582:	f043 0310 	orr.w	r3, r3, #16
  405586:	e7e7      	b.n	405558 <_vfiprintf_r+0x3fc>
  405588:	9608      	str	r6, [sp, #32]
  40558a:	f043 0310 	orr.w	r3, r3, #16
  40558e:	e708      	b.n	4053a2 <_vfiprintf_r+0x246>
  405590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405594:	f898 2000 	ldrb.w	r2, [r8]
  405598:	e652      	b.n	405240 <_vfiprintf_r+0xe4>
  40559a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40559e:	2600      	movs	r6, #0
  4055a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4055a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4055a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4055ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4055b0:	2909      	cmp	r1, #9
  4055b2:	d9f5      	bls.n	4055a0 <_vfiprintf_r+0x444>
  4055b4:	e646      	b.n	405244 <_vfiprintf_r+0xe8>
  4055b6:	9608      	str	r6, [sp, #32]
  4055b8:	2800      	cmp	r0, #0
  4055ba:	f040 8408 	bne.w	405dce <_vfiprintf_r+0xc72>
  4055be:	f043 0310 	orr.w	r3, r3, #16
  4055c2:	069e      	lsls	r6, r3, #26
  4055c4:	f100 834c 	bmi.w	405c60 <_vfiprintf_r+0xb04>
  4055c8:	06dd      	lsls	r5, r3, #27
  4055ca:	f100 82f3 	bmi.w	405bb4 <_vfiprintf_r+0xa58>
  4055ce:	0658      	lsls	r0, r3, #25
  4055d0:	f140 82f0 	bpl.w	405bb4 <_vfiprintf_r+0xa58>
  4055d4:	9d07      	ldr	r5, [sp, #28]
  4055d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4055da:	462a      	mov	r2, r5
  4055dc:	17f7      	asrs	r7, r6, #31
  4055de:	3204      	adds	r2, #4
  4055e0:	4630      	mov	r0, r6
  4055e2:	4639      	mov	r1, r7
  4055e4:	9207      	str	r2, [sp, #28]
  4055e6:	2800      	cmp	r0, #0
  4055e8:	f171 0200 	sbcs.w	r2, r1, #0
  4055ec:	f2c0 835d 	blt.w	405caa <_vfiprintf_r+0xb4e>
  4055f0:	1c61      	adds	r1, r4, #1
  4055f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4055f6:	f04f 0201 	mov.w	r2, #1
  4055fa:	f47f aeea 	bne.w	4053d2 <_vfiprintf_r+0x276>
  4055fe:	ea56 0107 	orrs.w	r1, r6, r7
  405602:	f000 824d 	beq.w	405aa0 <_vfiprintf_r+0x944>
  405606:	9302      	str	r3, [sp, #8]
  405608:	2a01      	cmp	r2, #1
  40560a:	f000 828c 	beq.w	405b26 <_vfiprintf_r+0x9ca>
  40560e:	2a02      	cmp	r2, #2
  405610:	f040 825c 	bne.w	405acc <_vfiprintf_r+0x970>
  405614:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405616:	46cb      	mov	fp, r9
  405618:	0933      	lsrs	r3, r6, #4
  40561a:	f006 010f 	and.w	r1, r6, #15
  40561e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405622:	093a      	lsrs	r2, r7, #4
  405624:	461e      	mov	r6, r3
  405626:	4617      	mov	r7, r2
  405628:	5c43      	ldrb	r3, [r0, r1]
  40562a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40562e:	ea56 0307 	orrs.w	r3, r6, r7
  405632:	d1f1      	bne.n	405618 <_vfiprintf_r+0x4bc>
  405634:	eba9 030b 	sub.w	r3, r9, fp
  405638:	9305      	str	r3, [sp, #20]
  40563a:	e6e1      	b.n	405400 <_vfiprintf_r+0x2a4>
  40563c:	2800      	cmp	r0, #0
  40563e:	f040 83c0 	bne.w	405dc2 <_vfiprintf_r+0xc66>
  405642:	0699      	lsls	r1, r3, #26
  405644:	f100 8367 	bmi.w	405d16 <_vfiprintf_r+0xbba>
  405648:	06da      	lsls	r2, r3, #27
  40564a:	f100 80f1 	bmi.w	405830 <_vfiprintf_r+0x6d4>
  40564e:	065b      	lsls	r3, r3, #25
  405650:	f140 80ee 	bpl.w	405830 <_vfiprintf_r+0x6d4>
  405654:	9a07      	ldr	r2, [sp, #28]
  405656:	6813      	ldr	r3, [r2, #0]
  405658:	3204      	adds	r2, #4
  40565a:	9207      	str	r2, [sp, #28]
  40565c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405660:	801a      	strh	r2, [r3, #0]
  405662:	e5b8      	b.n	4051d6 <_vfiprintf_r+0x7a>
  405664:	9807      	ldr	r0, [sp, #28]
  405666:	4a3d      	ldr	r2, [pc, #244]	; (40575c <_vfiprintf_r+0x600>)
  405668:	9608      	str	r6, [sp, #32]
  40566a:	920b      	str	r2, [sp, #44]	; 0x2c
  40566c:	6806      	ldr	r6, [r0, #0]
  40566e:	2278      	movs	r2, #120	; 0x78
  405670:	2130      	movs	r1, #48	; 0x30
  405672:	3004      	adds	r0, #4
  405674:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405678:	f043 0302 	orr.w	r3, r3, #2
  40567c:	9007      	str	r0, [sp, #28]
  40567e:	2700      	movs	r7, #0
  405680:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405684:	2202      	movs	r2, #2
  405686:	e69c      	b.n	4053c2 <_vfiprintf_r+0x266>
  405688:	9608      	str	r6, [sp, #32]
  40568a:	2800      	cmp	r0, #0
  40568c:	d099      	beq.n	4055c2 <_vfiprintf_r+0x466>
  40568e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405692:	e796      	b.n	4055c2 <_vfiprintf_r+0x466>
  405694:	f898 2000 	ldrb.w	r2, [r8]
  405698:	2d00      	cmp	r5, #0
  40569a:	f47f add1 	bne.w	405240 <_vfiprintf_r+0xe4>
  40569e:	2001      	movs	r0, #1
  4056a0:	2520      	movs	r5, #32
  4056a2:	e5cd      	b.n	405240 <_vfiprintf_r+0xe4>
  4056a4:	f043 0301 	orr.w	r3, r3, #1
  4056a8:	f898 2000 	ldrb.w	r2, [r8]
  4056ac:	e5c8      	b.n	405240 <_vfiprintf_r+0xe4>
  4056ae:	9608      	str	r6, [sp, #32]
  4056b0:	2800      	cmp	r0, #0
  4056b2:	f040 8393 	bne.w	405ddc <_vfiprintf_r+0xc80>
  4056b6:	4929      	ldr	r1, [pc, #164]	; (40575c <_vfiprintf_r+0x600>)
  4056b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4056ba:	069f      	lsls	r7, r3, #26
  4056bc:	f100 82e8 	bmi.w	405c90 <_vfiprintf_r+0xb34>
  4056c0:	9807      	ldr	r0, [sp, #28]
  4056c2:	06de      	lsls	r6, r3, #27
  4056c4:	4601      	mov	r1, r0
  4056c6:	f100 8270 	bmi.w	405baa <_vfiprintf_r+0xa4e>
  4056ca:	065d      	lsls	r5, r3, #25
  4056cc:	f140 826d 	bpl.w	405baa <_vfiprintf_r+0xa4e>
  4056d0:	3104      	adds	r1, #4
  4056d2:	8806      	ldrh	r6, [r0, #0]
  4056d4:	9107      	str	r1, [sp, #28]
  4056d6:	2700      	movs	r7, #0
  4056d8:	07d8      	lsls	r0, r3, #31
  4056da:	f140 8222 	bpl.w	405b22 <_vfiprintf_r+0x9c6>
  4056de:	ea56 0107 	orrs.w	r1, r6, r7
  4056e2:	f000 821e 	beq.w	405b22 <_vfiprintf_r+0x9c6>
  4056e6:	2130      	movs	r1, #48	; 0x30
  4056e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4056ec:	f043 0302 	orr.w	r3, r3, #2
  4056f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4056f4:	2202      	movs	r2, #2
  4056f6:	e664      	b.n	4053c2 <_vfiprintf_r+0x266>
  4056f8:	9608      	str	r6, [sp, #32]
  4056fa:	2800      	cmp	r0, #0
  4056fc:	f040 836b 	bne.w	405dd6 <_vfiprintf_r+0xc7a>
  405700:	4917      	ldr	r1, [pc, #92]	; (405760 <_vfiprintf_r+0x604>)
  405702:	910b      	str	r1, [sp, #44]	; 0x2c
  405704:	e7d9      	b.n	4056ba <_vfiprintf_r+0x55e>
  405706:	9907      	ldr	r1, [sp, #28]
  405708:	9608      	str	r6, [sp, #32]
  40570a:	680a      	ldr	r2, [r1, #0]
  40570c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405710:	f04f 0000 	mov.w	r0, #0
  405714:	460a      	mov	r2, r1
  405716:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40571a:	3204      	adds	r2, #4
  40571c:	2001      	movs	r0, #1
  40571e:	9001      	str	r0, [sp, #4]
  405720:	9207      	str	r2, [sp, #28]
  405722:	9005      	str	r0, [sp, #20]
  405724:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405728:	9302      	str	r3, [sp, #8]
  40572a:	2400      	movs	r4, #0
  40572c:	e670      	b.n	405410 <_vfiprintf_r+0x2b4>
  40572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405732:	f898 2000 	ldrb.w	r2, [r8]
  405736:	e583      	b.n	405240 <_vfiprintf_r+0xe4>
  405738:	f898 2000 	ldrb.w	r2, [r8]
  40573c:	2a6c      	cmp	r2, #108	; 0x6c
  40573e:	bf03      	ittte	eq
  405740:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405744:	f043 0320 	orreq.w	r3, r3, #32
  405748:	f108 0801 	addeq.w	r8, r8, #1
  40574c:	f043 0310 	orrne.w	r3, r3, #16
  405750:	e576      	b.n	405240 <_vfiprintf_r+0xe4>
  405752:	bf00      	nop
  405754:	0040f1c0 	.word	0x0040f1c0
  405758:	0040f1d0 	.word	0x0040f1d0
  40575c:	0040f1a4 	.word	0x0040f1a4
  405760:	0040f190 	.word	0x0040f190
  405764:	9907      	ldr	r1, [sp, #28]
  405766:	680e      	ldr	r6, [r1, #0]
  405768:	460a      	mov	r2, r1
  40576a:	2e00      	cmp	r6, #0
  40576c:	f102 0204 	add.w	r2, r2, #4
  405770:	f6ff ae0f 	blt.w	405392 <_vfiprintf_r+0x236>
  405774:	9207      	str	r2, [sp, #28]
  405776:	f898 2000 	ldrb.w	r2, [r8]
  40577a:	e561      	b.n	405240 <_vfiprintf_r+0xe4>
  40577c:	f898 2000 	ldrb.w	r2, [r8]
  405780:	2001      	movs	r0, #1
  405782:	252b      	movs	r5, #43	; 0x2b
  405784:	e55c      	b.n	405240 <_vfiprintf_r+0xe4>
  405786:	9907      	ldr	r1, [sp, #28]
  405788:	9608      	str	r6, [sp, #32]
  40578a:	f8d1 b000 	ldr.w	fp, [r1]
  40578e:	f04f 0200 	mov.w	r2, #0
  405792:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405796:	1d0e      	adds	r6, r1, #4
  405798:	f1bb 0f00 	cmp.w	fp, #0
  40579c:	f000 82e5 	beq.w	405d6a <_vfiprintf_r+0xc0e>
  4057a0:	1c67      	adds	r7, r4, #1
  4057a2:	f000 82c4 	beq.w	405d2e <_vfiprintf_r+0xbd2>
  4057a6:	4622      	mov	r2, r4
  4057a8:	2100      	movs	r1, #0
  4057aa:	4658      	mov	r0, fp
  4057ac:	9301      	str	r3, [sp, #4]
  4057ae:	f001 f91f 	bl	4069f0 <memchr>
  4057b2:	9b01      	ldr	r3, [sp, #4]
  4057b4:	2800      	cmp	r0, #0
  4057b6:	f000 82e5 	beq.w	405d84 <_vfiprintf_r+0xc28>
  4057ba:	eba0 020b 	sub.w	r2, r0, fp
  4057be:	9205      	str	r2, [sp, #20]
  4057c0:	9607      	str	r6, [sp, #28]
  4057c2:	9302      	str	r3, [sp, #8]
  4057c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057c8:	2400      	movs	r4, #0
  4057ca:	e619      	b.n	405400 <_vfiprintf_r+0x2a4>
  4057cc:	f898 2000 	ldrb.w	r2, [r8]
  4057d0:	2a2a      	cmp	r2, #42	; 0x2a
  4057d2:	f108 0701 	add.w	r7, r8, #1
  4057d6:	f000 82e9 	beq.w	405dac <_vfiprintf_r+0xc50>
  4057da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4057de:	2909      	cmp	r1, #9
  4057e0:	46b8      	mov	r8, r7
  4057e2:	f04f 0400 	mov.w	r4, #0
  4057e6:	f63f ad2d 	bhi.w	405244 <_vfiprintf_r+0xe8>
  4057ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4057ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4057f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4057f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4057fa:	2909      	cmp	r1, #9
  4057fc:	d9f5      	bls.n	4057ea <_vfiprintf_r+0x68e>
  4057fe:	e521      	b.n	405244 <_vfiprintf_r+0xe8>
  405800:	f043 0320 	orr.w	r3, r3, #32
  405804:	f898 2000 	ldrb.w	r2, [r8]
  405808:	e51a      	b.n	405240 <_vfiprintf_r+0xe4>
  40580a:	9608      	str	r6, [sp, #32]
  40580c:	2800      	cmp	r0, #0
  40580e:	f040 82db 	bne.w	405dc8 <_vfiprintf_r+0xc6c>
  405812:	2a00      	cmp	r2, #0
  405814:	f000 80e7 	beq.w	4059e6 <_vfiprintf_r+0x88a>
  405818:	2101      	movs	r1, #1
  40581a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40581e:	f04f 0200 	mov.w	r2, #0
  405822:	9101      	str	r1, [sp, #4]
  405824:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405828:	9105      	str	r1, [sp, #20]
  40582a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40582e:	e77b      	b.n	405728 <_vfiprintf_r+0x5cc>
  405830:	9a07      	ldr	r2, [sp, #28]
  405832:	6813      	ldr	r3, [r2, #0]
  405834:	3204      	adds	r2, #4
  405836:	9207      	str	r2, [sp, #28]
  405838:	9a03      	ldr	r2, [sp, #12]
  40583a:	601a      	str	r2, [r3, #0]
  40583c:	e4cb      	b.n	4051d6 <_vfiprintf_r+0x7a>
  40583e:	aa0f      	add	r2, sp, #60	; 0x3c
  405840:	9904      	ldr	r1, [sp, #16]
  405842:	4620      	mov	r0, r4
  405844:	f7ff fc4a 	bl	4050dc <__sprint_r.part.0>
  405848:	2800      	cmp	r0, #0
  40584a:	f040 8139 	bne.w	405ac0 <_vfiprintf_r+0x964>
  40584e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405850:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405852:	f101 0c01 	add.w	ip, r1, #1
  405856:	46ce      	mov	lr, r9
  405858:	e5ff      	b.n	40545a <_vfiprintf_r+0x2fe>
  40585a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40585c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40585e:	1c48      	adds	r0, r1, #1
  405860:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405864:	2d00      	cmp	r5, #0
  405866:	f43f ae22 	beq.w	4054ae <_vfiprintf_r+0x352>
  40586a:	3201      	adds	r2, #1
  40586c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405870:	2101      	movs	r1, #1
  405872:	2807      	cmp	r0, #7
  405874:	9211      	str	r2, [sp, #68]	; 0x44
  405876:	9010      	str	r0, [sp, #64]	; 0x40
  405878:	f8ca 5000 	str.w	r5, [sl]
  40587c:	f8ca 1004 	str.w	r1, [sl, #4]
  405880:	f340 8108 	ble.w	405a94 <_vfiprintf_r+0x938>
  405884:	2a00      	cmp	r2, #0
  405886:	f040 81bc 	bne.w	405c02 <_vfiprintf_r+0xaa6>
  40588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40588c:	2b00      	cmp	r3, #0
  40588e:	f43f ae1f 	beq.w	4054d0 <_vfiprintf_r+0x374>
  405892:	ab0e      	add	r3, sp, #56	; 0x38
  405894:	2202      	movs	r2, #2
  405896:	4608      	mov	r0, r1
  405898:	931c      	str	r3, [sp, #112]	; 0x70
  40589a:	921d      	str	r2, [sp, #116]	; 0x74
  40589c:	46ca      	mov	sl, r9
  40589e:	4601      	mov	r1, r0
  4058a0:	f10a 0a08 	add.w	sl, sl, #8
  4058a4:	3001      	adds	r0, #1
  4058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058a8:	2b80      	cmp	r3, #128	; 0x80
  4058aa:	f43f ae19 	beq.w	4054e0 <_vfiprintf_r+0x384>
  4058ae:	9b05      	ldr	r3, [sp, #20]
  4058b0:	1ae4      	subs	r4, r4, r3
  4058b2:	2c00      	cmp	r4, #0
  4058b4:	dd2e      	ble.n	405914 <_vfiprintf_r+0x7b8>
  4058b6:	2c10      	cmp	r4, #16
  4058b8:	4db3      	ldr	r5, [pc, #716]	; (405b88 <_vfiprintf_r+0xa2c>)
  4058ba:	dd1e      	ble.n	4058fa <_vfiprintf_r+0x79e>
  4058bc:	46d6      	mov	lr, sl
  4058be:	2610      	movs	r6, #16
  4058c0:	9f06      	ldr	r7, [sp, #24]
  4058c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4058c6:	e006      	b.n	4058d6 <_vfiprintf_r+0x77a>
  4058c8:	1c88      	adds	r0, r1, #2
  4058ca:	f10e 0e08 	add.w	lr, lr, #8
  4058ce:	4619      	mov	r1, r3
  4058d0:	3c10      	subs	r4, #16
  4058d2:	2c10      	cmp	r4, #16
  4058d4:	dd10      	ble.n	4058f8 <_vfiprintf_r+0x79c>
  4058d6:	1c4b      	adds	r3, r1, #1
  4058d8:	3210      	adds	r2, #16
  4058da:	2b07      	cmp	r3, #7
  4058dc:	9211      	str	r2, [sp, #68]	; 0x44
  4058de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4058e2:	9310      	str	r3, [sp, #64]	; 0x40
  4058e4:	ddf0      	ble.n	4058c8 <_vfiprintf_r+0x76c>
  4058e6:	2a00      	cmp	r2, #0
  4058e8:	d165      	bne.n	4059b6 <_vfiprintf_r+0x85a>
  4058ea:	3c10      	subs	r4, #16
  4058ec:	2c10      	cmp	r4, #16
  4058ee:	f04f 0001 	mov.w	r0, #1
  4058f2:	4611      	mov	r1, r2
  4058f4:	46ce      	mov	lr, r9
  4058f6:	dcee      	bgt.n	4058d6 <_vfiprintf_r+0x77a>
  4058f8:	46f2      	mov	sl, lr
  4058fa:	4422      	add	r2, r4
  4058fc:	2807      	cmp	r0, #7
  4058fe:	9211      	str	r2, [sp, #68]	; 0x44
  405900:	f8ca 5000 	str.w	r5, [sl]
  405904:	f8ca 4004 	str.w	r4, [sl, #4]
  405908:	9010      	str	r0, [sp, #64]	; 0x40
  40590a:	f300 8085 	bgt.w	405a18 <_vfiprintf_r+0x8bc>
  40590e:	f10a 0a08 	add.w	sl, sl, #8
  405912:	3001      	adds	r0, #1
  405914:	9905      	ldr	r1, [sp, #20]
  405916:	f8ca b000 	str.w	fp, [sl]
  40591a:	440a      	add	r2, r1
  40591c:	2807      	cmp	r0, #7
  40591e:	9211      	str	r2, [sp, #68]	; 0x44
  405920:	f8ca 1004 	str.w	r1, [sl, #4]
  405924:	9010      	str	r0, [sp, #64]	; 0x40
  405926:	f340 8082 	ble.w	405a2e <_vfiprintf_r+0x8d2>
  40592a:	2a00      	cmp	r2, #0
  40592c:	f040 8118 	bne.w	405b60 <_vfiprintf_r+0xa04>
  405930:	9b02      	ldr	r3, [sp, #8]
  405932:	9210      	str	r2, [sp, #64]	; 0x40
  405934:	0758      	lsls	r0, r3, #29
  405936:	d535      	bpl.n	4059a4 <_vfiprintf_r+0x848>
  405938:	9b08      	ldr	r3, [sp, #32]
  40593a:	9901      	ldr	r1, [sp, #4]
  40593c:	1a5c      	subs	r4, r3, r1
  40593e:	2c00      	cmp	r4, #0
  405940:	f340 80e7 	ble.w	405b12 <_vfiprintf_r+0x9b6>
  405944:	46ca      	mov	sl, r9
  405946:	2c10      	cmp	r4, #16
  405948:	f340 8218 	ble.w	405d7c <_vfiprintf_r+0xc20>
  40594c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40594e:	4e8f      	ldr	r6, [pc, #572]	; (405b8c <_vfiprintf_r+0xa30>)
  405950:	9f06      	ldr	r7, [sp, #24]
  405952:	f8dd b010 	ldr.w	fp, [sp, #16]
  405956:	2510      	movs	r5, #16
  405958:	e006      	b.n	405968 <_vfiprintf_r+0x80c>
  40595a:	1c88      	adds	r0, r1, #2
  40595c:	f10a 0a08 	add.w	sl, sl, #8
  405960:	4619      	mov	r1, r3
  405962:	3c10      	subs	r4, #16
  405964:	2c10      	cmp	r4, #16
  405966:	dd11      	ble.n	40598c <_vfiprintf_r+0x830>
  405968:	1c4b      	adds	r3, r1, #1
  40596a:	3210      	adds	r2, #16
  40596c:	2b07      	cmp	r3, #7
  40596e:	9211      	str	r2, [sp, #68]	; 0x44
  405970:	f8ca 6000 	str.w	r6, [sl]
  405974:	f8ca 5004 	str.w	r5, [sl, #4]
  405978:	9310      	str	r3, [sp, #64]	; 0x40
  40597a:	ddee      	ble.n	40595a <_vfiprintf_r+0x7fe>
  40597c:	bb42      	cbnz	r2, 4059d0 <_vfiprintf_r+0x874>
  40597e:	3c10      	subs	r4, #16
  405980:	2c10      	cmp	r4, #16
  405982:	f04f 0001 	mov.w	r0, #1
  405986:	4611      	mov	r1, r2
  405988:	46ca      	mov	sl, r9
  40598a:	dced      	bgt.n	405968 <_vfiprintf_r+0x80c>
  40598c:	4422      	add	r2, r4
  40598e:	2807      	cmp	r0, #7
  405990:	9211      	str	r2, [sp, #68]	; 0x44
  405992:	f8ca 6000 	str.w	r6, [sl]
  405996:	f8ca 4004 	str.w	r4, [sl, #4]
  40599a:	9010      	str	r0, [sp, #64]	; 0x40
  40599c:	dd51      	ble.n	405a42 <_vfiprintf_r+0x8e6>
  40599e:	2a00      	cmp	r2, #0
  4059a0:	f040 819b 	bne.w	405cda <_vfiprintf_r+0xb7e>
  4059a4:	9b03      	ldr	r3, [sp, #12]
  4059a6:	9a08      	ldr	r2, [sp, #32]
  4059a8:	9901      	ldr	r1, [sp, #4]
  4059aa:	428a      	cmp	r2, r1
  4059ac:	bfac      	ite	ge
  4059ae:	189b      	addge	r3, r3, r2
  4059b0:	185b      	addlt	r3, r3, r1
  4059b2:	9303      	str	r3, [sp, #12]
  4059b4:	e04e      	b.n	405a54 <_vfiprintf_r+0x8f8>
  4059b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4059b8:	4651      	mov	r1, sl
  4059ba:	4638      	mov	r0, r7
  4059bc:	f7ff fb8e 	bl	4050dc <__sprint_r.part.0>
  4059c0:	2800      	cmp	r0, #0
  4059c2:	f040 813f 	bne.w	405c44 <_vfiprintf_r+0xae8>
  4059c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059ca:	1c48      	adds	r0, r1, #1
  4059cc:	46ce      	mov	lr, r9
  4059ce:	e77f      	b.n	4058d0 <_vfiprintf_r+0x774>
  4059d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4059d2:	4659      	mov	r1, fp
  4059d4:	4638      	mov	r0, r7
  4059d6:	f7ff fb81 	bl	4050dc <__sprint_r.part.0>
  4059da:	b960      	cbnz	r0, 4059f6 <_vfiprintf_r+0x89a>
  4059dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059e0:	1c48      	adds	r0, r1, #1
  4059e2:	46ca      	mov	sl, r9
  4059e4:	e7bd      	b.n	405962 <_vfiprintf_r+0x806>
  4059e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4059ec:	2b00      	cmp	r3, #0
  4059ee:	f040 81d4 	bne.w	405d9a <_vfiprintf_r+0xc3e>
  4059f2:	2300      	movs	r3, #0
  4059f4:	9310      	str	r3, [sp, #64]	; 0x40
  4059f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4059fa:	f013 0f01 	tst.w	r3, #1
  4059fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405a02:	d102      	bne.n	405a0a <_vfiprintf_r+0x8ae>
  405a04:	059a      	lsls	r2, r3, #22
  405a06:	f140 80de 	bpl.w	405bc6 <_vfiprintf_r+0xa6a>
  405a0a:	065b      	lsls	r3, r3, #25
  405a0c:	f53f acb2 	bmi.w	405374 <_vfiprintf_r+0x218>
  405a10:	9803      	ldr	r0, [sp, #12]
  405a12:	b02d      	add	sp, #180	; 0xb4
  405a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a18:	2a00      	cmp	r2, #0
  405a1a:	f040 8106 	bne.w	405c2a <_vfiprintf_r+0xace>
  405a1e:	9a05      	ldr	r2, [sp, #20]
  405a20:	921d      	str	r2, [sp, #116]	; 0x74
  405a22:	2301      	movs	r3, #1
  405a24:	9211      	str	r2, [sp, #68]	; 0x44
  405a26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405a2a:	9310      	str	r3, [sp, #64]	; 0x40
  405a2c:	46ca      	mov	sl, r9
  405a2e:	f10a 0a08 	add.w	sl, sl, #8
  405a32:	9b02      	ldr	r3, [sp, #8]
  405a34:	0759      	lsls	r1, r3, #29
  405a36:	d504      	bpl.n	405a42 <_vfiprintf_r+0x8e6>
  405a38:	9b08      	ldr	r3, [sp, #32]
  405a3a:	9901      	ldr	r1, [sp, #4]
  405a3c:	1a5c      	subs	r4, r3, r1
  405a3e:	2c00      	cmp	r4, #0
  405a40:	dc81      	bgt.n	405946 <_vfiprintf_r+0x7ea>
  405a42:	9b03      	ldr	r3, [sp, #12]
  405a44:	9908      	ldr	r1, [sp, #32]
  405a46:	9801      	ldr	r0, [sp, #4]
  405a48:	4281      	cmp	r1, r0
  405a4a:	bfac      	ite	ge
  405a4c:	185b      	addge	r3, r3, r1
  405a4e:	181b      	addlt	r3, r3, r0
  405a50:	9303      	str	r3, [sp, #12]
  405a52:	bb72      	cbnz	r2, 405ab2 <_vfiprintf_r+0x956>
  405a54:	2300      	movs	r3, #0
  405a56:	9310      	str	r3, [sp, #64]	; 0x40
  405a58:	46ca      	mov	sl, r9
  405a5a:	f7ff bbbc 	b.w	4051d6 <_vfiprintf_r+0x7a>
  405a5e:	aa0f      	add	r2, sp, #60	; 0x3c
  405a60:	9904      	ldr	r1, [sp, #16]
  405a62:	4620      	mov	r0, r4
  405a64:	f7ff fb3a 	bl	4050dc <__sprint_r.part.0>
  405a68:	bb50      	cbnz	r0, 405ac0 <_vfiprintf_r+0x964>
  405a6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a6e:	f101 0e01 	add.w	lr, r1, #1
  405a72:	46cc      	mov	ip, r9
  405a74:	e548      	b.n	405508 <_vfiprintf_r+0x3ac>
  405a76:	2a00      	cmp	r2, #0
  405a78:	f040 8140 	bne.w	405cfc <_vfiprintf_r+0xba0>
  405a7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405a80:	2900      	cmp	r1, #0
  405a82:	f000 811b 	beq.w	405cbc <_vfiprintf_r+0xb60>
  405a86:	2201      	movs	r2, #1
  405a88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405a8c:	4610      	mov	r0, r2
  405a8e:	921d      	str	r2, [sp, #116]	; 0x74
  405a90:	911c      	str	r1, [sp, #112]	; 0x70
  405a92:	46ca      	mov	sl, r9
  405a94:	4601      	mov	r1, r0
  405a96:	f10a 0a08 	add.w	sl, sl, #8
  405a9a:	3001      	adds	r0, #1
  405a9c:	e507      	b.n	4054ae <_vfiprintf_r+0x352>
  405a9e:	9b02      	ldr	r3, [sp, #8]
  405aa0:	2a01      	cmp	r2, #1
  405aa2:	f000 8098 	beq.w	405bd6 <_vfiprintf_r+0xa7a>
  405aa6:	2a02      	cmp	r2, #2
  405aa8:	d10d      	bne.n	405ac6 <_vfiprintf_r+0x96a>
  405aaa:	9302      	str	r3, [sp, #8]
  405aac:	2600      	movs	r6, #0
  405aae:	2700      	movs	r7, #0
  405ab0:	e5b0      	b.n	405614 <_vfiprintf_r+0x4b8>
  405ab2:	aa0f      	add	r2, sp, #60	; 0x3c
  405ab4:	9904      	ldr	r1, [sp, #16]
  405ab6:	9806      	ldr	r0, [sp, #24]
  405ab8:	f7ff fb10 	bl	4050dc <__sprint_r.part.0>
  405abc:	2800      	cmp	r0, #0
  405abe:	d0c9      	beq.n	405a54 <_vfiprintf_r+0x8f8>
  405ac0:	f8dd b010 	ldr.w	fp, [sp, #16]
  405ac4:	e797      	b.n	4059f6 <_vfiprintf_r+0x89a>
  405ac6:	9302      	str	r3, [sp, #8]
  405ac8:	2600      	movs	r6, #0
  405aca:	2700      	movs	r7, #0
  405acc:	4649      	mov	r1, r9
  405ace:	e000      	b.n	405ad2 <_vfiprintf_r+0x976>
  405ad0:	4659      	mov	r1, fp
  405ad2:	08f2      	lsrs	r2, r6, #3
  405ad4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405ad8:	08f8      	lsrs	r0, r7, #3
  405ada:	f006 0307 	and.w	r3, r6, #7
  405ade:	4607      	mov	r7, r0
  405ae0:	4616      	mov	r6, r2
  405ae2:	3330      	adds	r3, #48	; 0x30
  405ae4:	ea56 0207 	orrs.w	r2, r6, r7
  405ae8:	f801 3c01 	strb.w	r3, [r1, #-1]
  405aec:	f101 3bff 	add.w	fp, r1, #4294967295
  405af0:	d1ee      	bne.n	405ad0 <_vfiprintf_r+0x974>
  405af2:	9a02      	ldr	r2, [sp, #8]
  405af4:	07d6      	lsls	r6, r2, #31
  405af6:	f57f ad9d 	bpl.w	405634 <_vfiprintf_r+0x4d8>
  405afa:	2b30      	cmp	r3, #48	; 0x30
  405afc:	f43f ad9a 	beq.w	405634 <_vfiprintf_r+0x4d8>
  405b00:	3902      	subs	r1, #2
  405b02:	2330      	movs	r3, #48	; 0x30
  405b04:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405b08:	eba9 0301 	sub.w	r3, r9, r1
  405b0c:	9305      	str	r3, [sp, #20]
  405b0e:	468b      	mov	fp, r1
  405b10:	e476      	b.n	405400 <_vfiprintf_r+0x2a4>
  405b12:	9b03      	ldr	r3, [sp, #12]
  405b14:	9a08      	ldr	r2, [sp, #32]
  405b16:	428a      	cmp	r2, r1
  405b18:	bfac      	ite	ge
  405b1a:	189b      	addge	r3, r3, r2
  405b1c:	185b      	addlt	r3, r3, r1
  405b1e:	9303      	str	r3, [sp, #12]
  405b20:	e798      	b.n	405a54 <_vfiprintf_r+0x8f8>
  405b22:	2202      	movs	r2, #2
  405b24:	e44d      	b.n	4053c2 <_vfiprintf_r+0x266>
  405b26:	2f00      	cmp	r7, #0
  405b28:	bf08      	it	eq
  405b2a:	2e0a      	cmpeq	r6, #10
  405b2c:	d352      	bcc.n	405bd4 <_vfiprintf_r+0xa78>
  405b2e:	46cb      	mov	fp, r9
  405b30:	4630      	mov	r0, r6
  405b32:	4639      	mov	r1, r7
  405b34:	220a      	movs	r2, #10
  405b36:	2300      	movs	r3, #0
  405b38:	f001 fbc6 	bl	4072c8 <__aeabi_uldivmod>
  405b3c:	3230      	adds	r2, #48	; 0x30
  405b3e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405b42:	4630      	mov	r0, r6
  405b44:	4639      	mov	r1, r7
  405b46:	2300      	movs	r3, #0
  405b48:	220a      	movs	r2, #10
  405b4a:	f001 fbbd 	bl	4072c8 <__aeabi_uldivmod>
  405b4e:	4606      	mov	r6, r0
  405b50:	460f      	mov	r7, r1
  405b52:	ea56 0307 	orrs.w	r3, r6, r7
  405b56:	d1eb      	bne.n	405b30 <_vfiprintf_r+0x9d4>
  405b58:	e56c      	b.n	405634 <_vfiprintf_r+0x4d8>
  405b5a:	9405      	str	r4, [sp, #20]
  405b5c:	46cb      	mov	fp, r9
  405b5e:	e44f      	b.n	405400 <_vfiprintf_r+0x2a4>
  405b60:	aa0f      	add	r2, sp, #60	; 0x3c
  405b62:	9904      	ldr	r1, [sp, #16]
  405b64:	9806      	ldr	r0, [sp, #24]
  405b66:	f7ff fab9 	bl	4050dc <__sprint_r.part.0>
  405b6a:	2800      	cmp	r0, #0
  405b6c:	d1a8      	bne.n	405ac0 <_vfiprintf_r+0x964>
  405b6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b70:	46ca      	mov	sl, r9
  405b72:	e75e      	b.n	405a32 <_vfiprintf_r+0x8d6>
  405b74:	aa0f      	add	r2, sp, #60	; 0x3c
  405b76:	9904      	ldr	r1, [sp, #16]
  405b78:	9806      	ldr	r0, [sp, #24]
  405b7a:	f7ff faaf 	bl	4050dc <__sprint_r.part.0>
  405b7e:	2800      	cmp	r0, #0
  405b80:	d19e      	bne.n	405ac0 <_vfiprintf_r+0x964>
  405b82:	46ca      	mov	sl, r9
  405b84:	f7ff bbc0 	b.w	405308 <_vfiprintf_r+0x1ac>
  405b88:	0040f1d0 	.word	0x0040f1d0
  405b8c:	0040f1c0 	.word	0x0040f1c0
  405b90:	3104      	adds	r1, #4
  405b92:	6816      	ldr	r6, [r2, #0]
  405b94:	9107      	str	r1, [sp, #28]
  405b96:	2201      	movs	r2, #1
  405b98:	2700      	movs	r7, #0
  405b9a:	e412      	b.n	4053c2 <_vfiprintf_r+0x266>
  405b9c:	9807      	ldr	r0, [sp, #28]
  405b9e:	4601      	mov	r1, r0
  405ba0:	3104      	adds	r1, #4
  405ba2:	6806      	ldr	r6, [r0, #0]
  405ba4:	9107      	str	r1, [sp, #28]
  405ba6:	2700      	movs	r7, #0
  405ba8:	e40b      	b.n	4053c2 <_vfiprintf_r+0x266>
  405baa:	680e      	ldr	r6, [r1, #0]
  405bac:	3104      	adds	r1, #4
  405bae:	9107      	str	r1, [sp, #28]
  405bb0:	2700      	movs	r7, #0
  405bb2:	e591      	b.n	4056d8 <_vfiprintf_r+0x57c>
  405bb4:	9907      	ldr	r1, [sp, #28]
  405bb6:	680e      	ldr	r6, [r1, #0]
  405bb8:	460a      	mov	r2, r1
  405bba:	17f7      	asrs	r7, r6, #31
  405bbc:	3204      	adds	r2, #4
  405bbe:	9207      	str	r2, [sp, #28]
  405bc0:	4630      	mov	r0, r6
  405bc2:	4639      	mov	r1, r7
  405bc4:	e50f      	b.n	4055e6 <_vfiprintf_r+0x48a>
  405bc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405bca:	f000 fe7f 	bl	4068cc <__retarget_lock_release_recursive>
  405bce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405bd2:	e71a      	b.n	405a0a <_vfiprintf_r+0x8ae>
  405bd4:	9b02      	ldr	r3, [sp, #8]
  405bd6:	9302      	str	r3, [sp, #8]
  405bd8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405bdc:	3630      	adds	r6, #48	; 0x30
  405bde:	2301      	movs	r3, #1
  405be0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405be4:	9305      	str	r3, [sp, #20]
  405be6:	e40b      	b.n	405400 <_vfiprintf_r+0x2a4>
  405be8:	aa0f      	add	r2, sp, #60	; 0x3c
  405bea:	9904      	ldr	r1, [sp, #16]
  405bec:	9806      	ldr	r0, [sp, #24]
  405bee:	f7ff fa75 	bl	4050dc <__sprint_r.part.0>
  405bf2:	2800      	cmp	r0, #0
  405bf4:	f47f af64 	bne.w	405ac0 <_vfiprintf_r+0x964>
  405bf8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bfc:	1c48      	adds	r0, r1, #1
  405bfe:	46ca      	mov	sl, r9
  405c00:	e651      	b.n	4058a6 <_vfiprintf_r+0x74a>
  405c02:	aa0f      	add	r2, sp, #60	; 0x3c
  405c04:	9904      	ldr	r1, [sp, #16]
  405c06:	9806      	ldr	r0, [sp, #24]
  405c08:	f7ff fa68 	bl	4050dc <__sprint_r.part.0>
  405c0c:	2800      	cmp	r0, #0
  405c0e:	f47f af57 	bne.w	405ac0 <_vfiprintf_r+0x964>
  405c12:	9910      	ldr	r1, [sp, #64]	; 0x40
  405c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c16:	1c48      	adds	r0, r1, #1
  405c18:	46ca      	mov	sl, r9
  405c1a:	e448      	b.n	4054ae <_vfiprintf_r+0x352>
  405c1c:	2a00      	cmp	r2, #0
  405c1e:	f040 8091 	bne.w	405d44 <_vfiprintf_r+0xbe8>
  405c22:	2001      	movs	r0, #1
  405c24:	4611      	mov	r1, r2
  405c26:	46ca      	mov	sl, r9
  405c28:	e641      	b.n	4058ae <_vfiprintf_r+0x752>
  405c2a:	aa0f      	add	r2, sp, #60	; 0x3c
  405c2c:	9904      	ldr	r1, [sp, #16]
  405c2e:	9806      	ldr	r0, [sp, #24]
  405c30:	f7ff fa54 	bl	4050dc <__sprint_r.part.0>
  405c34:	2800      	cmp	r0, #0
  405c36:	f47f af43 	bne.w	405ac0 <_vfiprintf_r+0x964>
  405c3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  405c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c3e:	3001      	adds	r0, #1
  405c40:	46ca      	mov	sl, r9
  405c42:	e667      	b.n	405914 <_vfiprintf_r+0x7b8>
  405c44:	46d3      	mov	fp, sl
  405c46:	e6d6      	b.n	4059f6 <_vfiprintf_r+0x89a>
  405c48:	9e07      	ldr	r6, [sp, #28]
  405c4a:	3607      	adds	r6, #7
  405c4c:	f026 0207 	bic.w	r2, r6, #7
  405c50:	f102 0108 	add.w	r1, r2, #8
  405c54:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c58:	9107      	str	r1, [sp, #28]
  405c5a:	2201      	movs	r2, #1
  405c5c:	f7ff bbb1 	b.w	4053c2 <_vfiprintf_r+0x266>
  405c60:	9e07      	ldr	r6, [sp, #28]
  405c62:	3607      	adds	r6, #7
  405c64:	f026 0607 	bic.w	r6, r6, #7
  405c68:	e9d6 0100 	ldrd	r0, r1, [r6]
  405c6c:	f106 0208 	add.w	r2, r6, #8
  405c70:	9207      	str	r2, [sp, #28]
  405c72:	4606      	mov	r6, r0
  405c74:	460f      	mov	r7, r1
  405c76:	e4b6      	b.n	4055e6 <_vfiprintf_r+0x48a>
  405c78:	9e07      	ldr	r6, [sp, #28]
  405c7a:	3607      	adds	r6, #7
  405c7c:	f026 0207 	bic.w	r2, r6, #7
  405c80:	f102 0108 	add.w	r1, r2, #8
  405c84:	e9d2 6700 	ldrd	r6, r7, [r2]
  405c88:	9107      	str	r1, [sp, #28]
  405c8a:	2200      	movs	r2, #0
  405c8c:	f7ff bb99 	b.w	4053c2 <_vfiprintf_r+0x266>
  405c90:	9e07      	ldr	r6, [sp, #28]
  405c92:	3607      	adds	r6, #7
  405c94:	f026 0107 	bic.w	r1, r6, #7
  405c98:	f101 0008 	add.w	r0, r1, #8
  405c9c:	9007      	str	r0, [sp, #28]
  405c9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405ca2:	e519      	b.n	4056d8 <_vfiprintf_r+0x57c>
  405ca4:	46cb      	mov	fp, r9
  405ca6:	f7ff bbab 	b.w	405400 <_vfiprintf_r+0x2a4>
  405caa:	252d      	movs	r5, #45	; 0x2d
  405cac:	4276      	negs	r6, r6
  405cae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405cb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405cb6:	2201      	movs	r2, #1
  405cb8:	f7ff bb88 	b.w	4053cc <_vfiprintf_r+0x270>
  405cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cbe:	b9b3      	cbnz	r3, 405cee <_vfiprintf_r+0xb92>
  405cc0:	4611      	mov	r1, r2
  405cc2:	2001      	movs	r0, #1
  405cc4:	46ca      	mov	sl, r9
  405cc6:	e5f2      	b.n	4058ae <_vfiprintf_r+0x752>
  405cc8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405ccc:	f000 fdfe 	bl	4068cc <__retarget_lock_release_recursive>
  405cd0:	f04f 33ff 	mov.w	r3, #4294967295
  405cd4:	9303      	str	r3, [sp, #12]
  405cd6:	f7ff bb50 	b.w	40537a <_vfiprintf_r+0x21e>
  405cda:	aa0f      	add	r2, sp, #60	; 0x3c
  405cdc:	9904      	ldr	r1, [sp, #16]
  405cde:	9806      	ldr	r0, [sp, #24]
  405ce0:	f7ff f9fc 	bl	4050dc <__sprint_r.part.0>
  405ce4:	2800      	cmp	r0, #0
  405ce6:	f47f aeeb 	bne.w	405ac0 <_vfiprintf_r+0x964>
  405cea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cec:	e6a9      	b.n	405a42 <_vfiprintf_r+0x8e6>
  405cee:	ab0e      	add	r3, sp, #56	; 0x38
  405cf0:	2202      	movs	r2, #2
  405cf2:	931c      	str	r3, [sp, #112]	; 0x70
  405cf4:	921d      	str	r2, [sp, #116]	; 0x74
  405cf6:	2001      	movs	r0, #1
  405cf8:	46ca      	mov	sl, r9
  405cfa:	e5d0      	b.n	40589e <_vfiprintf_r+0x742>
  405cfc:	aa0f      	add	r2, sp, #60	; 0x3c
  405cfe:	9904      	ldr	r1, [sp, #16]
  405d00:	9806      	ldr	r0, [sp, #24]
  405d02:	f7ff f9eb 	bl	4050dc <__sprint_r.part.0>
  405d06:	2800      	cmp	r0, #0
  405d08:	f47f aeda 	bne.w	405ac0 <_vfiprintf_r+0x964>
  405d0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d10:	1c48      	adds	r0, r1, #1
  405d12:	46ca      	mov	sl, r9
  405d14:	e5a4      	b.n	405860 <_vfiprintf_r+0x704>
  405d16:	9a07      	ldr	r2, [sp, #28]
  405d18:	9903      	ldr	r1, [sp, #12]
  405d1a:	6813      	ldr	r3, [r2, #0]
  405d1c:	17cd      	asrs	r5, r1, #31
  405d1e:	4608      	mov	r0, r1
  405d20:	3204      	adds	r2, #4
  405d22:	4629      	mov	r1, r5
  405d24:	9207      	str	r2, [sp, #28]
  405d26:	e9c3 0100 	strd	r0, r1, [r3]
  405d2a:	f7ff ba54 	b.w	4051d6 <_vfiprintf_r+0x7a>
  405d2e:	4658      	mov	r0, fp
  405d30:	9607      	str	r6, [sp, #28]
  405d32:	9302      	str	r3, [sp, #8]
  405d34:	f7ff f964 	bl	405000 <strlen>
  405d38:	2400      	movs	r4, #0
  405d3a:	9005      	str	r0, [sp, #20]
  405d3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d40:	f7ff bb5e 	b.w	405400 <_vfiprintf_r+0x2a4>
  405d44:	aa0f      	add	r2, sp, #60	; 0x3c
  405d46:	9904      	ldr	r1, [sp, #16]
  405d48:	9806      	ldr	r0, [sp, #24]
  405d4a:	f7ff f9c7 	bl	4050dc <__sprint_r.part.0>
  405d4e:	2800      	cmp	r0, #0
  405d50:	f47f aeb6 	bne.w	405ac0 <_vfiprintf_r+0x964>
  405d54:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d58:	1c48      	adds	r0, r1, #1
  405d5a:	46ca      	mov	sl, r9
  405d5c:	e5a7      	b.n	4058ae <_vfiprintf_r+0x752>
  405d5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405d60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d62:	4e20      	ldr	r6, [pc, #128]	; (405de4 <_vfiprintf_r+0xc88>)
  405d64:	3101      	adds	r1, #1
  405d66:	f7ff bb90 	b.w	40548a <_vfiprintf_r+0x32e>
  405d6a:	2c06      	cmp	r4, #6
  405d6c:	bf28      	it	cs
  405d6e:	2406      	movcs	r4, #6
  405d70:	9405      	str	r4, [sp, #20]
  405d72:	9607      	str	r6, [sp, #28]
  405d74:	9401      	str	r4, [sp, #4]
  405d76:	f8df b070 	ldr.w	fp, [pc, #112]	; 405de8 <_vfiprintf_r+0xc8c>
  405d7a:	e4d5      	b.n	405728 <_vfiprintf_r+0x5cc>
  405d7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  405d7e:	4e19      	ldr	r6, [pc, #100]	; (405de4 <_vfiprintf_r+0xc88>)
  405d80:	3001      	adds	r0, #1
  405d82:	e603      	b.n	40598c <_vfiprintf_r+0x830>
  405d84:	9405      	str	r4, [sp, #20]
  405d86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d8a:	9607      	str	r6, [sp, #28]
  405d8c:	9302      	str	r3, [sp, #8]
  405d8e:	4604      	mov	r4, r0
  405d90:	f7ff bb36 	b.w	405400 <_vfiprintf_r+0x2a4>
  405d94:	4686      	mov	lr, r0
  405d96:	f7ff bbce 	b.w	405536 <_vfiprintf_r+0x3da>
  405d9a:	9806      	ldr	r0, [sp, #24]
  405d9c:	aa0f      	add	r2, sp, #60	; 0x3c
  405d9e:	4659      	mov	r1, fp
  405da0:	f7ff f99c 	bl	4050dc <__sprint_r.part.0>
  405da4:	2800      	cmp	r0, #0
  405da6:	f43f ae24 	beq.w	4059f2 <_vfiprintf_r+0x896>
  405daa:	e624      	b.n	4059f6 <_vfiprintf_r+0x89a>
  405dac:	9907      	ldr	r1, [sp, #28]
  405dae:	f898 2001 	ldrb.w	r2, [r8, #1]
  405db2:	680c      	ldr	r4, [r1, #0]
  405db4:	3104      	adds	r1, #4
  405db6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405dba:	46b8      	mov	r8, r7
  405dbc:	9107      	str	r1, [sp, #28]
  405dbe:	f7ff ba3f 	b.w	405240 <_vfiprintf_r+0xe4>
  405dc2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dc6:	e43c      	b.n	405642 <_vfiprintf_r+0x4e6>
  405dc8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dcc:	e521      	b.n	405812 <_vfiprintf_r+0x6b6>
  405dce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dd2:	f7ff bbf4 	b.w	4055be <_vfiprintf_r+0x462>
  405dd6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405dda:	e491      	b.n	405700 <_vfiprintf_r+0x5a4>
  405ddc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405de0:	e469      	b.n	4056b6 <_vfiprintf_r+0x55a>
  405de2:	bf00      	nop
  405de4:	0040f1c0 	.word	0x0040f1c0
  405de8:	0040f1b8 	.word	0x0040f1b8

00405dec <__sbprintf>:
  405dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405df0:	460c      	mov	r4, r1
  405df2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405df6:	8989      	ldrh	r1, [r1, #12]
  405df8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405dfa:	89e5      	ldrh	r5, [r4, #14]
  405dfc:	9619      	str	r6, [sp, #100]	; 0x64
  405dfe:	f021 0102 	bic.w	r1, r1, #2
  405e02:	4606      	mov	r6, r0
  405e04:	69e0      	ldr	r0, [r4, #28]
  405e06:	f8ad 100c 	strh.w	r1, [sp, #12]
  405e0a:	4617      	mov	r7, r2
  405e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405e10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405e12:	f8ad 500e 	strh.w	r5, [sp, #14]
  405e16:	4698      	mov	r8, r3
  405e18:	ad1a      	add	r5, sp, #104	; 0x68
  405e1a:	2300      	movs	r3, #0
  405e1c:	9007      	str	r0, [sp, #28]
  405e1e:	a816      	add	r0, sp, #88	; 0x58
  405e20:	9209      	str	r2, [sp, #36]	; 0x24
  405e22:	9306      	str	r3, [sp, #24]
  405e24:	9500      	str	r5, [sp, #0]
  405e26:	9504      	str	r5, [sp, #16]
  405e28:	9102      	str	r1, [sp, #8]
  405e2a:	9105      	str	r1, [sp, #20]
  405e2c:	f000 fd48 	bl	4068c0 <__retarget_lock_init_recursive>
  405e30:	4643      	mov	r3, r8
  405e32:	463a      	mov	r2, r7
  405e34:	4669      	mov	r1, sp
  405e36:	4630      	mov	r0, r6
  405e38:	f7ff f990 	bl	40515c <_vfiprintf_r>
  405e3c:	1e05      	subs	r5, r0, #0
  405e3e:	db07      	blt.n	405e50 <__sbprintf+0x64>
  405e40:	4630      	mov	r0, r6
  405e42:	4669      	mov	r1, sp
  405e44:	f000 f928 	bl	406098 <_fflush_r>
  405e48:	2800      	cmp	r0, #0
  405e4a:	bf18      	it	ne
  405e4c:	f04f 35ff 	movne.w	r5, #4294967295
  405e50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405e54:	065b      	lsls	r3, r3, #25
  405e56:	d503      	bpl.n	405e60 <__sbprintf+0x74>
  405e58:	89a3      	ldrh	r3, [r4, #12]
  405e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e5e:	81a3      	strh	r3, [r4, #12]
  405e60:	9816      	ldr	r0, [sp, #88]	; 0x58
  405e62:	f000 fd2f 	bl	4068c4 <__retarget_lock_close_recursive>
  405e66:	4628      	mov	r0, r5
  405e68:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405e70 <__swsetup_r>:
  405e70:	b538      	push	{r3, r4, r5, lr}
  405e72:	4b30      	ldr	r3, [pc, #192]	; (405f34 <__swsetup_r+0xc4>)
  405e74:	681b      	ldr	r3, [r3, #0]
  405e76:	4605      	mov	r5, r0
  405e78:	460c      	mov	r4, r1
  405e7a:	b113      	cbz	r3, 405e82 <__swsetup_r+0x12>
  405e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405e7e:	2a00      	cmp	r2, #0
  405e80:	d038      	beq.n	405ef4 <__swsetup_r+0x84>
  405e82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405e86:	b293      	uxth	r3, r2
  405e88:	0718      	lsls	r0, r3, #28
  405e8a:	d50c      	bpl.n	405ea6 <__swsetup_r+0x36>
  405e8c:	6920      	ldr	r0, [r4, #16]
  405e8e:	b1a8      	cbz	r0, 405ebc <__swsetup_r+0x4c>
  405e90:	f013 0201 	ands.w	r2, r3, #1
  405e94:	d01e      	beq.n	405ed4 <__swsetup_r+0x64>
  405e96:	6963      	ldr	r3, [r4, #20]
  405e98:	2200      	movs	r2, #0
  405e9a:	425b      	negs	r3, r3
  405e9c:	61a3      	str	r3, [r4, #24]
  405e9e:	60a2      	str	r2, [r4, #8]
  405ea0:	b1f0      	cbz	r0, 405ee0 <__swsetup_r+0x70>
  405ea2:	2000      	movs	r0, #0
  405ea4:	bd38      	pop	{r3, r4, r5, pc}
  405ea6:	06d9      	lsls	r1, r3, #27
  405ea8:	d53c      	bpl.n	405f24 <__swsetup_r+0xb4>
  405eaa:	0758      	lsls	r0, r3, #29
  405eac:	d426      	bmi.n	405efc <__swsetup_r+0x8c>
  405eae:	6920      	ldr	r0, [r4, #16]
  405eb0:	f042 0308 	orr.w	r3, r2, #8
  405eb4:	81a3      	strh	r3, [r4, #12]
  405eb6:	b29b      	uxth	r3, r3
  405eb8:	2800      	cmp	r0, #0
  405eba:	d1e9      	bne.n	405e90 <__swsetup_r+0x20>
  405ebc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405ec0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405ec4:	d0e4      	beq.n	405e90 <__swsetup_r+0x20>
  405ec6:	4628      	mov	r0, r5
  405ec8:	4621      	mov	r1, r4
  405eca:	f000 fd2f 	bl	40692c <__smakebuf_r>
  405ece:	89a3      	ldrh	r3, [r4, #12]
  405ed0:	6920      	ldr	r0, [r4, #16]
  405ed2:	e7dd      	b.n	405e90 <__swsetup_r+0x20>
  405ed4:	0799      	lsls	r1, r3, #30
  405ed6:	bf58      	it	pl
  405ed8:	6962      	ldrpl	r2, [r4, #20]
  405eda:	60a2      	str	r2, [r4, #8]
  405edc:	2800      	cmp	r0, #0
  405ede:	d1e0      	bne.n	405ea2 <__swsetup_r+0x32>
  405ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ee4:	061a      	lsls	r2, r3, #24
  405ee6:	d5dd      	bpl.n	405ea4 <__swsetup_r+0x34>
  405ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405eec:	81a3      	strh	r3, [r4, #12]
  405eee:	f04f 30ff 	mov.w	r0, #4294967295
  405ef2:	bd38      	pop	{r3, r4, r5, pc}
  405ef4:	4618      	mov	r0, r3
  405ef6:	f000 f927 	bl	406148 <__sinit>
  405efa:	e7c2      	b.n	405e82 <__swsetup_r+0x12>
  405efc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405efe:	b151      	cbz	r1, 405f16 <__swsetup_r+0xa6>
  405f00:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405f04:	4299      	cmp	r1, r3
  405f06:	d004      	beq.n	405f12 <__swsetup_r+0xa2>
  405f08:	4628      	mov	r0, r5
  405f0a:	f000 fa43 	bl	406394 <_free_r>
  405f0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405f12:	2300      	movs	r3, #0
  405f14:	6323      	str	r3, [r4, #48]	; 0x30
  405f16:	2300      	movs	r3, #0
  405f18:	6920      	ldr	r0, [r4, #16]
  405f1a:	6063      	str	r3, [r4, #4]
  405f1c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405f20:	6020      	str	r0, [r4, #0]
  405f22:	e7c5      	b.n	405eb0 <__swsetup_r+0x40>
  405f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405f28:	2309      	movs	r3, #9
  405f2a:	602b      	str	r3, [r5, #0]
  405f2c:	f04f 30ff 	mov.w	r0, #4294967295
  405f30:	81a2      	strh	r2, [r4, #12]
  405f32:	bd38      	pop	{r3, r4, r5, pc}
  405f34:	20400018 	.word	0x20400018

00405f38 <register_fini>:
  405f38:	4b02      	ldr	r3, [pc, #8]	; (405f44 <register_fini+0xc>)
  405f3a:	b113      	cbz	r3, 405f42 <register_fini+0xa>
  405f3c:	4802      	ldr	r0, [pc, #8]	; (405f48 <register_fini+0x10>)
  405f3e:	f000 b805 	b.w	405f4c <atexit>
  405f42:	4770      	bx	lr
  405f44:	00000000 	.word	0x00000000
  405f48:	004061b9 	.word	0x004061b9

00405f4c <atexit>:
  405f4c:	2300      	movs	r3, #0
  405f4e:	4601      	mov	r1, r0
  405f50:	461a      	mov	r2, r3
  405f52:	4618      	mov	r0, r3
  405f54:	f001 b890 	b.w	407078 <__register_exitproc>

00405f58 <__sflush_r>:
  405f58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405f5c:	b29a      	uxth	r2, r3
  405f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f62:	460d      	mov	r5, r1
  405f64:	0711      	lsls	r1, r2, #28
  405f66:	4680      	mov	r8, r0
  405f68:	d43a      	bmi.n	405fe0 <__sflush_r+0x88>
  405f6a:	686a      	ldr	r2, [r5, #4]
  405f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405f70:	2a00      	cmp	r2, #0
  405f72:	81ab      	strh	r3, [r5, #12]
  405f74:	dd6f      	ble.n	406056 <__sflush_r+0xfe>
  405f76:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405f78:	2c00      	cmp	r4, #0
  405f7a:	d049      	beq.n	406010 <__sflush_r+0xb8>
  405f7c:	2200      	movs	r2, #0
  405f7e:	b29b      	uxth	r3, r3
  405f80:	f8d8 6000 	ldr.w	r6, [r8]
  405f84:	f8c8 2000 	str.w	r2, [r8]
  405f88:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405f8c:	d067      	beq.n	40605e <__sflush_r+0x106>
  405f8e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405f90:	075f      	lsls	r7, r3, #29
  405f92:	d505      	bpl.n	405fa0 <__sflush_r+0x48>
  405f94:	6869      	ldr	r1, [r5, #4]
  405f96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405f98:	1a52      	subs	r2, r2, r1
  405f9a:	b10b      	cbz	r3, 405fa0 <__sflush_r+0x48>
  405f9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405f9e:	1ad2      	subs	r2, r2, r3
  405fa0:	2300      	movs	r3, #0
  405fa2:	69e9      	ldr	r1, [r5, #28]
  405fa4:	4640      	mov	r0, r8
  405fa6:	47a0      	blx	r4
  405fa8:	1c44      	adds	r4, r0, #1
  405faa:	d03c      	beq.n	406026 <__sflush_r+0xce>
  405fac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405fb0:	692a      	ldr	r2, [r5, #16]
  405fb2:	602a      	str	r2, [r5, #0]
  405fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405fb8:	2200      	movs	r2, #0
  405fba:	81ab      	strh	r3, [r5, #12]
  405fbc:	04db      	lsls	r3, r3, #19
  405fbe:	606a      	str	r2, [r5, #4]
  405fc0:	d447      	bmi.n	406052 <__sflush_r+0xfa>
  405fc2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405fc4:	f8c8 6000 	str.w	r6, [r8]
  405fc8:	b311      	cbz	r1, 406010 <__sflush_r+0xb8>
  405fca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405fce:	4299      	cmp	r1, r3
  405fd0:	d002      	beq.n	405fd8 <__sflush_r+0x80>
  405fd2:	4640      	mov	r0, r8
  405fd4:	f000 f9de 	bl	406394 <_free_r>
  405fd8:	2000      	movs	r0, #0
  405fda:	6328      	str	r0, [r5, #48]	; 0x30
  405fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405fe0:	692e      	ldr	r6, [r5, #16]
  405fe2:	b1ae      	cbz	r6, 406010 <__sflush_r+0xb8>
  405fe4:	682c      	ldr	r4, [r5, #0]
  405fe6:	602e      	str	r6, [r5, #0]
  405fe8:	0791      	lsls	r1, r2, #30
  405fea:	bf0c      	ite	eq
  405fec:	696b      	ldreq	r3, [r5, #20]
  405fee:	2300      	movne	r3, #0
  405ff0:	1ba4      	subs	r4, r4, r6
  405ff2:	60ab      	str	r3, [r5, #8]
  405ff4:	e00a      	b.n	40600c <__sflush_r+0xb4>
  405ff6:	4623      	mov	r3, r4
  405ff8:	4632      	mov	r2, r6
  405ffa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405ffc:	69e9      	ldr	r1, [r5, #28]
  405ffe:	4640      	mov	r0, r8
  406000:	47b8      	blx	r7
  406002:	2800      	cmp	r0, #0
  406004:	eba4 0400 	sub.w	r4, r4, r0
  406008:	4406      	add	r6, r0
  40600a:	dd04      	ble.n	406016 <__sflush_r+0xbe>
  40600c:	2c00      	cmp	r4, #0
  40600e:	dcf2      	bgt.n	405ff6 <__sflush_r+0x9e>
  406010:	2000      	movs	r0, #0
  406012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406016:	89ab      	ldrh	r3, [r5, #12]
  406018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40601c:	81ab      	strh	r3, [r5, #12]
  40601e:	f04f 30ff 	mov.w	r0, #4294967295
  406022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406026:	f8d8 4000 	ldr.w	r4, [r8]
  40602a:	2c1d      	cmp	r4, #29
  40602c:	d8f3      	bhi.n	406016 <__sflush_r+0xbe>
  40602e:	4b19      	ldr	r3, [pc, #100]	; (406094 <__sflush_r+0x13c>)
  406030:	40e3      	lsrs	r3, r4
  406032:	43db      	mvns	r3, r3
  406034:	f013 0301 	ands.w	r3, r3, #1
  406038:	d1ed      	bne.n	406016 <__sflush_r+0xbe>
  40603a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40603e:	606b      	str	r3, [r5, #4]
  406040:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406044:	6929      	ldr	r1, [r5, #16]
  406046:	81ab      	strh	r3, [r5, #12]
  406048:	04da      	lsls	r2, r3, #19
  40604a:	6029      	str	r1, [r5, #0]
  40604c:	d5b9      	bpl.n	405fc2 <__sflush_r+0x6a>
  40604e:	2c00      	cmp	r4, #0
  406050:	d1b7      	bne.n	405fc2 <__sflush_r+0x6a>
  406052:	6528      	str	r0, [r5, #80]	; 0x50
  406054:	e7b5      	b.n	405fc2 <__sflush_r+0x6a>
  406056:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406058:	2a00      	cmp	r2, #0
  40605a:	dc8c      	bgt.n	405f76 <__sflush_r+0x1e>
  40605c:	e7d8      	b.n	406010 <__sflush_r+0xb8>
  40605e:	2301      	movs	r3, #1
  406060:	69e9      	ldr	r1, [r5, #28]
  406062:	4640      	mov	r0, r8
  406064:	47a0      	blx	r4
  406066:	1c43      	adds	r3, r0, #1
  406068:	4602      	mov	r2, r0
  40606a:	d002      	beq.n	406072 <__sflush_r+0x11a>
  40606c:	89ab      	ldrh	r3, [r5, #12]
  40606e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406070:	e78e      	b.n	405f90 <__sflush_r+0x38>
  406072:	f8d8 3000 	ldr.w	r3, [r8]
  406076:	2b00      	cmp	r3, #0
  406078:	d0f8      	beq.n	40606c <__sflush_r+0x114>
  40607a:	2b1d      	cmp	r3, #29
  40607c:	d001      	beq.n	406082 <__sflush_r+0x12a>
  40607e:	2b16      	cmp	r3, #22
  406080:	d102      	bne.n	406088 <__sflush_r+0x130>
  406082:	f8c8 6000 	str.w	r6, [r8]
  406086:	e7c3      	b.n	406010 <__sflush_r+0xb8>
  406088:	89ab      	ldrh	r3, [r5, #12]
  40608a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40608e:	81ab      	strh	r3, [r5, #12]
  406090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406094:	20400001 	.word	0x20400001

00406098 <_fflush_r>:
  406098:	b538      	push	{r3, r4, r5, lr}
  40609a:	460d      	mov	r5, r1
  40609c:	4604      	mov	r4, r0
  40609e:	b108      	cbz	r0, 4060a4 <_fflush_r+0xc>
  4060a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4060a2:	b1bb      	cbz	r3, 4060d4 <_fflush_r+0x3c>
  4060a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4060a8:	b188      	cbz	r0, 4060ce <_fflush_r+0x36>
  4060aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4060ac:	07db      	lsls	r3, r3, #31
  4060ae:	d401      	bmi.n	4060b4 <_fflush_r+0x1c>
  4060b0:	0581      	lsls	r1, r0, #22
  4060b2:	d517      	bpl.n	4060e4 <_fflush_r+0x4c>
  4060b4:	4620      	mov	r0, r4
  4060b6:	4629      	mov	r1, r5
  4060b8:	f7ff ff4e 	bl	405f58 <__sflush_r>
  4060bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4060be:	07da      	lsls	r2, r3, #31
  4060c0:	4604      	mov	r4, r0
  4060c2:	d402      	bmi.n	4060ca <_fflush_r+0x32>
  4060c4:	89ab      	ldrh	r3, [r5, #12]
  4060c6:	059b      	lsls	r3, r3, #22
  4060c8:	d507      	bpl.n	4060da <_fflush_r+0x42>
  4060ca:	4620      	mov	r0, r4
  4060cc:	bd38      	pop	{r3, r4, r5, pc}
  4060ce:	4604      	mov	r4, r0
  4060d0:	4620      	mov	r0, r4
  4060d2:	bd38      	pop	{r3, r4, r5, pc}
  4060d4:	f000 f838 	bl	406148 <__sinit>
  4060d8:	e7e4      	b.n	4060a4 <_fflush_r+0xc>
  4060da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4060dc:	f000 fbf6 	bl	4068cc <__retarget_lock_release_recursive>
  4060e0:	4620      	mov	r0, r4
  4060e2:	bd38      	pop	{r3, r4, r5, pc}
  4060e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4060e6:	f000 fbef 	bl	4068c8 <__retarget_lock_acquire_recursive>
  4060ea:	e7e3      	b.n	4060b4 <_fflush_r+0x1c>

004060ec <_cleanup_r>:
  4060ec:	4901      	ldr	r1, [pc, #4]	; (4060f4 <_cleanup_r+0x8>)
  4060ee:	f000 bbaf 	b.w	406850 <_fwalk_reent>
  4060f2:	bf00      	nop
  4060f4:	00407161 	.word	0x00407161

004060f8 <std.isra.0>:
  4060f8:	b510      	push	{r4, lr}
  4060fa:	2300      	movs	r3, #0
  4060fc:	4604      	mov	r4, r0
  4060fe:	8181      	strh	r1, [r0, #12]
  406100:	81c2      	strh	r2, [r0, #14]
  406102:	6003      	str	r3, [r0, #0]
  406104:	6043      	str	r3, [r0, #4]
  406106:	6083      	str	r3, [r0, #8]
  406108:	6643      	str	r3, [r0, #100]	; 0x64
  40610a:	6103      	str	r3, [r0, #16]
  40610c:	6143      	str	r3, [r0, #20]
  40610e:	6183      	str	r3, [r0, #24]
  406110:	4619      	mov	r1, r3
  406112:	2208      	movs	r2, #8
  406114:	305c      	adds	r0, #92	; 0x5c
  406116:	f7fe fe29 	bl	404d6c <memset>
  40611a:	4807      	ldr	r0, [pc, #28]	; (406138 <std.isra.0+0x40>)
  40611c:	4907      	ldr	r1, [pc, #28]	; (40613c <std.isra.0+0x44>)
  40611e:	4a08      	ldr	r2, [pc, #32]	; (406140 <std.isra.0+0x48>)
  406120:	4b08      	ldr	r3, [pc, #32]	; (406144 <std.isra.0+0x4c>)
  406122:	6220      	str	r0, [r4, #32]
  406124:	61e4      	str	r4, [r4, #28]
  406126:	6261      	str	r1, [r4, #36]	; 0x24
  406128:	62a2      	str	r2, [r4, #40]	; 0x28
  40612a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40612c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406134:	f000 bbc4 	b.w	4068c0 <__retarget_lock_init_recursive>
  406138:	00406ea5 	.word	0x00406ea5
  40613c:	00406ec9 	.word	0x00406ec9
  406140:	00406f05 	.word	0x00406f05
  406144:	00406f25 	.word	0x00406f25

00406148 <__sinit>:
  406148:	b510      	push	{r4, lr}
  40614a:	4604      	mov	r4, r0
  40614c:	4812      	ldr	r0, [pc, #72]	; (406198 <__sinit+0x50>)
  40614e:	f000 fbbb 	bl	4068c8 <__retarget_lock_acquire_recursive>
  406152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406154:	b9d2      	cbnz	r2, 40618c <__sinit+0x44>
  406156:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40615a:	4810      	ldr	r0, [pc, #64]	; (40619c <__sinit+0x54>)
  40615c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406160:	2103      	movs	r1, #3
  406162:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406166:	63e0      	str	r0, [r4, #60]	; 0x3c
  406168:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40616c:	6860      	ldr	r0, [r4, #4]
  40616e:	2104      	movs	r1, #4
  406170:	f7ff ffc2 	bl	4060f8 <std.isra.0>
  406174:	2201      	movs	r2, #1
  406176:	2109      	movs	r1, #9
  406178:	68a0      	ldr	r0, [r4, #8]
  40617a:	f7ff ffbd 	bl	4060f8 <std.isra.0>
  40617e:	2202      	movs	r2, #2
  406180:	2112      	movs	r1, #18
  406182:	68e0      	ldr	r0, [r4, #12]
  406184:	f7ff ffb8 	bl	4060f8 <std.isra.0>
  406188:	2301      	movs	r3, #1
  40618a:	63a3      	str	r3, [r4, #56]	; 0x38
  40618c:	4802      	ldr	r0, [pc, #8]	; (406198 <__sinit+0x50>)
  40618e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406192:	f000 bb9b 	b.w	4068cc <__retarget_lock_release_recursive>
  406196:	bf00      	nop
  406198:	2040c898 	.word	0x2040c898
  40619c:	004060ed 	.word	0x004060ed

004061a0 <__sfp_lock_acquire>:
  4061a0:	4801      	ldr	r0, [pc, #4]	; (4061a8 <__sfp_lock_acquire+0x8>)
  4061a2:	f000 bb91 	b.w	4068c8 <__retarget_lock_acquire_recursive>
  4061a6:	bf00      	nop
  4061a8:	2040c8ac 	.word	0x2040c8ac

004061ac <__sfp_lock_release>:
  4061ac:	4801      	ldr	r0, [pc, #4]	; (4061b4 <__sfp_lock_release+0x8>)
  4061ae:	f000 bb8d 	b.w	4068cc <__retarget_lock_release_recursive>
  4061b2:	bf00      	nop
  4061b4:	2040c8ac 	.word	0x2040c8ac

004061b8 <__libc_fini_array>:
  4061b8:	b538      	push	{r3, r4, r5, lr}
  4061ba:	4c0a      	ldr	r4, [pc, #40]	; (4061e4 <__libc_fini_array+0x2c>)
  4061bc:	4d0a      	ldr	r5, [pc, #40]	; (4061e8 <__libc_fini_array+0x30>)
  4061be:	1b64      	subs	r4, r4, r5
  4061c0:	10a4      	asrs	r4, r4, #2
  4061c2:	d00a      	beq.n	4061da <__libc_fini_array+0x22>
  4061c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4061c8:	3b01      	subs	r3, #1
  4061ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4061ce:	3c01      	subs	r4, #1
  4061d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4061d4:	4798      	blx	r3
  4061d6:	2c00      	cmp	r4, #0
  4061d8:	d1f9      	bne.n	4061ce <__libc_fini_array+0x16>
  4061da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4061de:	f009 b893 	b.w	40f308 <_fini>
  4061e2:	bf00      	nop
  4061e4:	0040f318 	.word	0x0040f318
  4061e8:	0040f314 	.word	0x0040f314

004061ec <__fputwc>:
  4061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4061f0:	b082      	sub	sp, #8
  4061f2:	4680      	mov	r8, r0
  4061f4:	4689      	mov	r9, r1
  4061f6:	4614      	mov	r4, r2
  4061f8:	f000 fb54 	bl	4068a4 <__locale_mb_cur_max>
  4061fc:	2801      	cmp	r0, #1
  4061fe:	d036      	beq.n	40626e <__fputwc+0x82>
  406200:	464a      	mov	r2, r9
  406202:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406206:	a901      	add	r1, sp, #4
  406208:	4640      	mov	r0, r8
  40620a:	f000 fee7 	bl	406fdc <_wcrtomb_r>
  40620e:	1c42      	adds	r2, r0, #1
  406210:	4606      	mov	r6, r0
  406212:	d025      	beq.n	406260 <__fputwc+0x74>
  406214:	b3a8      	cbz	r0, 406282 <__fputwc+0x96>
  406216:	f89d e004 	ldrb.w	lr, [sp, #4]
  40621a:	2500      	movs	r5, #0
  40621c:	f10d 0a04 	add.w	sl, sp, #4
  406220:	e009      	b.n	406236 <__fputwc+0x4a>
  406222:	6823      	ldr	r3, [r4, #0]
  406224:	1c5a      	adds	r2, r3, #1
  406226:	6022      	str	r2, [r4, #0]
  406228:	f883 e000 	strb.w	lr, [r3]
  40622c:	3501      	adds	r5, #1
  40622e:	42b5      	cmp	r5, r6
  406230:	d227      	bcs.n	406282 <__fputwc+0x96>
  406232:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406236:	68a3      	ldr	r3, [r4, #8]
  406238:	3b01      	subs	r3, #1
  40623a:	2b00      	cmp	r3, #0
  40623c:	60a3      	str	r3, [r4, #8]
  40623e:	daf0      	bge.n	406222 <__fputwc+0x36>
  406240:	69a7      	ldr	r7, [r4, #24]
  406242:	42bb      	cmp	r3, r7
  406244:	4671      	mov	r1, lr
  406246:	4622      	mov	r2, r4
  406248:	4640      	mov	r0, r8
  40624a:	db02      	blt.n	406252 <__fputwc+0x66>
  40624c:	f1be 0f0a 	cmp.w	lr, #10
  406250:	d1e7      	bne.n	406222 <__fputwc+0x36>
  406252:	f000 fe6b 	bl	406f2c <__swbuf_r>
  406256:	1c43      	adds	r3, r0, #1
  406258:	d1e8      	bne.n	40622c <__fputwc+0x40>
  40625a:	b002      	add	sp, #8
  40625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406260:	89a3      	ldrh	r3, [r4, #12]
  406262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406266:	81a3      	strh	r3, [r4, #12]
  406268:	b002      	add	sp, #8
  40626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40626e:	f109 33ff 	add.w	r3, r9, #4294967295
  406272:	2bfe      	cmp	r3, #254	; 0xfe
  406274:	d8c4      	bhi.n	406200 <__fputwc+0x14>
  406276:	fa5f fe89 	uxtb.w	lr, r9
  40627a:	4606      	mov	r6, r0
  40627c:	f88d e004 	strb.w	lr, [sp, #4]
  406280:	e7cb      	b.n	40621a <__fputwc+0x2e>
  406282:	4648      	mov	r0, r9
  406284:	b002      	add	sp, #8
  406286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40628a:	bf00      	nop

0040628c <_fputwc_r>:
  40628c:	b530      	push	{r4, r5, lr}
  40628e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406290:	f013 0f01 	tst.w	r3, #1
  406294:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406298:	4614      	mov	r4, r2
  40629a:	b083      	sub	sp, #12
  40629c:	4605      	mov	r5, r0
  40629e:	b29a      	uxth	r2, r3
  4062a0:	d101      	bne.n	4062a6 <_fputwc_r+0x1a>
  4062a2:	0590      	lsls	r0, r2, #22
  4062a4:	d51c      	bpl.n	4062e0 <_fputwc_r+0x54>
  4062a6:	0490      	lsls	r0, r2, #18
  4062a8:	d406      	bmi.n	4062b8 <_fputwc_r+0x2c>
  4062aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4062ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4062b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4062b4:	81a3      	strh	r3, [r4, #12]
  4062b6:	6662      	str	r2, [r4, #100]	; 0x64
  4062b8:	4628      	mov	r0, r5
  4062ba:	4622      	mov	r2, r4
  4062bc:	f7ff ff96 	bl	4061ec <__fputwc>
  4062c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062c2:	07da      	lsls	r2, r3, #31
  4062c4:	4605      	mov	r5, r0
  4062c6:	d402      	bmi.n	4062ce <_fputwc_r+0x42>
  4062c8:	89a3      	ldrh	r3, [r4, #12]
  4062ca:	059b      	lsls	r3, r3, #22
  4062cc:	d502      	bpl.n	4062d4 <_fputwc_r+0x48>
  4062ce:	4628      	mov	r0, r5
  4062d0:	b003      	add	sp, #12
  4062d2:	bd30      	pop	{r4, r5, pc}
  4062d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062d6:	f000 faf9 	bl	4068cc <__retarget_lock_release_recursive>
  4062da:	4628      	mov	r0, r5
  4062dc:	b003      	add	sp, #12
  4062de:	bd30      	pop	{r4, r5, pc}
  4062e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062e2:	9101      	str	r1, [sp, #4]
  4062e4:	f000 faf0 	bl	4068c8 <__retarget_lock_acquire_recursive>
  4062e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062ec:	9901      	ldr	r1, [sp, #4]
  4062ee:	b29a      	uxth	r2, r3
  4062f0:	e7d9      	b.n	4062a6 <_fputwc_r+0x1a>
  4062f2:	bf00      	nop

004062f4 <_malloc_trim_r>:
  4062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4062f6:	4f24      	ldr	r7, [pc, #144]	; (406388 <_malloc_trim_r+0x94>)
  4062f8:	460c      	mov	r4, r1
  4062fa:	4606      	mov	r6, r0
  4062fc:	f7fe fd84 	bl	404e08 <__malloc_lock>
  406300:	68bb      	ldr	r3, [r7, #8]
  406302:	685d      	ldr	r5, [r3, #4]
  406304:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406308:	310f      	adds	r1, #15
  40630a:	f025 0503 	bic.w	r5, r5, #3
  40630e:	4429      	add	r1, r5
  406310:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406314:	f021 010f 	bic.w	r1, r1, #15
  406318:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40631c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406320:	db07      	blt.n	406332 <_malloc_trim_r+0x3e>
  406322:	2100      	movs	r1, #0
  406324:	4630      	mov	r0, r6
  406326:	f7fe fd7b 	bl	404e20 <_sbrk_r>
  40632a:	68bb      	ldr	r3, [r7, #8]
  40632c:	442b      	add	r3, r5
  40632e:	4298      	cmp	r0, r3
  406330:	d004      	beq.n	40633c <_malloc_trim_r+0x48>
  406332:	4630      	mov	r0, r6
  406334:	f7fe fd6e 	bl	404e14 <__malloc_unlock>
  406338:	2000      	movs	r0, #0
  40633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40633c:	4261      	negs	r1, r4
  40633e:	4630      	mov	r0, r6
  406340:	f7fe fd6e 	bl	404e20 <_sbrk_r>
  406344:	3001      	adds	r0, #1
  406346:	d00d      	beq.n	406364 <_malloc_trim_r+0x70>
  406348:	4b10      	ldr	r3, [pc, #64]	; (40638c <_malloc_trim_r+0x98>)
  40634a:	68ba      	ldr	r2, [r7, #8]
  40634c:	6819      	ldr	r1, [r3, #0]
  40634e:	1b2d      	subs	r5, r5, r4
  406350:	f045 0501 	orr.w	r5, r5, #1
  406354:	4630      	mov	r0, r6
  406356:	1b09      	subs	r1, r1, r4
  406358:	6055      	str	r5, [r2, #4]
  40635a:	6019      	str	r1, [r3, #0]
  40635c:	f7fe fd5a 	bl	404e14 <__malloc_unlock>
  406360:	2001      	movs	r0, #1
  406362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406364:	2100      	movs	r1, #0
  406366:	4630      	mov	r0, r6
  406368:	f7fe fd5a 	bl	404e20 <_sbrk_r>
  40636c:	68ba      	ldr	r2, [r7, #8]
  40636e:	1a83      	subs	r3, r0, r2
  406370:	2b0f      	cmp	r3, #15
  406372:	ddde      	ble.n	406332 <_malloc_trim_r+0x3e>
  406374:	4c06      	ldr	r4, [pc, #24]	; (406390 <_malloc_trim_r+0x9c>)
  406376:	4905      	ldr	r1, [pc, #20]	; (40638c <_malloc_trim_r+0x98>)
  406378:	6824      	ldr	r4, [r4, #0]
  40637a:	f043 0301 	orr.w	r3, r3, #1
  40637e:	1b00      	subs	r0, r0, r4
  406380:	6053      	str	r3, [r2, #4]
  406382:	6008      	str	r0, [r1, #0]
  406384:	e7d5      	b.n	406332 <_malloc_trim_r+0x3e>
  406386:	bf00      	nop
  406388:	20400448 	.word	0x20400448
  40638c:	2040c768 	.word	0x2040c768
  406390:	20400850 	.word	0x20400850

00406394 <_free_r>:
  406394:	2900      	cmp	r1, #0
  406396:	d044      	beq.n	406422 <_free_r+0x8e>
  406398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40639c:	460d      	mov	r5, r1
  40639e:	4680      	mov	r8, r0
  4063a0:	f7fe fd32 	bl	404e08 <__malloc_lock>
  4063a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4063a8:	4969      	ldr	r1, [pc, #420]	; (406550 <_free_r+0x1bc>)
  4063aa:	f027 0301 	bic.w	r3, r7, #1
  4063ae:	f1a5 0408 	sub.w	r4, r5, #8
  4063b2:	18e2      	adds	r2, r4, r3
  4063b4:	688e      	ldr	r6, [r1, #8]
  4063b6:	6850      	ldr	r0, [r2, #4]
  4063b8:	42b2      	cmp	r2, r6
  4063ba:	f020 0003 	bic.w	r0, r0, #3
  4063be:	d05e      	beq.n	40647e <_free_r+0xea>
  4063c0:	07fe      	lsls	r6, r7, #31
  4063c2:	6050      	str	r0, [r2, #4]
  4063c4:	d40b      	bmi.n	4063de <_free_r+0x4a>
  4063c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4063ca:	1be4      	subs	r4, r4, r7
  4063cc:	f101 0e08 	add.w	lr, r1, #8
  4063d0:	68a5      	ldr	r5, [r4, #8]
  4063d2:	4575      	cmp	r5, lr
  4063d4:	443b      	add	r3, r7
  4063d6:	d06d      	beq.n	4064b4 <_free_r+0x120>
  4063d8:	68e7      	ldr	r7, [r4, #12]
  4063da:	60ef      	str	r7, [r5, #12]
  4063dc:	60bd      	str	r5, [r7, #8]
  4063de:	1815      	adds	r5, r2, r0
  4063e0:	686d      	ldr	r5, [r5, #4]
  4063e2:	07ed      	lsls	r5, r5, #31
  4063e4:	d53e      	bpl.n	406464 <_free_r+0xd0>
  4063e6:	f043 0201 	orr.w	r2, r3, #1
  4063ea:	6062      	str	r2, [r4, #4]
  4063ec:	50e3      	str	r3, [r4, r3]
  4063ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4063f2:	d217      	bcs.n	406424 <_free_r+0x90>
  4063f4:	08db      	lsrs	r3, r3, #3
  4063f6:	1c58      	adds	r0, r3, #1
  4063f8:	109a      	asrs	r2, r3, #2
  4063fa:	684d      	ldr	r5, [r1, #4]
  4063fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406400:	60a7      	str	r7, [r4, #8]
  406402:	2301      	movs	r3, #1
  406404:	4093      	lsls	r3, r2
  406406:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40640a:	432b      	orrs	r3, r5
  40640c:	3a08      	subs	r2, #8
  40640e:	60e2      	str	r2, [r4, #12]
  406410:	604b      	str	r3, [r1, #4]
  406412:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406416:	60fc      	str	r4, [r7, #12]
  406418:	4640      	mov	r0, r8
  40641a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40641e:	f7fe bcf9 	b.w	404e14 <__malloc_unlock>
  406422:	4770      	bx	lr
  406424:	0a5a      	lsrs	r2, r3, #9
  406426:	2a04      	cmp	r2, #4
  406428:	d852      	bhi.n	4064d0 <_free_r+0x13c>
  40642a:	099a      	lsrs	r2, r3, #6
  40642c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406430:	00ff      	lsls	r7, r7, #3
  406432:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406436:	19c8      	adds	r0, r1, r7
  406438:	59ca      	ldr	r2, [r1, r7]
  40643a:	3808      	subs	r0, #8
  40643c:	4290      	cmp	r0, r2
  40643e:	d04f      	beq.n	4064e0 <_free_r+0x14c>
  406440:	6851      	ldr	r1, [r2, #4]
  406442:	f021 0103 	bic.w	r1, r1, #3
  406446:	428b      	cmp	r3, r1
  406448:	d232      	bcs.n	4064b0 <_free_r+0x11c>
  40644a:	6892      	ldr	r2, [r2, #8]
  40644c:	4290      	cmp	r0, r2
  40644e:	d1f7      	bne.n	406440 <_free_r+0xac>
  406450:	68c3      	ldr	r3, [r0, #12]
  406452:	60a0      	str	r0, [r4, #8]
  406454:	60e3      	str	r3, [r4, #12]
  406456:	609c      	str	r4, [r3, #8]
  406458:	60c4      	str	r4, [r0, #12]
  40645a:	4640      	mov	r0, r8
  40645c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406460:	f7fe bcd8 	b.w	404e14 <__malloc_unlock>
  406464:	6895      	ldr	r5, [r2, #8]
  406466:	4f3b      	ldr	r7, [pc, #236]	; (406554 <_free_r+0x1c0>)
  406468:	42bd      	cmp	r5, r7
  40646a:	4403      	add	r3, r0
  40646c:	d040      	beq.n	4064f0 <_free_r+0x15c>
  40646e:	68d0      	ldr	r0, [r2, #12]
  406470:	60e8      	str	r0, [r5, #12]
  406472:	f043 0201 	orr.w	r2, r3, #1
  406476:	6085      	str	r5, [r0, #8]
  406478:	6062      	str	r2, [r4, #4]
  40647a:	50e3      	str	r3, [r4, r3]
  40647c:	e7b7      	b.n	4063ee <_free_r+0x5a>
  40647e:	07ff      	lsls	r7, r7, #31
  406480:	4403      	add	r3, r0
  406482:	d407      	bmi.n	406494 <_free_r+0x100>
  406484:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406488:	1aa4      	subs	r4, r4, r2
  40648a:	4413      	add	r3, r2
  40648c:	68a0      	ldr	r0, [r4, #8]
  40648e:	68e2      	ldr	r2, [r4, #12]
  406490:	60c2      	str	r2, [r0, #12]
  406492:	6090      	str	r0, [r2, #8]
  406494:	4a30      	ldr	r2, [pc, #192]	; (406558 <_free_r+0x1c4>)
  406496:	6812      	ldr	r2, [r2, #0]
  406498:	f043 0001 	orr.w	r0, r3, #1
  40649c:	4293      	cmp	r3, r2
  40649e:	6060      	str	r0, [r4, #4]
  4064a0:	608c      	str	r4, [r1, #8]
  4064a2:	d3b9      	bcc.n	406418 <_free_r+0x84>
  4064a4:	4b2d      	ldr	r3, [pc, #180]	; (40655c <_free_r+0x1c8>)
  4064a6:	4640      	mov	r0, r8
  4064a8:	6819      	ldr	r1, [r3, #0]
  4064aa:	f7ff ff23 	bl	4062f4 <_malloc_trim_r>
  4064ae:	e7b3      	b.n	406418 <_free_r+0x84>
  4064b0:	4610      	mov	r0, r2
  4064b2:	e7cd      	b.n	406450 <_free_r+0xbc>
  4064b4:	1811      	adds	r1, r2, r0
  4064b6:	6849      	ldr	r1, [r1, #4]
  4064b8:	07c9      	lsls	r1, r1, #31
  4064ba:	d444      	bmi.n	406546 <_free_r+0x1b2>
  4064bc:	6891      	ldr	r1, [r2, #8]
  4064be:	68d2      	ldr	r2, [r2, #12]
  4064c0:	60ca      	str	r2, [r1, #12]
  4064c2:	4403      	add	r3, r0
  4064c4:	f043 0001 	orr.w	r0, r3, #1
  4064c8:	6091      	str	r1, [r2, #8]
  4064ca:	6060      	str	r0, [r4, #4]
  4064cc:	50e3      	str	r3, [r4, r3]
  4064ce:	e7a3      	b.n	406418 <_free_r+0x84>
  4064d0:	2a14      	cmp	r2, #20
  4064d2:	d816      	bhi.n	406502 <_free_r+0x16e>
  4064d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4064d8:	00ff      	lsls	r7, r7, #3
  4064da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4064de:	e7aa      	b.n	406436 <_free_r+0xa2>
  4064e0:	10aa      	asrs	r2, r5, #2
  4064e2:	2301      	movs	r3, #1
  4064e4:	684d      	ldr	r5, [r1, #4]
  4064e6:	4093      	lsls	r3, r2
  4064e8:	432b      	orrs	r3, r5
  4064ea:	604b      	str	r3, [r1, #4]
  4064ec:	4603      	mov	r3, r0
  4064ee:	e7b0      	b.n	406452 <_free_r+0xbe>
  4064f0:	f043 0201 	orr.w	r2, r3, #1
  4064f4:	614c      	str	r4, [r1, #20]
  4064f6:	610c      	str	r4, [r1, #16]
  4064f8:	60e5      	str	r5, [r4, #12]
  4064fa:	60a5      	str	r5, [r4, #8]
  4064fc:	6062      	str	r2, [r4, #4]
  4064fe:	50e3      	str	r3, [r4, r3]
  406500:	e78a      	b.n	406418 <_free_r+0x84>
  406502:	2a54      	cmp	r2, #84	; 0x54
  406504:	d806      	bhi.n	406514 <_free_r+0x180>
  406506:	0b1a      	lsrs	r2, r3, #12
  406508:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40650c:	00ff      	lsls	r7, r7, #3
  40650e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406512:	e790      	b.n	406436 <_free_r+0xa2>
  406514:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406518:	d806      	bhi.n	406528 <_free_r+0x194>
  40651a:	0bda      	lsrs	r2, r3, #15
  40651c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406520:	00ff      	lsls	r7, r7, #3
  406522:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406526:	e786      	b.n	406436 <_free_r+0xa2>
  406528:	f240 5054 	movw	r0, #1364	; 0x554
  40652c:	4282      	cmp	r2, r0
  40652e:	d806      	bhi.n	40653e <_free_r+0x1aa>
  406530:	0c9a      	lsrs	r2, r3, #18
  406532:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406536:	00ff      	lsls	r7, r7, #3
  406538:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40653c:	e77b      	b.n	406436 <_free_r+0xa2>
  40653e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406542:	257e      	movs	r5, #126	; 0x7e
  406544:	e777      	b.n	406436 <_free_r+0xa2>
  406546:	f043 0101 	orr.w	r1, r3, #1
  40654a:	6061      	str	r1, [r4, #4]
  40654c:	6013      	str	r3, [r2, #0]
  40654e:	e763      	b.n	406418 <_free_r+0x84>
  406550:	20400448 	.word	0x20400448
  406554:	20400450 	.word	0x20400450
  406558:	20400854 	.word	0x20400854
  40655c:	2040c798 	.word	0x2040c798

00406560 <__sfvwrite_r>:
  406560:	6893      	ldr	r3, [r2, #8]
  406562:	2b00      	cmp	r3, #0
  406564:	d073      	beq.n	40664e <__sfvwrite_r+0xee>
  406566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40656a:	898b      	ldrh	r3, [r1, #12]
  40656c:	b083      	sub	sp, #12
  40656e:	460c      	mov	r4, r1
  406570:	0719      	lsls	r1, r3, #28
  406572:	9000      	str	r0, [sp, #0]
  406574:	4616      	mov	r6, r2
  406576:	d526      	bpl.n	4065c6 <__sfvwrite_r+0x66>
  406578:	6922      	ldr	r2, [r4, #16]
  40657a:	b322      	cbz	r2, 4065c6 <__sfvwrite_r+0x66>
  40657c:	f013 0002 	ands.w	r0, r3, #2
  406580:	6835      	ldr	r5, [r6, #0]
  406582:	d02c      	beq.n	4065de <__sfvwrite_r+0x7e>
  406584:	f04f 0900 	mov.w	r9, #0
  406588:	4fb0      	ldr	r7, [pc, #704]	; (40684c <__sfvwrite_r+0x2ec>)
  40658a:	46c8      	mov	r8, r9
  40658c:	46b2      	mov	sl, r6
  40658e:	45b8      	cmp	r8, r7
  406590:	4643      	mov	r3, r8
  406592:	464a      	mov	r2, r9
  406594:	bf28      	it	cs
  406596:	463b      	movcs	r3, r7
  406598:	9800      	ldr	r0, [sp, #0]
  40659a:	f1b8 0f00 	cmp.w	r8, #0
  40659e:	d050      	beq.n	406642 <__sfvwrite_r+0xe2>
  4065a0:	69e1      	ldr	r1, [r4, #28]
  4065a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4065a4:	47b0      	blx	r6
  4065a6:	2800      	cmp	r0, #0
  4065a8:	dd58      	ble.n	40665c <__sfvwrite_r+0xfc>
  4065aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4065ae:	1a1b      	subs	r3, r3, r0
  4065b0:	4481      	add	r9, r0
  4065b2:	eba8 0800 	sub.w	r8, r8, r0
  4065b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4065ba:	2b00      	cmp	r3, #0
  4065bc:	d1e7      	bne.n	40658e <__sfvwrite_r+0x2e>
  4065be:	2000      	movs	r0, #0
  4065c0:	b003      	add	sp, #12
  4065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065c6:	4621      	mov	r1, r4
  4065c8:	9800      	ldr	r0, [sp, #0]
  4065ca:	f7ff fc51 	bl	405e70 <__swsetup_r>
  4065ce:	2800      	cmp	r0, #0
  4065d0:	f040 8133 	bne.w	40683a <__sfvwrite_r+0x2da>
  4065d4:	89a3      	ldrh	r3, [r4, #12]
  4065d6:	6835      	ldr	r5, [r6, #0]
  4065d8:	f013 0002 	ands.w	r0, r3, #2
  4065dc:	d1d2      	bne.n	406584 <__sfvwrite_r+0x24>
  4065de:	f013 0901 	ands.w	r9, r3, #1
  4065e2:	d145      	bne.n	406670 <__sfvwrite_r+0x110>
  4065e4:	464f      	mov	r7, r9
  4065e6:	9601      	str	r6, [sp, #4]
  4065e8:	b337      	cbz	r7, 406638 <__sfvwrite_r+0xd8>
  4065ea:	059a      	lsls	r2, r3, #22
  4065ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4065f0:	f140 8083 	bpl.w	4066fa <__sfvwrite_r+0x19a>
  4065f4:	4547      	cmp	r7, r8
  4065f6:	46c3      	mov	fp, r8
  4065f8:	f0c0 80ab 	bcc.w	406752 <__sfvwrite_r+0x1f2>
  4065fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406600:	f040 80ac 	bne.w	40675c <__sfvwrite_r+0x1fc>
  406604:	6820      	ldr	r0, [r4, #0]
  406606:	46ba      	mov	sl, r7
  406608:	465a      	mov	r2, fp
  40660a:	4649      	mov	r1, r9
  40660c:	f000 fa40 	bl	406a90 <memmove>
  406610:	68a2      	ldr	r2, [r4, #8]
  406612:	6823      	ldr	r3, [r4, #0]
  406614:	eba2 0208 	sub.w	r2, r2, r8
  406618:	445b      	add	r3, fp
  40661a:	60a2      	str	r2, [r4, #8]
  40661c:	6023      	str	r3, [r4, #0]
  40661e:	9a01      	ldr	r2, [sp, #4]
  406620:	6893      	ldr	r3, [r2, #8]
  406622:	eba3 030a 	sub.w	r3, r3, sl
  406626:	44d1      	add	r9, sl
  406628:	eba7 070a 	sub.w	r7, r7, sl
  40662c:	6093      	str	r3, [r2, #8]
  40662e:	2b00      	cmp	r3, #0
  406630:	d0c5      	beq.n	4065be <__sfvwrite_r+0x5e>
  406632:	89a3      	ldrh	r3, [r4, #12]
  406634:	2f00      	cmp	r7, #0
  406636:	d1d8      	bne.n	4065ea <__sfvwrite_r+0x8a>
  406638:	f8d5 9000 	ldr.w	r9, [r5]
  40663c:	686f      	ldr	r7, [r5, #4]
  40663e:	3508      	adds	r5, #8
  406640:	e7d2      	b.n	4065e8 <__sfvwrite_r+0x88>
  406642:	f8d5 9000 	ldr.w	r9, [r5]
  406646:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40664a:	3508      	adds	r5, #8
  40664c:	e79f      	b.n	40658e <__sfvwrite_r+0x2e>
  40664e:	2000      	movs	r0, #0
  406650:	4770      	bx	lr
  406652:	4621      	mov	r1, r4
  406654:	9800      	ldr	r0, [sp, #0]
  406656:	f7ff fd1f 	bl	406098 <_fflush_r>
  40665a:	b370      	cbz	r0, 4066ba <__sfvwrite_r+0x15a>
  40665c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406664:	f04f 30ff 	mov.w	r0, #4294967295
  406668:	81a3      	strh	r3, [r4, #12]
  40666a:	b003      	add	sp, #12
  40666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406670:	4681      	mov	r9, r0
  406672:	4633      	mov	r3, r6
  406674:	464e      	mov	r6, r9
  406676:	46a8      	mov	r8, r5
  406678:	469a      	mov	sl, r3
  40667a:	464d      	mov	r5, r9
  40667c:	b34e      	cbz	r6, 4066d2 <__sfvwrite_r+0x172>
  40667e:	b380      	cbz	r0, 4066e2 <__sfvwrite_r+0x182>
  406680:	6820      	ldr	r0, [r4, #0]
  406682:	6923      	ldr	r3, [r4, #16]
  406684:	6962      	ldr	r2, [r4, #20]
  406686:	45b1      	cmp	r9, r6
  406688:	46cb      	mov	fp, r9
  40668a:	bf28      	it	cs
  40668c:	46b3      	movcs	fp, r6
  40668e:	4298      	cmp	r0, r3
  406690:	465f      	mov	r7, fp
  406692:	d904      	bls.n	40669e <__sfvwrite_r+0x13e>
  406694:	68a3      	ldr	r3, [r4, #8]
  406696:	4413      	add	r3, r2
  406698:	459b      	cmp	fp, r3
  40669a:	f300 80a6 	bgt.w	4067ea <__sfvwrite_r+0x28a>
  40669e:	4593      	cmp	fp, r2
  4066a0:	db4b      	blt.n	40673a <__sfvwrite_r+0x1da>
  4066a2:	4613      	mov	r3, r2
  4066a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4066a6:	69e1      	ldr	r1, [r4, #28]
  4066a8:	9800      	ldr	r0, [sp, #0]
  4066aa:	462a      	mov	r2, r5
  4066ac:	47b8      	blx	r7
  4066ae:	1e07      	subs	r7, r0, #0
  4066b0:	ddd4      	ble.n	40665c <__sfvwrite_r+0xfc>
  4066b2:	ebb9 0907 	subs.w	r9, r9, r7
  4066b6:	d0cc      	beq.n	406652 <__sfvwrite_r+0xf2>
  4066b8:	2001      	movs	r0, #1
  4066ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4066be:	1bdb      	subs	r3, r3, r7
  4066c0:	443d      	add	r5, r7
  4066c2:	1bf6      	subs	r6, r6, r7
  4066c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4066c8:	2b00      	cmp	r3, #0
  4066ca:	f43f af78 	beq.w	4065be <__sfvwrite_r+0x5e>
  4066ce:	2e00      	cmp	r6, #0
  4066d0:	d1d5      	bne.n	40667e <__sfvwrite_r+0x11e>
  4066d2:	f108 0308 	add.w	r3, r8, #8
  4066d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4066da:	4698      	mov	r8, r3
  4066dc:	3308      	adds	r3, #8
  4066de:	2e00      	cmp	r6, #0
  4066e0:	d0f9      	beq.n	4066d6 <__sfvwrite_r+0x176>
  4066e2:	4632      	mov	r2, r6
  4066e4:	210a      	movs	r1, #10
  4066e6:	4628      	mov	r0, r5
  4066e8:	f000 f982 	bl	4069f0 <memchr>
  4066ec:	2800      	cmp	r0, #0
  4066ee:	f000 80a1 	beq.w	406834 <__sfvwrite_r+0x2d4>
  4066f2:	3001      	adds	r0, #1
  4066f4:	eba0 0905 	sub.w	r9, r0, r5
  4066f8:	e7c2      	b.n	406680 <__sfvwrite_r+0x120>
  4066fa:	6820      	ldr	r0, [r4, #0]
  4066fc:	6923      	ldr	r3, [r4, #16]
  4066fe:	4298      	cmp	r0, r3
  406700:	d802      	bhi.n	406708 <__sfvwrite_r+0x1a8>
  406702:	6963      	ldr	r3, [r4, #20]
  406704:	429f      	cmp	r7, r3
  406706:	d25d      	bcs.n	4067c4 <__sfvwrite_r+0x264>
  406708:	45b8      	cmp	r8, r7
  40670a:	bf28      	it	cs
  40670c:	46b8      	movcs	r8, r7
  40670e:	4642      	mov	r2, r8
  406710:	4649      	mov	r1, r9
  406712:	f000 f9bd 	bl	406a90 <memmove>
  406716:	68a3      	ldr	r3, [r4, #8]
  406718:	6822      	ldr	r2, [r4, #0]
  40671a:	eba3 0308 	sub.w	r3, r3, r8
  40671e:	4442      	add	r2, r8
  406720:	60a3      	str	r3, [r4, #8]
  406722:	6022      	str	r2, [r4, #0]
  406724:	b10b      	cbz	r3, 40672a <__sfvwrite_r+0x1ca>
  406726:	46c2      	mov	sl, r8
  406728:	e779      	b.n	40661e <__sfvwrite_r+0xbe>
  40672a:	4621      	mov	r1, r4
  40672c:	9800      	ldr	r0, [sp, #0]
  40672e:	f7ff fcb3 	bl	406098 <_fflush_r>
  406732:	2800      	cmp	r0, #0
  406734:	d192      	bne.n	40665c <__sfvwrite_r+0xfc>
  406736:	46c2      	mov	sl, r8
  406738:	e771      	b.n	40661e <__sfvwrite_r+0xbe>
  40673a:	465a      	mov	r2, fp
  40673c:	4629      	mov	r1, r5
  40673e:	f000 f9a7 	bl	406a90 <memmove>
  406742:	68a2      	ldr	r2, [r4, #8]
  406744:	6823      	ldr	r3, [r4, #0]
  406746:	eba2 020b 	sub.w	r2, r2, fp
  40674a:	445b      	add	r3, fp
  40674c:	60a2      	str	r2, [r4, #8]
  40674e:	6023      	str	r3, [r4, #0]
  406750:	e7af      	b.n	4066b2 <__sfvwrite_r+0x152>
  406752:	6820      	ldr	r0, [r4, #0]
  406754:	46b8      	mov	r8, r7
  406756:	46ba      	mov	sl, r7
  406758:	46bb      	mov	fp, r7
  40675a:	e755      	b.n	406608 <__sfvwrite_r+0xa8>
  40675c:	6962      	ldr	r2, [r4, #20]
  40675e:	6820      	ldr	r0, [r4, #0]
  406760:	6921      	ldr	r1, [r4, #16]
  406762:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406766:	eba0 0a01 	sub.w	sl, r0, r1
  40676a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40676e:	f10a 0001 	add.w	r0, sl, #1
  406772:	ea4f 0868 	mov.w	r8, r8, asr #1
  406776:	4438      	add	r0, r7
  406778:	4540      	cmp	r0, r8
  40677a:	4642      	mov	r2, r8
  40677c:	bf84      	itt	hi
  40677e:	4680      	movhi	r8, r0
  406780:	4642      	movhi	r2, r8
  406782:	055b      	lsls	r3, r3, #21
  406784:	d544      	bpl.n	406810 <__sfvwrite_r+0x2b0>
  406786:	4611      	mov	r1, r2
  406788:	9800      	ldr	r0, [sp, #0]
  40678a:	f7fd ffa5 	bl	4046d8 <_malloc_r>
  40678e:	4683      	mov	fp, r0
  406790:	2800      	cmp	r0, #0
  406792:	d055      	beq.n	406840 <__sfvwrite_r+0x2e0>
  406794:	4652      	mov	r2, sl
  406796:	6921      	ldr	r1, [r4, #16]
  406798:	f7fe fa4e 	bl	404c38 <memcpy>
  40679c:	89a3      	ldrh	r3, [r4, #12]
  40679e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4067a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4067a6:	81a3      	strh	r3, [r4, #12]
  4067a8:	eb0b 000a 	add.w	r0, fp, sl
  4067ac:	eba8 030a 	sub.w	r3, r8, sl
  4067b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4067b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4067b8:	6020      	str	r0, [r4, #0]
  4067ba:	60a3      	str	r3, [r4, #8]
  4067bc:	46b8      	mov	r8, r7
  4067be:	46ba      	mov	sl, r7
  4067c0:	46bb      	mov	fp, r7
  4067c2:	e721      	b.n	406608 <__sfvwrite_r+0xa8>
  4067c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4067c8:	42b9      	cmp	r1, r7
  4067ca:	bf28      	it	cs
  4067cc:	4639      	movcs	r1, r7
  4067ce:	464a      	mov	r2, r9
  4067d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4067d4:	9800      	ldr	r0, [sp, #0]
  4067d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4067d8:	fb03 f301 	mul.w	r3, r3, r1
  4067dc:	69e1      	ldr	r1, [r4, #28]
  4067de:	47b0      	blx	r6
  4067e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4067e4:	f73f af1b 	bgt.w	40661e <__sfvwrite_r+0xbe>
  4067e8:	e738      	b.n	40665c <__sfvwrite_r+0xfc>
  4067ea:	461a      	mov	r2, r3
  4067ec:	4629      	mov	r1, r5
  4067ee:	9301      	str	r3, [sp, #4]
  4067f0:	f000 f94e 	bl	406a90 <memmove>
  4067f4:	6822      	ldr	r2, [r4, #0]
  4067f6:	9b01      	ldr	r3, [sp, #4]
  4067f8:	9800      	ldr	r0, [sp, #0]
  4067fa:	441a      	add	r2, r3
  4067fc:	6022      	str	r2, [r4, #0]
  4067fe:	4621      	mov	r1, r4
  406800:	f7ff fc4a 	bl	406098 <_fflush_r>
  406804:	9b01      	ldr	r3, [sp, #4]
  406806:	2800      	cmp	r0, #0
  406808:	f47f af28 	bne.w	40665c <__sfvwrite_r+0xfc>
  40680c:	461f      	mov	r7, r3
  40680e:	e750      	b.n	4066b2 <__sfvwrite_r+0x152>
  406810:	9800      	ldr	r0, [sp, #0]
  406812:	f000 f9a1 	bl	406b58 <_realloc_r>
  406816:	4683      	mov	fp, r0
  406818:	2800      	cmp	r0, #0
  40681a:	d1c5      	bne.n	4067a8 <__sfvwrite_r+0x248>
  40681c:	9d00      	ldr	r5, [sp, #0]
  40681e:	6921      	ldr	r1, [r4, #16]
  406820:	4628      	mov	r0, r5
  406822:	f7ff fdb7 	bl	406394 <_free_r>
  406826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40682a:	220c      	movs	r2, #12
  40682c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406830:	602a      	str	r2, [r5, #0]
  406832:	e715      	b.n	406660 <__sfvwrite_r+0x100>
  406834:	f106 0901 	add.w	r9, r6, #1
  406838:	e722      	b.n	406680 <__sfvwrite_r+0x120>
  40683a:	f04f 30ff 	mov.w	r0, #4294967295
  40683e:	e6bf      	b.n	4065c0 <__sfvwrite_r+0x60>
  406840:	9a00      	ldr	r2, [sp, #0]
  406842:	230c      	movs	r3, #12
  406844:	6013      	str	r3, [r2, #0]
  406846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40684a:	e709      	b.n	406660 <__sfvwrite_r+0x100>
  40684c:	7ffffc00 	.word	0x7ffffc00

00406850 <_fwalk_reent>:
  406850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406854:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406858:	d01f      	beq.n	40689a <_fwalk_reent+0x4a>
  40685a:	4688      	mov	r8, r1
  40685c:	4606      	mov	r6, r0
  40685e:	f04f 0900 	mov.w	r9, #0
  406862:	687d      	ldr	r5, [r7, #4]
  406864:	68bc      	ldr	r4, [r7, #8]
  406866:	3d01      	subs	r5, #1
  406868:	d411      	bmi.n	40688e <_fwalk_reent+0x3e>
  40686a:	89a3      	ldrh	r3, [r4, #12]
  40686c:	2b01      	cmp	r3, #1
  40686e:	f105 35ff 	add.w	r5, r5, #4294967295
  406872:	d908      	bls.n	406886 <_fwalk_reent+0x36>
  406874:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406878:	3301      	adds	r3, #1
  40687a:	4621      	mov	r1, r4
  40687c:	4630      	mov	r0, r6
  40687e:	d002      	beq.n	406886 <_fwalk_reent+0x36>
  406880:	47c0      	blx	r8
  406882:	ea49 0900 	orr.w	r9, r9, r0
  406886:	1c6b      	adds	r3, r5, #1
  406888:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40688c:	d1ed      	bne.n	40686a <_fwalk_reent+0x1a>
  40688e:	683f      	ldr	r7, [r7, #0]
  406890:	2f00      	cmp	r7, #0
  406892:	d1e6      	bne.n	406862 <_fwalk_reent+0x12>
  406894:	4648      	mov	r0, r9
  406896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40689a:	46b9      	mov	r9, r7
  40689c:	4648      	mov	r0, r9
  40689e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068a2:	bf00      	nop

004068a4 <__locale_mb_cur_max>:
  4068a4:	4b04      	ldr	r3, [pc, #16]	; (4068b8 <__locale_mb_cur_max+0x14>)
  4068a6:	4a05      	ldr	r2, [pc, #20]	; (4068bc <__locale_mb_cur_max+0x18>)
  4068a8:	681b      	ldr	r3, [r3, #0]
  4068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4068ac:	2b00      	cmp	r3, #0
  4068ae:	bf08      	it	eq
  4068b0:	4613      	moveq	r3, r2
  4068b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4068b6:	4770      	bx	lr
  4068b8:	20400018 	.word	0x20400018
  4068bc:	2040085c 	.word	0x2040085c

004068c0 <__retarget_lock_init_recursive>:
  4068c0:	4770      	bx	lr
  4068c2:	bf00      	nop

004068c4 <__retarget_lock_close_recursive>:
  4068c4:	4770      	bx	lr
  4068c6:	bf00      	nop

004068c8 <__retarget_lock_acquire_recursive>:
  4068c8:	4770      	bx	lr
  4068ca:	bf00      	nop

004068cc <__retarget_lock_release_recursive>:
  4068cc:	4770      	bx	lr
  4068ce:	bf00      	nop

004068d0 <__swhatbuf_r>:
  4068d0:	b570      	push	{r4, r5, r6, lr}
  4068d2:	460c      	mov	r4, r1
  4068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4068d8:	2900      	cmp	r1, #0
  4068da:	b090      	sub	sp, #64	; 0x40
  4068dc:	4615      	mov	r5, r2
  4068de:	461e      	mov	r6, r3
  4068e0:	db14      	blt.n	40690c <__swhatbuf_r+0x3c>
  4068e2:	aa01      	add	r2, sp, #4
  4068e4:	f000 fc9e 	bl	407224 <_fstat_r>
  4068e8:	2800      	cmp	r0, #0
  4068ea:	db0f      	blt.n	40690c <__swhatbuf_r+0x3c>
  4068ec:	9a02      	ldr	r2, [sp, #8]
  4068ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4068f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4068f6:	fab2 f282 	clz	r2, r2
  4068fa:	0952      	lsrs	r2, r2, #5
  4068fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406900:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406904:	6032      	str	r2, [r6, #0]
  406906:	602b      	str	r3, [r5, #0]
  406908:	b010      	add	sp, #64	; 0x40
  40690a:	bd70      	pop	{r4, r5, r6, pc}
  40690c:	89a2      	ldrh	r2, [r4, #12]
  40690e:	2300      	movs	r3, #0
  406910:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406914:	6033      	str	r3, [r6, #0]
  406916:	d004      	beq.n	406922 <__swhatbuf_r+0x52>
  406918:	2240      	movs	r2, #64	; 0x40
  40691a:	4618      	mov	r0, r3
  40691c:	602a      	str	r2, [r5, #0]
  40691e:	b010      	add	sp, #64	; 0x40
  406920:	bd70      	pop	{r4, r5, r6, pc}
  406922:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406926:	602b      	str	r3, [r5, #0]
  406928:	b010      	add	sp, #64	; 0x40
  40692a:	bd70      	pop	{r4, r5, r6, pc}

0040692c <__smakebuf_r>:
  40692c:	898a      	ldrh	r2, [r1, #12]
  40692e:	0792      	lsls	r2, r2, #30
  406930:	460b      	mov	r3, r1
  406932:	d506      	bpl.n	406942 <__smakebuf_r+0x16>
  406934:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406938:	2101      	movs	r1, #1
  40693a:	601a      	str	r2, [r3, #0]
  40693c:	611a      	str	r2, [r3, #16]
  40693e:	6159      	str	r1, [r3, #20]
  406940:	4770      	bx	lr
  406942:	b5f0      	push	{r4, r5, r6, r7, lr}
  406944:	b083      	sub	sp, #12
  406946:	ab01      	add	r3, sp, #4
  406948:	466a      	mov	r2, sp
  40694a:	460c      	mov	r4, r1
  40694c:	4606      	mov	r6, r0
  40694e:	f7ff ffbf 	bl	4068d0 <__swhatbuf_r>
  406952:	9900      	ldr	r1, [sp, #0]
  406954:	4605      	mov	r5, r0
  406956:	4630      	mov	r0, r6
  406958:	f7fd febe 	bl	4046d8 <_malloc_r>
  40695c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406960:	b1d8      	cbz	r0, 40699a <__smakebuf_r+0x6e>
  406962:	9a01      	ldr	r2, [sp, #4]
  406964:	4f15      	ldr	r7, [pc, #84]	; (4069bc <__smakebuf_r+0x90>)
  406966:	9900      	ldr	r1, [sp, #0]
  406968:	63f7      	str	r7, [r6, #60]	; 0x3c
  40696a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40696e:	81a3      	strh	r3, [r4, #12]
  406970:	6020      	str	r0, [r4, #0]
  406972:	6120      	str	r0, [r4, #16]
  406974:	6161      	str	r1, [r4, #20]
  406976:	b91a      	cbnz	r2, 406980 <__smakebuf_r+0x54>
  406978:	432b      	orrs	r3, r5
  40697a:	81a3      	strh	r3, [r4, #12]
  40697c:	b003      	add	sp, #12
  40697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406980:	4630      	mov	r0, r6
  406982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406986:	f000 fc61 	bl	40724c <_isatty_r>
  40698a:	b1a0      	cbz	r0, 4069b6 <__smakebuf_r+0x8a>
  40698c:	89a3      	ldrh	r3, [r4, #12]
  40698e:	f023 0303 	bic.w	r3, r3, #3
  406992:	f043 0301 	orr.w	r3, r3, #1
  406996:	b21b      	sxth	r3, r3
  406998:	e7ee      	b.n	406978 <__smakebuf_r+0x4c>
  40699a:	059a      	lsls	r2, r3, #22
  40699c:	d4ee      	bmi.n	40697c <__smakebuf_r+0x50>
  40699e:	f023 0303 	bic.w	r3, r3, #3
  4069a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4069a6:	f043 0302 	orr.w	r3, r3, #2
  4069aa:	2101      	movs	r1, #1
  4069ac:	81a3      	strh	r3, [r4, #12]
  4069ae:	6022      	str	r2, [r4, #0]
  4069b0:	6122      	str	r2, [r4, #16]
  4069b2:	6161      	str	r1, [r4, #20]
  4069b4:	e7e2      	b.n	40697c <__smakebuf_r+0x50>
  4069b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4069ba:	e7dd      	b.n	406978 <__smakebuf_r+0x4c>
  4069bc:	004060ed 	.word	0x004060ed

004069c0 <__ascii_mbtowc>:
  4069c0:	b082      	sub	sp, #8
  4069c2:	b149      	cbz	r1, 4069d8 <__ascii_mbtowc+0x18>
  4069c4:	b15a      	cbz	r2, 4069de <__ascii_mbtowc+0x1e>
  4069c6:	b16b      	cbz	r3, 4069e4 <__ascii_mbtowc+0x24>
  4069c8:	7813      	ldrb	r3, [r2, #0]
  4069ca:	600b      	str	r3, [r1, #0]
  4069cc:	7812      	ldrb	r2, [r2, #0]
  4069ce:	1c10      	adds	r0, r2, #0
  4069d0:	bf18      	it	ne
  4069d2:	2001      	movne	r0, #1
  4069d4:	b002      	add	sp, #8
  4069d6:	4770      	bx	lr
  4069d8:	a901      	add	r1, sp, #4
  4069da:	2a00      	cmp	r2, #0
  4069dc:	d1f3      	bne.n	4069c6 <__ascii_mbtowc+0x6>
  4069de:	4610      	mov	r0, r2
  4069e0:	b002      	add	sp, #8
  4069e2:	4770      	bx	lr
  4069e4:	f06f 0001 	mvn.w	r0, #1
  4069e8:	e7f4      	b.n	4069d4 <__ascii_mbtowc+0x14>
  4069ea:	bf00      	nop
  4069ec:	0000      	movs	r0, r0
	...

004069f0 <memchr>:
  4069f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4069f4:	2a10      	cmp	r2, #16
  4069f6:	db2b      	blt.n	406a50 <memchr+0x60>
  4069f8:	f010 0f07 	tst.w	r0, #7
  4069fc:	d008      	beq.n	406a10 <memchr+0x20>
  4069fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a02:	3a01      	subs	r2, #1
  406a04:	428b      	cmp	r3, r1
  406a06:	d02d      	beq.n	406a64 <memchr+0x74>
  406a08:	f010 0f07 	tst.w	r0, #7
  406a0c:	b342      	cbz	r2, 406a60 <memchr+0x70>
  406a0e:	d1f6      	bne.n	4069fe <memchr+0xe>
  406a10:	b4f0      	push	{r4, r5, r6, r7}
  406a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a1a:	f022 0407 	bic.w	r4, r2, #7
  406a1e:	f07f 0700 	mvns.w	r7, #0
  406a22:	2300      	movs	r3, #0
  406a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a28:	3c08      	subs	r4, #8
  406a2a:	ea85 0501 	eor.w	r5, r5, r1
  406a2e:	ea86 0601 	eor.w	r6, r6, r1
  406a32:	fa85 f547 	uadd8	r5, r5, r7
  406a36:	faa3 f587 	sel	r5, r3, r7
  406a3a:	fa86 f647 	uadd8	r6, r6, r7
  406a3e:	faa5 f687 	sel	r6, r5, r7
  406a42:	b98e      	cbnz	r6, 406a68 <memchr+0x78>
  406a44:	d1ee      	bne.n	406a24 <memchr+0x34>
  406a46:	bcf0      	pop	{r4, r5, r6, r7}
  406a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a4c:	f002 0207 	and.w	r2, r2, #7
  406a50:	b132      	cbz	r2, 406a60 <memchr+0x70>
  406a52:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a56:	3a01      	subs	r2, #1
  406a58:	ea83 0301 	eor.w	r3, r3, r1
  406a5c:	b113      	cbz	r3, 406a64 <memchr+0x74>
  406a5e:	d1f8      	bne.n	406a52 <memchr+0x62>
  406a60:	2000      	movs	r0, #0
  406a62:	4770      	bx	lr
  406a64:	3801      	subs	r0, #1
  406a66:	4770      	bx	lr
  406a68:	2d00      	cmp	r5, #0
  406a6a:	bf06      	itte	eq
  406a6c:	4635      	moveq	r5, r6
  406a6e:	3803      	subeq	r0, #3
  406a70:	3807      	subne	r0, #7
  406a72:	f015 0f01 	tst.w	r5, #1
  406a76:	d107      	bne.n	406a88 <memchr+0x98>
  406a78:	3001      	adds	r0, #1
  406a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406a7e:	bf02      	ittt	eq
  406a80:	3001      	addeq	r0, #1
  406a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406a86:	3001      	addeq	r0, #1
  406a88:	bcf0      	pop	{r4, r5, r6, r7}
  406a8a:	3801      	subs	r0, #1
  406a8c:	4770      	bx	lr
  406a8e:	bf00      	nop

00406a90 <memmove>:
  406a90:	4288      	cmp	r0, r1
  406a92:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a94:	d90d      	bls.n	406ab2 <memmove+0x22>
  406a96:	188b      	adds	r3, r1, r2
  406a98:	4298      	cmp	r0, r3
  406a9a:	d20a      	bcs.n	406ab2 <memmove+0x22>
  406a9c:	1884      	adds	r4, r0, r2
  406a9e:	2a00      	cmp	r2, #0
  406aa0:	d051      	beq.n	406b46 <memmove+0xb6>
  406aa2:	4622      	mov	r2, r4
  406aa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406aa8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406aac:	4299      	cmp	r1, r3
  406aae:	d1f9      	bne.n	406aa4 <memmove+0x14>
  406ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ab2:	2a0f      	cmp	r2, #15
  406ab4:	d948      	bls.n	406b48 <memmove+0xb8>
  406ab6:	ea41 0300 	orr.w	r3, r1, r0
  406aba:	079b      	lsls	r3, r3, #30
  406abc:	d146      	bne.n	406b4c <memmove+0xbc>
  406abe:	f100 0410 	add.w	r4, r0, #16
  406ac2:	f101 0310 	add.w	r3, r1, #16
  406ac6:	4615      	mov	r5, r2
  406ac8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406acc:	f844 6c10 	str.w	r6, [r4, #-16]
  406ad0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406ad4:	f844 6c0c 	str.w	r6, [r4, #-12]
  406ad8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406adc:	f844 6c08 	str.w	r6, [r4, #-8]
  406ae0:	3d10      	subs	r5, #16
  406ae2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406ae6:	f844 6c04 	str.w	r6, [r4, #-4]
  406aea:	2d0f      	cmp	r5, #15
  406aec:	f103 0310 	add.w	r3, r3, #16
  406af0:	f104 0410 	add.w	r4, r4, #16
  406af4:	d8e8      	bhi.n	406ac8 <memmove+0x38>
  406af6:	f1a2 0310 	sub.w	r3, r2, #16
  406afa:	f023 030f 	bic.w	r3, r3, #15
  406afe:	f002 0e0f 	and.w	lr, r2, #15
  406b02:	3310      	adds	r3, #16
  406b04:	f1be 0f03 	cmp.w	lr, #3
  406b08:	4419      	add	r1, r3
  406b0a:	4403      	add	r3, r0
  406b0c:	d921      	bls.n	406b52 <memmove+0xc2>
  406b0e:	1f1e      	subs	r6, r3, #4
  406b10:	460d      	mov	r5, r1
  406b12:	4674      	mov	r4, lr
  406b14:	3c04      	subs	r4, #4
  406b16:	f855 7b04 	ldr.w	r7, [r5], #4
  406b1a:	f846 7f04 	str.w	r7, [r6, #4]!
  406b1e:	2c03      	cmp	r4, #3
  406b20:	d8f8      	bhi.n	406b14 <memmove+0x84>
  406b22:	f1ae 0404 	sub.w	r4, lr, #4
  406b26:	f024 0403 	bic.w	r4, r4, #3
  406b2a:	3404      	adds	r4, #4
  406b2c:	4421      	add	r1, r4
  406b2e:	4423      	add	r3, r4
  406b30:	f002 0203 	and.w	r2, r2, #3
  406b34:	b162      	cbz	r2, 406b50 <memmove+0xc0>
  406b36:	3b01      	subs	r3, #1
  406b38:	440a      	add	r2, r1
  406b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406b42:	428a      	cmp	r2, r1
  406b44:	d1f9      	bne.n	406b3a <memmove+0xaa>
  406b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b48:	4603      	mov	r3, r0
  406b4a:	e7f3      	b.n	406b34 <memmove+0xa4>
  406b4c:	4603      	mov	r3, r0
  406b4e:	e7f2      	b.n	406b36 <memmove+0xa6>
  406b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b52:	4672      	mov	r2, lr
  406b54:	e7ee      	b.n	406b34 <memmove+0xa4>
  406b56:	bf00      	nop

00406b58 <_realloc_r>:
  406b58:	2900      	cmp	r1, #0
  406b5a:	f000 8095 	beq.w	406c88 <_realloc_r+0x130>
  406b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b62:	460d      	mov	r5, r1
  406b64:	4616      	mov	r6, r2
  406b66:	b083      	sub	sp, #12
  406b68:	4680      	mov	r8, r0
  406b6a:	f106 070b 	add.w	r7, r6, #11
  406b6e:	f7fe f94b 	bl	404e08 <__malloc_lock>
  406b72:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406b76:	2f16      	cmp	r7, #22
  406b78:	f02e 0403 	bic.w	r4, lr, #3
  406b7c:	f1a5 0908 	sub.w	r9, r5, #8
  406b80:	d83c      	bhi.n	406bfc <_realloc_r+0xa4>
  406b82:	2210      	movs	r2, #16
  406b84:	4617      	mov	r7, r2
  406b86:	42be      	cmp	r6, r7
  406b88:	d83d      	bhi.n	406c06 <_realloc_r+0xae>
  406b8a:	4294      	cmp	r4, r2
  406b8c:	da43      	bge.n	406c16 <_realloc_r+0xbe>
  406b8e:	4bc4      	ldr	r3, [pc, #784]	; (406ea0 <_realloc_r+0x348>)
  406b90:	6899      	ldr	r1, [r3, #8]
  406b92:	eb09 0004 	add.w	r0, r9, r4
  406b96:	4288      	cmp	r0, r1
  406b98:	f000 80b4 	beq.w	406d04 <_realloc_r+0x1ac>
  406b9c:	6843      	ldr	r3, [r0, #4]
  406b9e:	f023 0101 	bic.w	r1, r3, #1
  406ba2:	4401      	add	r1, r0
  406ba4:	6849      	ldr	r1, [r1, #4]
  406ba6:	07c9      	lsls	r1, r1, #31
  406ba8:	d54c      	bpl.n	406c44 <_realloc_r+0xec>
  406baa:	f01e 0f01 	tst.w	lr, #1
  406bae:	f000 809b 	beq.w	406ce8 <_realloc_r+0x190>
  406bb2:	4631      	mov	r1, r6
  406bb4:	4640      	mov	r0, r8
  406bb6:	f7fd fd8f 	bl	4046d8 <_malloc_r>
  406bba:	4606      	mov	r6, r0
  406bbc:	2800      	cmp	r0, #0
  406bbe:	d03a      	beq.n	406c36 <_realloc_r+0xde>
  406bc0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406bc4:	f023 0301 	bic.w	r3, r3, #1
  406bc8:	444b      	add	r3, r9
  406bca:	f1a0 0208 	sub.w	r2, r0, #8
  406bce:	429a      	cmp	r2, r3
  406bd0:	f000 8121 	beq.w	406e16 <_realloc_r+0x2be>
  406bd4:	1f22      	subs	r2, r4, #4
  406bd6:	2a24      	cmp	r2, #36	; 0x24
  406bd8:	f200 8107 	bhi.w	406dea <_realloc_r+0x292>
  406bdc:	2a13      	cmp	r2, #19
  406bde:	f200 80db 	bhi.w	406d98 <_realloc_r+0x240>
  406be2:	4603      	mov	r3, r0
  406be4:	462a      	mov	r2, r5
  406be6:	6811      	ldr	r1, [r2, #0]
  406be8:	6019      	str	r1, [r3, #0]
  406bea:	6851      	ldr	r1, [r2, #4]
  406bec:	6059      	str	r1, [r3, #4]
  406bee:	6892      	ldr	r2, [r2, #8]
  406bf0:	609a      	str	r2, [r3, #8]
  406bf2:	4629      	mov	r1, r5
  406bf4:	4640      	mov	r0, r8
  406bf6:	f7ff fbcd 	bl	406394 <_free_r>
  406bfa:	e01c      	b.n	406c36 <_realloc_r+0xde>
  406bfc:	f027 0707 	bic.w	r7, r7, #7
  406c00:	2f00      	cmp	r7, #0
  406c02:	463a      	mov	r2, r7
  406c04:	dabf      	bge.n	406b86 <_realloc_r+0x2e>
  406c06:	2600      	movs	r6, #0
  406c08:	230c      	movs	r3, #12
  406c0a:	4630      	mov	r0, r6
  406c0c:	f8c8 3000 	str.w	r3, [r8]
  406c10:	b003      	add	sp, #12
  406c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c16:	462e      	mov	r6, r5
  406c18:	1be3      	subs	r3, r4, r7
  406c1a:	2b0f      	cmp	r3, #15
  406c1c:	d81e      	bhi.n	406c5c <_realloc_r+0x104>
  406c1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406c22:	f003 0301 	and.w	r3, r3, #1
  406c26:	4323      	orrs	r3, r4
  406c28:	444c      	add	r4, r9
  406c2a:	f8c9 3004 	str.w	r3, [r9, #4]
  406c2e:	6863      	ldr	r3, [r4, #4]
  406c30:	f043 0301 	orr.w	r3, r3, #1
  406c34:	6063      	str	r3, [r4, #4]
  406c36:	4640      	mov	r0, r8
  406c38:	f7fe f8ec 	bl	404e14 <__malloc_unlock>
  406c3c:	4630      	mov	r0, r6
  406c3e:	b003      	add	sp, #12
  406c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c44:	f023 0303 	bic.w	r3, r3, #3
  406c48:	18e1      	adds	r1, r4, r3
  406c4a:	4291      	cmp	r1, r2
  406c4c:	db1f      	blt.n	406c8e <_realloc_r+0x136>
  406c4e:	68c3      	ldr	r3, [r0, #12]
  406c50:	6882      	ldr	r2, [r0, #8]
  406c52:	462e      	mov	r6, r5
  406c54:	60d3      	str	r3, [r2, #12]
  406c56:	460c      	mov	r4, r1
  406c58:	609a      	str	r2, [r3, #8]
  406c5a:	e7dd      	b.n	406c18 <_realloc_r+0xc0>
  406c5c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406c60:	eb09 0107 	add.w	r1, r9, r7
  406c64:	f002 0201 	and.w	r2, r2, #1
  406c68:	444c      	add	r4, r9
  406c6a:	f043 0301 	orr.w	r3, r3, #1
  406c6e:	4317      	orrs	r7, r2
  406c70:	f8c9 7004 	str.w	r7, [r9, #4]
  406c74:	604b      	str	r3, [r1, #4]
  406c76:	6863      	ldr	r3, [r4, #4]
  406c78:	f043 0301 	orr.w	r3, r3, #1
  406c7c:	3108      	adds	r1, #8
  406c7e:	6063      	str	r3, [r4, #4]
  406c80:	4640      	mov	r0, r8
  406c82:	f7ff fb87 	bl	406394 <_free_r>
  406c86:	e7d6      	b.n	406c36 <_realloc_r+0xde>
  406c88:	4611      	mov	r1, r2
  406c8a:	f7fd bd25 	b.w	4046d8 <_malloc_r>
  406c8e:	f01e 0f01 	tst.w	lr, #1
  406c92:	d18e      	bne.n	406bb2 <_realloc_r+0x5a>
  406c94:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406c98:	eba9 0a01 	sub.w	sl, r9, r1
  406c9c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ca0:	f021 0103 	bic.w	r1, r1, #3
  406ca4:	440b      	add	r3, r1
  406ca6:	4423      	add	r3, r4
  406ca8:	4293      	cmp	r3, r2
  406caa:	db25      	blt.n	406cf8 <_realloc_r+0x1a0>
  406cac:	68c2      	ldr	r2, [r0, #12]
  406cae:	6881      	ldr	r1, [r0, #8]
  406cb0:	4656      	mov	r6, sl
  406cb2:	60ca      	str	r2, [r1, #12]
  406cb4:	6091      	str	r1, [r2, #8]
  406cb6:	f8da 100c 	ldr.w	r1, [sl, #12]
  406cba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406cbe:	1f22      	subs	r2, r4, #4
  406cc0:	2a24      	cmp	r2, #36	; 0x24
  406cc2:	60c1      	str	r1, [r0, #12]
  406cc4:	6088      	str	r0, [r1, #8]
  406cc6:	f200 8094 	bhi.w	406df2 <_realloc_r+0x29a>
  406cca:	2a13      	cmp	r2, #19
  406ccc:	d96f      	bls.n	406dae <_realloc_r+0x256>
  406cce:	6829      	ldr	r1, [r5, #0]
  406cd0:	f8ca 1008 	str.w	r1, [sl, #8]
  406cd4:	6869      	ldr	r1, [r5, #4]
  406cd6:	f8ca 100c 	str.w	r1, [sl, #12]
  406cda:	2a1b      	cmp	r2, #27
  406cdc:	f200 80a2 	bhi.w	406e24 <_realloc_r+0x2cc>
  406ce0:	3508      	adds	r5, #8
  406ce2:	f10a 0210 	add.w	r2, sl, #16
  406ce6:	e063      	b.n	406db0 <_realloc_r+0x258>
  406ce8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406cec:	eba9 0a03 	sub.w	sl, r9, r3
  406cf0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406cf4:	f021 0103 	bic.w	r1, r1, #3
  406cf8:	1863      	adds	r3, r4, r1
  406cfa:	4293      	cmp	r3, r2
  406cfc:	f6ff af59 	blt.w	406bb2 <_realloc_r+0x5a>
  406d00:	4656      	mov	r6, sl
  406d02:	e7d8      	b.n	406cb6 <_realloc_r+0x15e>
  406d04:	6841      	ldr	r1, [r0, #4]
  406d06:	f021 0b03 	bic.w	fp, r1, #3
  406d0a:	44a3      	add	fp, r4
  406d0c:	f107 0010 	add.w	r0, r7, #16
  406d10:	4583      	cmp	fp, r0
  406d12:	da56      	bge.n	406dc2 <_realloc_r+0x26a>
  406d14:	f01e 0f01 	tst.w	lr, #1
  406d18:	f47f af4b 	bne.w	406bb2 <_realloc_r+0x5a>
  406d1c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406d20:	eba9 0a01 	sub.w	sl, r9, r1
  406d24:	f8da 1004 	ldr.w	r1, [sl, #4]
  406d28:	f021 0103 	bic.w	r1, r1, #3
  406d2c:	448b      	add	fp, r1
  406d2e:	4558      	cmp	r0, fp
  406d30:	dce2      	bgt.n	406cf8 <_realloc_r+0x1a0>
  406d32:	4656      	mov	r6, sl
  406d34:	f8da 100c 	ldr.w	r1, [sl, #12]
  406d38:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406d3c:	1f22      	subs	r2, r4, #4
  406d3e:	2a24      	cmp	r2, #36	; 0x24
  406d40:	60c1      	str	r1, [r0, #12]
  406d42:	6088      	str	r0, [r1, #8]
  406d44:	f200 808f 	bhi.w	406e66 <_realloc_r+0x30e>
  406d48:	2a13      	cmp	r2, #19
  406d4a:	f240 808a 	bls.w	406e62 <_realloc_r+0x30a>
  406d4e:	6829      	ldr	r1, [r5, #0]
  406d50:	f8ca 1008 	str.w	r1, [sl, #8]
  406d54:	6869      	ldr	r1, [r5, #4]
  406d56:	f8ca 100c 	str.w	r1, [sl, #12]
  406d5a:	2a1b      	cmp	r2, #27
  406d5c:	f200 808a 	bhi.w	406e74 <_realloc_r+0x31c>
  406d60:	3508      	adds	r5, #8
  406d62:	f10a 0210 	add.w	r2, sl, #16
  406d66:	6829      	ldr	r1, [r5, #0]
  406d68:	6011      	str	r1, [r2, #0]
  406d6a:	6869      	ldr	r1, [r5, #4]
  406d6c:	6051      	str	r1, [r2, #4]
  406d6e:	68a9      	ldr	r1, [r5, #8]
  406d70:	6091      	str	r1, [r2, #8]
  406d72:	eb0a 0107 	add.w	r1, sl, r7
  406d76:	ebab 0207 	sub.w	r2, fp, r7
  406d7a:	f042 0201 	orr.w	r2, r2, #1
  406d7e:	6099      	str	r1, [r3, #8]
  406d80:	604a      	str	r2, [r1, #4]
  406d82:	f8da 3004 	ldr.w	r3, [sl, #4]
  406d86:	f003 0301 	and.w	r3, r3, #1
  406d8a:	431f      	orrs	r7, r3
  406d8c:	4640      	mov	r0, r8
  406d8e:	f8ca 7004 	str.w	r7, [sl, #4]
  406d92:	f7fe f83f 	bl	404e14 <__malloc_unlock>
  406d96:	e751      	b.n	406c3c <_realloc_r+0xe4>
  406d98:	682b      	ldr	r3, [r5, #0]
  406d9a:	6003      	str	r3, [r0, #0]
  406d9c:	686b      	ldr	r3, [r5, #4]
  406d9e:	6043      	str	r3, [r0, #4]
  406da0:	2a1b      	cmp	r2, #27
  406da2:	d82d      	bhi.n	406e00 <_realloc_r+0x2a8>
  406da4:	f100 0308 	add.w	r3, r0, #8
  406da8:	f105 0208 	add.w	r2, r5, #8
  406dac:	e71b      	b.n	406be6 <_realloc_r+0x8e>
  406dae:	4632      	mov	r2, r6
  406db0:	6829      	ldr	r1, [r5, #0]
  406db2:	6011      	str	r1, [r2, #0]
  406db4:	6869      	ldr	r1, [r5, #4]
  406db6:	6051      	str	r1, [r2, #4]
  406db8:	68a9      	ldr	r1, [r5, #8]
  406dba:	6091      	str	r1, [r2, #8]
  406dbc:	461c      	mov	r4, r3
  406dbe:	46d1      	mov	r9, sl
  406dc0:	e72a      	b.n	406c18 <_realloc_r+0xc0>
  406dc2:	eb09 0107 	add.w	r1, r9, r7
  406dc6:	ebab 0b07 	sub.w	fp, fp, r7
  406dca:	f04b 0201 	orr.w	r2, fp, #1
  406dce:	6099      	str	r1, [r3, #8]
  406dd0:	604a      	str	r2, [r1, #4]
  406dd2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406dd6:	f003 0301 	and.w	r3, r3, #1
  406dda:	431f      	orrs	r7, r3
  406ddc:	4640      	mov	r0, r8
  406dde:	f845 7c04 	str.w	r7, [r5, #-4]
  406de2:	f7fe f817 	bl	404e14 <__malloc_unlock>
  406de6:	462e      	mov	r6, r5
  406de8:	e728      	b.n	406c3c <_realloc_r+0xe4>
  406dea:	4629      	mov	r1, r5
  406dec:	f7ff fe50 	bl	406a90 <memmove>
  406df0:	e6ff      	b.n	406bf2 <_realloc_r+0x9a>
  406df2:	4629      	mov	r1, r5
  406df4:	4630      	mov	r0, r6
  406df6:	461c      	mov	r4, r3
  406df8:	46d1      	mov	r9, sl
  406dfa:	f7ff fe49 	bl	406a90 <memmove>
  406dfe:	e70b      	b.n	406c18 <_realloc_r+0xc0>
  406e00:	68ab      	ldr	r3, [r5, #8]
  406e02:	6083      	str	r3, [r0, #8]
  406e04:	68eb      	ldr	r3, [r5, #12]
  406e06:	60c3      	str	r3, [r0, #12]
  406e08:	2a24      	cmp	r2, #36	; 0x24
  406e0a:	d017      	beq.n	406e3c <_realloc_r+0x2e4>
  406e0c:	f100 0310 	add.w	r3, r0, #16
  406e10:	f105 0210 	add.w	r2, r5, #16
  406e14:	e6e7      	b.n	406be6 <_realloc_r+0x8e>
  406e16:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406e1a:	f023 0303 	bic.w	r3, r3, #3
  406e1e:	441c      	add	r4, r3
  406e20:	462e      	mov	r6, r5
  406e22:	e6f9      	b.n	406c18 <_realloc_r+0xc0>
  406e24:	68a9      	ldr	r1, [r5, #8]
  406e26:	f8ca 1010 	str.w	r1, [sl, #16]
  406e2a:	68e9      	ldr	r1, [r5, #12]
  406e2c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e30:	2a24      	cmp	r2, #36	; 0x24
  406e32:	d00c      	beq.n	406e4e <_realloc_r+0x2f6>
  406e34:	3510      	adds	r5, #16
  406e36:	f10a 0218 	add.w	r2, sl, #24
  406e3a:	e7b9      	b.n	406db0 <_realloc_r+0x258>
  406e3c:	692b      	ldr	r3, [r5, #16]
  406e3e:	6103      	str	r3, [r0, #16]
  406e40:	696b      	ldr	r3, [r5, #20]
  406e42:	6143      	str	r3, [r0, #20]
  406e44:	f105 0218 	add.w	r2, r5, #24
  406e48:	f100 0318 	add.w	r3, r0, #24
  406e4c:	e6cb      	b.n	406be6 <_realloc_r+0x8e>
  406e4e:	692a      	ldr	r2, [r5, #16]
  406e50:	f8ca 2018 	str.w	r2, [sl, #24]
  406e54:	696a      	ldr	r2, [r5, #20]
  406e56:	f8ca 201c 	str.w	r2, [sl, #28]
  406e5a:	3518      	adds	r5, #24
  406e5c:	f10a 0220 	add.w	r2, sl, #32
  406e60:	e7a6      	b.n	406db0 <_realloc_r+0x258>
  406e62:	4632      	mov	r2, r6
  406e64:	e77f      	b.n	406d66 <_realloc_r+0x20e>
  406e66:	4629      	mov	r1, r5
  406e68:	4630      	mov	r0, r6
  406e6a:	9301      	str	r3, [sp, #4]
  406e6c:	f7ff fe10 	bl	406a90 <memmove>
  406e70:	9b01      	ldr	r3, [sp, #4]
  406e72:	e77e      	b.n	406d72 <_realloc_r+0x21a>
  406e74:	68a9      	ldr	r1, [r5, #8]
  406e76:	f8ca 1010 	str.w	r1, [sl, #16]
  406e7a:	68e9      	ldr	r1, [r5, #12]
  406e7c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e80:	2a24      	cmp	r2, #36	; 0x24
  406e82:	d003      	beq.n	406e8c <_realloc_r+0x334>
  406e84:	3510      	adds	r5, #16
  406e86:	f10a 0218 	add.w	r2, sl, #24
  406e8a:	e76c      	b.n	406d66 <_realloc_r+0x20e>
  406e8c:	692a      	ldr	r2, [r5, #16]
  406e8e:	f8ca 2018 	str.w	r2, [sl, #24]
  406e92:	696a      	ldr	r2, [r5, #20]
  406e94:	f8ca 201c 	str.w	r2, [sl, #28]
  406e98:	3518      	adds	r5, #24
  406e9a:	f10a 0220 	add.w	r2, sl, #32
  406e9e:	e762      	b.n	406d66 <_realloc_r+0x20e>
  406ea0:	20400448 	.word	0x20400448

00406ea4 <__sread>:
  406ea4:	b510      	push	{r4, lr}
  406ea6:	460c      	mov	r4, r1
  406ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406eac:	f000 f9f6 	bl	40729c <_read_r>
  406eb0:	2800      	cmp	r0, #0
  406eb2:	db03      	blt.n	406ebc <__sread+0x18>
  406eb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406eb6:	4403      	add	r3, r0
  406eb8:	6523      	str	r3, [r4, #80]	; 0x50
  406eba:	bd10      	pop	{r4, pc}
  406ebc:	89a3      	ldrh	r3, [r4, #12]
  406ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406ec2:	81a3      	strh	r3, [r4, #12]
  406ec4:	bd10      	pop	{r4, pc}
  406ec6:	bf00      	nop

00406ec8 <__swrite>:
  406ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ecc:	4616      	mov	r6, r2
  406ece:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406ed2:	461f      	mov	r7, r3
  406ed4:	05d3      	lsls	r3, r2, #23
  406ed6:	460c      	mov	r4, r1
  406ed8:	4605      	mov	r5, r0
  406eda:	d507      	bpl.n	406eec <__swrite+0x24>
  406edc:	2200      	movs	r2, #0
  406ede:	2302      	movs	r3, #2
  406ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ee4:	f000 f9c4 	bl	407270 <_lseek_r>
  406ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406ef0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406ef4:	81a2      	strh	r2, [r4, #12]
  406ef6:	463b      	mov	r3, r7
  406ef8:	4632      	mov	r2, r6
  406efa:	4628      	mov	r0, r5
  406efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406f00:	f000 b8a4 	b.w	40704c <_write_r>

00406f04 <__sseek>:
  406f04:	b510      	push	{r4, lr}
  406f06:	460c      	mov	r4, r1
  406f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f0c:	f000 f9b0 	bl	407270 <_lseek_r>
  406f10:	89a3      	ldrh	r3, [r4, #12]
  406f12:	1c42      	adds	r2, r0, #1
  406f14:	bf0e      	itee	eq
  406f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406f1e:	6520      	strne	r0, [r4, #80]	; 0x50
  406f20:	81a3      	strh	r3, [r4, #12]
  406f22:	bd10      	pop	{r4, pc}

00406f24 <__sclose>:
  406f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f28:	f000 b908 	b.w	40713c <_close_r>

00406f2c <__swbuf_r>:
  406f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f2e:	460d      	mov	r5, r1
  406f30:	4614      	mov	r4, r2
  406f32:	4606      	mov	r6, r0
  406f34:	b110      	cbz	r0, 406f3c <__swbuf_r+0x10>
  406f36:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406f38:	2b00      	cmp	r3, #0
  406f3a:	d04b      	beq.n	406fd4 <__swbuf_r+0xa8>
  406f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f40:	69a3      	ldr	r3, [r4, #24]
  406f42:	60a3      	str	r3, [r4, #8]
  406f44:	b291      	uxth	r1, r2
  406f46:	0708      	lsls	r0, r1, #28
  406f48:	d539      	bpl.n	406fbe <__swbuf_r+0x92>
  406f4a:	6923      	ldr	r3, [r4, #16]
  406f4c:	2b00      	cmp	r3, #0
  406f4e:	d036      	beq.n	406fbe <__swbuf_r+0x92>
  406f50:	b2ed      	uxtb	r5, r5
  406f52:	0489      	lsls	r1, r1, #18
  406f54:	462f      	mov	r7, r5
  406f56:	d515      	bpl.n	406f84 <__swbuf_r+0x58>
  406f58:	6822      	ldr	r2, [r4, #0]
  406f5a:	6961      	ldr	r1, [r4, #20]
  406f5c:	1ad3      	subs	r3, r2, r3
  406f5e:	428b      	cmp	r3, r1
  406f60:	da1c      	bge.n	406f9c <__swbuf_r+0x70>
  406f62:	3301      	adds	r3, #1
  406f64:	68a1      	ldr	r1, [r4, #8]
  406f66:	1c50      	adds	r0, r2, #1
  406f68:	3901      	subs	r1, #1
  406f6a:	60a1      	str	r1, [r4, #8]
  406f6c:	6020      	str	r0, [r4, #0]
  406f6e:	7015      	strb	r5, [r2, #0]
  406f70:	6962      	ldr	r2, [r4, #20]
  406f72:	429a      	cmp	r2, r3
  406f74:	d01a      	beq.n	406fac <__swbuf_r+0x80>
  406f76:	89a3      	ldrh	r3, [r4, #12]
  406f78:	07db      	lsls	r3, r3, #31
  406f7a:	d501      	bpl.n	406f80 <__swbuf_r+0x54>
  406f7c:	2d0a      	cmp	r5, #10
  406f7e:	d015      	beq.n	406fac <__swbuf_r+0x80>
  406f80:	4638      	mov	r0, r7
  406f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f84:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406f86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406f8a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406f8e:	81a2      	strh	r2, [r4, #12]
  406f90:	6822      	ldr	r2, [r4, #0]
  406f92:	6661      	str	r1, [r4, #100]	; 0x64
  406f94:	6961      	ldr	r1, [r4, #20]
  406f96:	1ad3      	subs	r3, r2, r3
  406f98:	428b      	cmp	r3, r1
  406f9a:	dbe2      	blt.n	406f62 <__swbuf_r+0x36>
  406f9c:	4621      	mov	r1, r4
  406f9e:	4630      	mov	r0, r6
  406fa0:	f7ff f87a 	bl	406098 <_fflush_r>
  406fa4:	b940      	cbnz	r0, 406fb8 <__swbuf_r+0x8c>
  406fa6:	6822      	ldr	r2, [r4, #0]
  406fa8:	2301      	movs	r3, #1
  406faa:	e7db      	b.n	406f64 <__swbuf_r+0x38>
  406fac:	4621      	mov	r1, r4
  406fae:	4630      	mov	r0, r6
  406fb0:	f7ff f872 	bl	406098 <_fflush_r>
  406fb4:	2800      	cmp	r0, #0
  406fb6:	d0e3      	beq.n	406f80 <__swbuf_r+0x54>
  406fb8:	f04f 37ff 	mov.w	r7, #4294967295
  406fbc:	e7e0      	b.n	406f80 <__swbuf_r+0x54>
  406fbe:	4621      	mov	r1, r4
  406fc0:	4630      	mov	r0, r6
  406fc2:	f7fe ff55 	bl	405e70 <__swsetup_r>
  406fc6:	2800      	cmp	r0, #0
  406fc8:	d1f6      	bne.n	406fb8 <__swbuf_r+0x8c>
  406fca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406fce:	6923      	ldr	r3, [r4, #16]
  406fd0:	b291      	uxth	r1, r2
  406fd2:	e7bd      	b.n	406f50 <__swbuf_r+0x24>
  406fd4:	f7ff f8b8 	bl	406148 <__sinit>
  406fd8:	e7b0      	b.n	406f3c <__swbuf_r+0x10>
  406fda:	bf00      	nop

00406fdc <_wcrtomb_r>:
  406fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  406fde:	4606      	mov	r6, r0
  406fe0:	b085      	sub	sp, #20
  406fe2:	461f      	mov	r7, r3
  406fe4:	b189      	cbz	r1, 40700a <_wcrtomb_r+0x2e>
  406fe6:	4c10      	ldr	r4, [pc, #64]	; (407028 <_wcrtomb_r+0x4c>)
  406fe8:	4d10      	ldr	r5, [pc, #64]	; (40702c <_wcrtomb_r+0x50>)
  406fea:	6824      	ldr	r4, [r4, #0]
  406fec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406fee:	2c00      	cmp	r4, #0
  406ff0:	bf08      	it	eq
  406ff2:	462c      	moveq	r4, r5
  406ff4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406ff8:	47a0      	blx	r4
  406ffa:	1c43      	adds	r3, r0, #1
  406ffc:	d103      	bne.n	407006 <_wcrtomb_r+0x2a>
  406ffe:	2200      	movs	r2, #0
  407000:	238a      	movs	r3, #138	; 0x8a
  407002:	603a      	str	r2, [r7, #0]
  407004:	6033      	str	r3, [r6, #0]
  407006:	b005      	add	sp, #20
  407008:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40700a:	460c      	mov	r4, r1
  40700c:	4906      	ldr	r1, [pc, #24]	; (407028 <_wcrtomb_r+0x4c>)
  40700e:	4a07      	ldr	r2, [pc, #28]	; (40702c <_wcrtomb_r+0x50>)
  407010:	6809      	ldr	r1, [r1, #0]
  407012:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407014:	2900      	cmp	r1, #0
  407016:	bf08      	it	eq
  407018:	4611      	moveq	r1, r2
  40701a:	4622      	mov	r2, r4
  40701c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407020:	a901      	add	r1, sp, #4
  407022:	47a0      	blx	r4
  407024:	e7e9      	b.n	406ffa <_wcrtomb_r+0x1e>
  407026:	bf00      	nop
  407028:	20400018 	.word	0x20400018
  40702c:	2040085c 	.word	0x2040085c

00407030 <__ascii_wctomb>:
  407030:	b121      	cbz	r1, 40703c <__ascii_wctomb+0xc>
  407032:	2aff      	cmp	r2, #255	; 0xff
  407034:	d804      	bhi.n	407040 <__ascii_wctomb+0x10>
  407036:	700a      	strb	r2, [r1, #0]
  407038:	2001      	movs	r0, #1
  40703a:	4770      	bx	lr
  40703c:	4608      	mov	r0, r1
  40703e:	4770      	bx	lr
  407040:	238a      	movs	r3, #138	; 0x8a
  407042:	6003      	str	r3, [r0, #0]
  407044:	f04f 30ff 	mov.w	r0, #4294967295
  407048:	4770      	bx	lr
  40704a:	bf00      	nop

0040704c <_write_r>:
  40704c:	b570      	push	{r4, r5, r6, lr}
  40704e:	460d      	mov	r5, r1
  407050:	4c08      	ldr	r4, [pc, #32]	; (407074 <_write_r+0x28>)
  407052:	4611      	mov	r1, r2
  407054:	4606      	mov	r6, r0
  407056:	461a      	mov	r2, r3
  407058:	4628      	mov	r0, r5
  40705a:	2300      	movs	r3, #0
  40705c:	6023      	str	r3, [r4, #0]
  40705e:	f7f9 fd81 	bl	400b64 <_write>
  407062:	1c43      	adds	r3, r0, #1
  407064:	d000      	beq.n	407068 <_write_r+0x1c>
  407066:	bd70      	pop	{r4, r5, r6, pc}
  407068:	6823      	ldr	r3, [r4, #0]
  40706a:	2b00      	cmp	r3, #0
  40706c:	d0fb      	beq.n	407066 <_write_r+0x1a>
  40706e:	6033      	str	r3, [r6, #0]
  407070:	bd70      	pop	{r4, r5, r6, pc}
  407072:	bf00      	nop
  407074:	2040c8b0 	.word	0x2040c8b0

00407078 <__register_exitproc>:
  407078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40707c:	4d2c      	ldr	r5, [pc, #176]	; (407130 <__register_exitproc+0xb8>)
  40707e:	4606      	mov	r6, r0
  407080:	6828      	ldr	r0, [r5, #0]
  407082:	4698      	mov	r8, r3
  407084:	460f      	mov	r7, r1
  407086:	4691      	mov	r9, r2
  407088:	f7ff fc1e 	bl	4068c8 <__retarget_lock_acquire_recursive>
  40708c:	4b29      	ldr	r3, [pc, #164]	; (407134 <__register_exitproc+0xbc>)
  40708e:	681c      	ldr	r4, [r3, #0]
  407090:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407094:	2b00      	cmp	r3, #0
  407096:	d03e      	beq.n	407116 <__register_exitproc+0x9e>
  407098:	685a      	ldr	r2, [r3, #4]
  40709a:	2a1f      	cmp	r2, #31
  40709c:	dc1c      	bgt.n	4070d8 <__register_exitproc+0x60>
  40709e:	f102 0e01 	add.w	lr, r2, #1
  4070a2:	b176      	cbz	r6, 4070c2 <__register_exitproc+0x4a>
  4070a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4070a8:	2401      	movs	r4, #1
  4070aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4070ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4070b2:	4094      	lsls	r4, r2
  4070b4:	4320      	orrs	r0, r4
  4070b6:	2e02      	cmp	r6, #2
  4070b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4070bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4070c0:	d023      	beq.n	40710a <__register_exitproc+0x92>
  4070c2:	3202      	adds	r2, #2
  4070c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4070c8:	6828      	ldr	r0, [r5, #0]
  4070ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4070ce:	f7ff fbfd 	bl	4068cc <__retarget_lock_release_recursive>
  4070d2:	2000      	movs	r0, #0
  4070d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4070d8:	4b17      	ldr	r3, [pc, #92]	; (407138 <__register_exitproc+0xc0>)
  4070da:	b30b      	cbz	r3, 407120 <__register_exitproc+0xa8>
  4070dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4070e0:	f7fd faf2 	bl	4046c8 <malloc>
  4070e4:	4603      	mov	r3, r0
  4070e6:	b1d8      	cbz	r0, 407120 <__register_exitproc+0xa8>
  4070e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4070ec:	6002      	str	r2, [r0, #0]
  4070ee:	2100      	movs	r1, #0
  4070f0:	6041      	str	r1, [r0, #4]
  4070f2:	460a      	mov	r2, r1
  4070f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4070f8:	f04f 0e01 	mov.w	lr, #1
  4070fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407100:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407104:	2e00      	cmp	r6, #0
  407106:	d0dc      	beq.n	4070c2 <__register_exitproc+0x4a>
  407108:	e7cc      	b.n	4070a4 <__register_exitproc+0x2c>
  40710a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40710e:	430c      	orrs	r4, r1
  407110:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407114:	e7d5      	b.n	4070c2 <__register_exitproc+0x4a>
  407116:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40711a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40711e:	e7bb      	b.n	407098 <__register_exitproc+0x20>
  407120:	6828      	ldr	r0, [r5, #0]
  407122:	f7ff fbd3 	bl	4068cc <__retarget_lock_release_recursive>
  407126:	f04f 30ff 	mov.w	r0, #4294967295
  40712a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40712e:	bf00      	nop
  407130:	20400858 	.word	0x20400858
  407134:	0040f18c 	.word	0x0040f18c
  407138:	004046c9 	.word	0x004046c9

0040713c <_close_r>:
  40713c:	b538      	push	{r3, r4, r5, lr}
  40713e:	4c07      	ldr	r4, [pc, #28]	; (40715c <_close_r+0x20>)
  407140:	2300      	movs	r3, #0
  407142:	4605      	mov	r5, r0
  407144:	4608      	mov	r0, r1
  407146:	6023      	str	r3, [r4, #0]
  407148:	f7fa ff98 	bl	40207c <_close>
  40714c:	1c43      	adds	r3, r0, #1
  40714e:	d000      	beq.n	407152 <_close_r+0x16>
  407150:	bd38      	pop	{r3, r4, r5, pc}
  407152:	6823      	ldr	r3, [r4, #0]
  407154:	2b00      	cmp	r3, #0
  407156:	d0fb      	beq.n	407150 <_close_r+0x14>
  407158:	602b      	str	r3, [r5, #0]
  40715a:	bd38      	pop	{r3, r4, r5, pc}
  40715c:	2040c8b0 	.word	0x2040c8b0

00407160 <_fclose_r>:
  407160:	b570      	push	{r4, r5, r6, lr}
  407162:	b159      	cbz	r1, 40717c <_fclose_r+0x1c>
  407164:	4605      	mov	r5, r0
  407166:	460c      	mov	r4, r1
  407168:	b110      	cbz	r0, 407170 <_fclose_r+0x10>
  40716a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40716c:	2b00      	cmp	r3, #0
  40716e:	d03c      	beq.n	4071ea <_fclose_r+0x8a>
  407170:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407172:	07d8      	lsls	r0, r3, #31
  407174:	d505      	bpl.n	407182 <_fclose_r+0x22>
  407176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40717a:	b92b      	cbnz	r3, 407188 <_fclose_r+0x28>
  40717c:	2600      	movs	r6, #0
  40717e:	4630      	mov	r0, r6
  407180:	bd70      	pop	{r4, r5, r6, pc}
  407182:	89a3      	ldrh	r3, [r4, #12]
  407184:	0599      	lsls	r1, r3, #22
  407186:	d53c      	bpl.n	407202 <_fclose_r+0xa2>
  407188:	4621      	mov	r1, r4
  40718a:	4628      	mov	r0, r5
  40718c:	f7fe fee4 	bl	405f58 <__sflush_r>
  407190:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407192:	4606      	mov	r6, r0
  407194:	b133      	cbz	r3, 4071a4 <_fclose_r+0x44>
  407196:	69e1      	ldr	r1, [r4, #28]
  407198:	4628      	mov	r0, r5
  40719a:	4798      	blx	r3
  40719c:	2800      	cmp	r0, #0
  40719e:	bfb8      	it	lt
  4071a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4071a4:	89a3      	ldrh	r3, [r4, #12]
  4071a6:	061a      	lsls	r2, r3, #24
  4071a8:	d422      	bmi.n	4071f0 <_fclose_r+0x90>
  4071aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4071ac:	b141      	cbz	r1, 4071c0 <_fclose_r+0x60>
  4071ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4071b2:	4299      	cmp	r1, r3
  4071b4:	d002      	beq.n	4071bc <_fclose_r+0x5c>
  4071b6:	4628      	mov	r0, r5
  4071b8:	f7ff f8ec 	bl	406394 <_free_r>
  4071bc:	2300      	movs	r3, #0
  4071be:	6323      	str	r3, [r4, #48]	; 0x30
  4071c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4071c2:	b121      	cbz	r1, 4071ce <_fclose_r+0x6e>
  4071c4:	4628      	mov	r0, r5
  4071c6:	f7ff f8e5 	bl	406394 <_free_r>
  4071ca:	2300      	movs	r3, #0
  4071cc:	6463      	str	r3, [r4, #68]	; 0x44
  4071ce:	f7fe ffe7 	bl	4061a0 <__sfp_lock_acquire>
  4071d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4071d4:	2200      	movs	r2, #0
  4071d6:	07db      	lsls	r3, r3, #31
  4071d8:	81a2      	strh	r2, [r4, #12]
  4071da:	d50e      	bpl.n	4071fa <_fclose_r+0x9a>
  4071dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4071de:	f7ff fb71 	bl	4068c4 <__retarget_lock_close_recursive>
  4071e2:	f7fe ffe3 	bl	4061ac <__sfp_lock_release>
  4071e6:	4630      	mov	r0, r6
  4071e8:	bd70      	pop	{r4, r5, r6, pc}
  4071ea:	f7fe ffad 	bl	406148 <__sinit>
  4071ee:	e7bf      	b.n	407170 <_fclose_r+0x10>
  4071f0:	6921      	ldr	r1, [r4, #16]
  4071f2:	4628      	mov	r0, r5
  4071f4:	f7ff f8ce 	bl	406394 <_free_r>
  4071f8:	e7d7      	b.n	4071aa <_fclose_r+0x4a>
  4071fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4071fc:	f7ff fb66 	bl	4068cc <__retarget_lock_release_recursive>
  407200:	e7ec      	b.n	4071dc <_fclose_r+0x7c>
  407202:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407204:	f7ff fb60 	bl	4068c8 <__retarget_lock_acquire_recursive>
  407208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40720c:	2b00      	cmp	r3, #0
  40720e:	d1bb      	bne.n	407188 <_fclose_r+0x28>
  407210:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407212:	f016 0601 	ands.w	r6, r6, #1
  407216:	d1b1      	bne.n	40717c <_fclose_r+0x1c>
  407218:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40721a:	f7ff fb57 	bl	4068cc <__retarget_lock_release_recursive>
  40721e:	4630      	mov	r0, r6
  407220:	bd70      	pop	{r4, r5, r6, pc}
  407222:	bf00      	nop

00407224 <_fstat_r>:
  407224:	b538      	push	{r3, r4, r5, lr}
  407226:	460b      	mov	r3, r1
  407228:	4c07      	ldr	r4, [pc, #28]	; (407248 <_fstat_r+0x24>)
  40722a:	4605      	mov	r5, r0
  40722c:	4611      	mov	r1, r2
  40722e:	4618      	mov	r0, r3
  407230:	2300      	movs	r3, #0
  407232:	6023      	str	r3, [r4, #0]
  407234:	f7fa ff25 	bl	402082 <_fstat>
  407238:	1c43      	adds	r3, r0, #1
  40723a:	d000      	beq.n	40723e <_fstat_r+0x1a>
  40723c:	bd38      	pop	{r3, r4, r5, pc}
  40723e:	6823      	ldr	r3, [r4, #0]
  407240:	2b00      	cmp	r3, #0
  407242:	d0fb      	beq.n	40723c <_fstat_r+0x18>
  407244:	602b      	str	r3, [r5, #0]
  407246:	bd38      	pop	{r3, r4, r5, pc}
  407248:	2040c8b0 	.word	0x2040c8b0

0040724c <_isatty_r>:
  40724c:	b538      	push	{r3, r4, r5, lr}
  40724e:	4c07      	ldr	r4, [pc, #28]	; (40726c <_isatty_r+0x20>)
  407250:	2300      	movs	r3, #0
  407252:	4605      	mov	r5, r0
  407254:	4608      	mov	r0, r1
  407256:	6023      	str	r3, [r4, #0]
  407258:	f7fa ff18 	bl	40208c <_isatty>
  40725c:	1c43      	adds	r3, r0, #1
  40725e:	d000      	beq.n	407262 <_isatty_r+0x16>
  407260:	bd38      	pop	{r3, r4, r5, pc}
  407262:	6823      	ldr	r3, [r4, #0]
  407264:	2b00      	cmp	r3, #0
  407266:	d0fb      	beq.n	407260 <_isatty_r+0x14>
  407268:	602b      	str	r3, [r5, #0]
  40726a:	bd38      	pop	{r3, r4, r5, pc}
  40726c:	2040c8b0 	.word	0x2040c8b0

00407270 <_lseek_r>:
  407270:	b570      	push	{r4, r5, r6, lr}
  407272:	460d      	mov	r5, r1
  407274:	4c08      	ldr	r4, [pc, #32]	; (407298 <_lseek_r+0x28>)
  407276:	4611      	mov	r1, r2
  407278:	4606      	mov	r6, r0
  40727a:	461a      	mov	r2, r3
  40727c:	4628      	mov	r0, r5
  40727e:	2300      	movs	r3, #0
  407280:	6023      	str	r3, [r4, #0]
  407282:	f7fa ff05 	bl	402090 <_lseek>
  407286:	1c43      	adds	r3, r0, #1
  407288:	d000      	beq.n	40728c <_lseek_r+0x1c>
  40728a:	bd70      	pop	{r4, r5, r6, pc}
  40728c:	6823      	ldr	r3, [r4, #0]
  40728e:	2b00      	cmp	r3, #0
  407290:	d0fb      	beq.n	40728a <_lseek_r+0x1a>
  407292:	6033      	str	r3, [r6, #0]
  407294:	bd70      	pop	{r4, r5, r6, pc}
  407296:	bf00      	nop
  407298:	2040c8b0 	.word	0x2040c8b0

0040729c <_read_r>:
  40729c:	b570      	push	{r4, r5, r6, lr}
  40729e:	460d      	mov	r5, r1
  4072a0:	4c08      	ldr	r4, [pc, #32]	; (4072c4 <_read_r+0x28>)
  4072a2:	4611      	mov	r1, r2
  4072a4:	4606      	mov	r6, r0
  4072a6:	461a      	mov	r2, r3
  4072a8:	4628      	mov	r0, r5
  4072aa:	2300      	movs	r3, #0
  4072ac:	6023      	str	r3, [r4, #0]
  4072ae:	f7f9 fc3b 	bl	400b28 <_read>
  4072b2:	1c43      	adds	r3, r0, #1
  4072b4:	d000      	beq.n	4072b8 <_read_r+0x1c>
  4072b6:	bd70      	pop	{r4, r5, r6, pc}
  4072b8:	6823      	ldr	r3, [r4, #0]
  4072ba:	2b00      	cmp	r3, #0
  4072bc:	d0fb      	beq.n	4072b6 <_read_r+0x1a>
  4072be:	6033      	str	r3, [r6, #0]
  4072c0:	bd70      	pop	{r4, r5, r6, pc}
  4072c2:	bf00      	nop
  4072c4:	2040c8b0 	.word	0x2040c8b0

004072c8 <__aeabi_uldivmod>:
  4072c8:	b953      	cbnz	r3, 4072e0 <__aeabi_uldivmod+0x18>
  4072ca:	b94a      	cbnz	r2, 4072e0 <__aeabi_uldivmod+0x18>
  4072cc:	2900      	cmp	r1, #0
  4072ce:	bf08      	it	eq
  4072d0:	2800      	cmpeq	r0, #0
  4072d2:	bf1c      	itt	ne
  4072d4:	f04f 31ff 	movne.w	r1, #4294967295
  4072d8:	f04f 30ff 	movne.w	r0, #4294967295
  4072dc:	f000 b97a 	b.w	4075d4 <__aeabi_idiv0>
  4072e0:	f1ad 0c08 	sub.w	ip, sp, #8
  4072e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4072e8:	f000 f806 	bl	4072f8 <__udivmoddi4>
  4072ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  4072f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4072f4:	b004      	add	sp, #16
  4072f6:	4770      	bx	lr

004072f8 <__udivmoddi4>:
  4072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4072fc:	468c      	mov	ip, r1
  4072fe:	460d      	mov	r5, r1
  407300:	4604      	mov	r4, r0
  407302:	9e08      	ldr	r6, [sp, #32]
  407304:	2b00      	cmp	r3, #0
  407306:	d151      	bne.n	4073ac <__udivmoddi4+0xb4>
  407308:	428a      	cmp	r2, r1
  40730a:	4617      	mov	r7, r2
  40730c:	d96d      	bls.n	4073ea <__udivmoddi4+0xf2>
  40730e:	fab2 fe82 	clz	lr, r2
  407312:	f1be 0f00 	cmp.w	lr, #0
  407316:	d00b      	beq.n	407330 <__udivmoddi4+0x38>
  407318:	f1ce 0c20 	rsb	ip, lr, #32
  40731c:	fa01 f50e 	lsl.w	r5, r1, lr
  407320:	fa20 fc0c 	lsr.w	ip, r0, ip
  407324:	fa02 f70e 	lsl.w	r7, r2, lr
  407328:	ea4c 0c05 	orr.w	ip, ip, r5
  40732c:	fa00 f40e 	lsl.w	r4, r0, lr
  407330:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407334:	0c25      	lsrs	r5, r4, #16
  407336:	fbbc f8fa 	udiv	r8, ip, sl
  40733a:	fa1f f987 	uxth.w	r9, r7
  40733e:	fb0a cc18 	mls	ip, sl, r8, ip
  407342:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407346:	fb08 f309 	mul.w	r3, r8, r9
  40734a:	42ab      	cmp	r3, r5
  40734c:	d90a      	bls.n	407364 <__udivmoddi4+0x6c>
  40734e:	19ed      	adds	r5, r5, r7
  407350:	f108 32ff 	add.w	r2, r8, #4294967295
  407354:	f080 8123 	bcs.w	40759e <__udivmoddi4+0x2a6>
  407358:	42ab      	cmp	r3, r5
  40735a:	f240 8120 	bls.w	40759e <__udivmoddi4+0x2a6>
  40735e:	f1a8 0802 	sub.w	r8, r8, #2
  407362:	443d      	add	r5, r7
  407364:	1aed      	subs	r5, r5, r3
  407366:	b2a4      	uxth	r4, r4
  407368:	fbb5 f0fa 	udiv	r0, r5, sl
  40736c:	fb0a 5510 	mls	r5, sl, r0, r5
  407370:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407374:	fb00 f909 	mul.w	r9, r0, r9
  407378:	45a1      	cmp	r9, r4
  40737a:	d909      	bls.n	407390 <__udivmoddi4+0x98>
  40737c:	19e4      	adds	r4, r4, r7
  40737e:	f100 33ff 	add.w	r3, r0, #4294967295
  407382:	f080 810a 	bcs.w	40759a <__udivmoddi4+0x2a2>
  407386:	45a1      	cmp	r9, r4
  407388:	f240 8107 	bls.w	40759a <__udivmoddi4+0x2a2>
  40738c:	3802      	subs	r0, #2
  40738e:	443c      	add	r4, r7
  407390:	eba4 0409 	sub.w	r4, r4, r9
  407394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407398:	2100      	movs	r1, #0
  40739a:	2e00      	cmp	r6, #0
  40739c:	d061      	beq.n	407462 <__udivmoddi4+0x16a>
  40739e:	fa24 f40e 	lsr.w	r4, r4, lr
  4073a2:	2300      	movs	r3, #0
  4073a4:	6034      	str	r4, [r6, #0]
  4073a6:	6073      	str	r3, [r6, #4]
  4073a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4073ac:	428b      	cmp	r3, r1
  4073ae:	d907      	bls.n	4073c0 <__udivmoddi4+0xc8>
  4073b0:	2e00      	cmp	r6, #0
  4073b2:	d054      	beq.n	40745e <__udivmoddi4+0x166>
  4073b4:	2100      	movs	r1, #0
  4073b6:	e886 0021 	stmia.w	r6, {r0, r5}
  4073ba:	4608      	mov	r0, r1
  4073bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4073c0:	fab3 f183 	clz	r1, r3
  4073c4:	2900      	cmp	r1, #0
  4073c6:	f040 808e 	bne.w	4074e6 <__udivmoddi4+0x1ee>
  4073ca:	42ab      	cmp	r3, r5
  4073cc:	d302      	bcc.n	4073d4 <__udivmoddi4+0xdc>
  4073ce:	4282      	cmp	r2, r0
  4073d0:	f200 80fa 	bhi.w	4075c8 <__udivmoddi4+0x2d0>
  4073d4:	1a84      	subs	r4, r0, r2
  4073d6:	eb65 0503 	sbc.w	r5, r5, r3
  4073da:	2001      	movs	r0, #1
  4073dc:	46ac      	mov	ip, r5
  4073de:	2e00      	cmp	r6, #0
  4073e0:	d03f      	beq.n	407462 <__udivmoddi4+0x16a>
  4073e2:	e886 1010 	stmia.w	r6, {r4, ip}
  4073e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4073ea:	b912      	cbnz	r2, 4073f2 <__udivmoddi4+0xfa>
  4073ec:	2701      	movs	r7, #1
  4073ee:	fbb7 f7f2 	udiv	r7, r7, r2
  4073f2:	fab7 fe87 	clz	lr, r7
  4073f6:	f1be 0f00 	cmp.w	lr, #0
  4073fa:	d134      	bne.n	407466 <__udivmoddi4+0x16e>
  4073fc:	1beb      	subs	r3, r5, r7
  4073fe:	0c3a      	lsrs	r2, r7, #16
  407400:	fa1f fc87 	uxth.w	ip, r7
  407404:	2101      	movs	r1, #1
  407406:	fbb3 f8f2 	udiv	r8, r3, r2
  40740a:	0c25      	lsrs	r5, r4, #16
  40740c:	fb02 3318 	mls	r3, r2, r8, r3
  407410:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407414:	fb0c f308 	mul.w	r3, ip, r8
  407418:	42ab      	cmp	r3, r5
  40741a:	d907      	bls.n	40742c <__udivmoddi4+0x134>
  40741c:	19ed      	adds	r5, r5, r7
  40741e:	f108 30ff 	add.w	r0, r8, #4294967295
  407422:	d202      	bcs.n	40742a <__udivmoddi4+0x132>
  407424:	42ab      	cmp	r3, r5
  407426:	f200 80d1 	bhi.w	4075cc <__udivmoddi4+0x2d4>
  40742a:	4680      	mov	r8, r0
  40742c:	1aed      	subs	r5, r5, r3
  40742e:	b2a3      	uxth	r3, r4
  407430:	fbb5 f0f2 	udiv	r0, r5, r2
  407434:	fb02 5510 	mls	r5, r2, r0, r5
  407438:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40743c:	fb0c fc00 	mul.w	ip, ip, r0
  407440:	45a4      	cmp	ip, r4
  407442:	d907      	bls.n	407454 <__udivmoddi4+0x15c>
  407444:	19e4      	adds	r4, r4, r7
  407446:	f100 33ff 	add.w	r3, r0, #4294967295
  40744a:	d202      	bcs.n	407452 <__udivmoddi4+0x15a>
  40744c:	45a4      	cmp	ip, r4
  40744e:	f200 80b8 	bhi.w	4075c2 <__udivmoddi4+0x2ca>
  407452:	4618      	mov	r0, r3
  407454:	eba4 040c 	sub.w	r4, r4, ip
  407458:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40745c:	e79d      	b.n	40739a <__udivmoddi4+0xa2>
  40745e:	4631      	mov	r1, r6
  407460:	4630      	mov	r0, r6
  407462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407466:	f1ce 0420 	rsb	r4, lr, #32
  40746a:	fa05 f30e 	lsl.w	r3, r5, lr
  40746e:	fa07 f70e 	lsl.w	r7, r7, lr
  407472:	fa20 f804 	lsr.w	r8, r0, r4
  407476:	0c3a      	lsrs	r2, r7, #16
  407478:	fa25 f404 	lsr.w	r4, r5, r4
  40747c:	ea48 0803 	orr.w	r8, r8, r3
  407480:	fbb4 f1f2 	udiv	r1, r4, r2
  407484:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407488:	fb02 4411 	mls	r4, r2, r1, r4
  40748c:	fa1f fc87 	uxth.w	ip, r7
  407490:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407494:	fb01 f30c 	mul.w	r3, r1, ip
  407498:	42ab      	cmp	r3, r5
  40749a:	fa00 f40e 	lsl.w	r4, r0, lr
  40749e:	d909      	bls.n	4074b4 <__udivmoddi4+0x1bc>
  4074a0:	19ed      	adds	r5, r5, r7
  4074a2:	f101 30ff 	add.w	r0, r1, #4294967295
  4074a6:	f080 808a 	bcs.w	4075be <__udivmoddi4+0x2c6>
  4074aa:	42ab      	cmp	r3, r5
  4074ac:	f240 8087 	bls.w	4075be <__udivmoddi4+0x2c6>
  4074b0:	3902      	subs	r1, #2
  4074b2:	443d      	add	r5, r7
  4074b4:	1aeb      	subs	r3, r5, r3
  4074b6:	fa1f f588 	uxth.w	r5, r8
  4074ba:	fbb3 f0f2 	udiv	r0, r3, r2
  4074be:	fb02 3310 	mls	r3, r2, r0, r3
  4074c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4074c6:	fb00 f30c 	mul.w	r3, r0, ip
  4074ca:	42ab      	cmp	r3, r5
  4074cc:	d907      	bls.n	4074de <__udivmoddi4+0x1e6>
  4074ce:	19ed      	adds	r5, r5, r7
  4074d0:	f100 38ff 	add.w	r8, r0, #4294967295
  4074d4:	d26f      	bcs.n	4075b6 <__udivmoddi4+0x2be>
  4074d6:	42ab      	cmp	r3, r5
  4074d8:	d96d      	bls.n	4075b6 <__udivmoddi4+0x2be>
  4074da:	3802      	subs	r0, #2
  4074dc:	443d      	add	r5, r7
  4074de:	1aeb      	subs	r3, r5, r3
  4074e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4074e4:	e78f      	b.n	407406 <__udivmoddi4+0x10e>
  4074e6:	f1c1 0720 	rsb	r7, r1, #32
  4074ea:	fa22 f807 	lsr.w	r8, r2, r7
  4074ee:	408b      	lsls	r3, r1
  4074f0:	fa05 f401 	lsl.w	r4, r5, r1
  4074f4:	ea48 0303 	orr.w	r3, r8, r3
  4074f8:	fa20 fe07 	lsr.w	lr, r0, r7
  4074fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407500:	40fd      	lsrs	r5, r7
  407502:	ea4e 0e04 	orr.w	lr, lr, r4
  407506:	fbb5 f9fc 	udiv	r9, r5, ip
  40750a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40750e:	fb0c 5519 	mls	r5, ip, r9, r5
  407512:	fa1f f883 	uxth.w	r8, r3
  407516:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40751a:	fb09 f408 	mul.w	r4, r9, r8
  40751e:	42ac      	cmp	r4, r5
  407520:	fa02 f201 	lsl.w	r2, r2, r1
  407524:	fa00 fa01 	lsl.w	sl, r0, r1
  407528:	d908      	bls.n	40753c <__udivmoddi4+0x244>
  40752a:	18ed      	adds	r5, r5, r3
  40752c:	f109 30ff 	add.w	r0, r9, #4294967295
  407530:	d243      	bcs.n	4075ba <__udivmoddi4+0x2c2>
  407532:	42ac      	cmp	r4, r5
  407534:	d941      	bls.n	4075ba <__udivmoddi4+0x2c2>
  407536:	f1a9 0902 	sub.w	r9, r9, #2
  40753a:	441d      	add	r5, r3
  40753c:	1b2d      	subs	r5, r5, r4
  40753e:	fa1f fe8e 	uxth.w	lr, lr
  407542:	fbb5 f0fc 	udiv	r0, r5, ip
  407546:	fb0c 5510 	mls	r5, ip, r0, r5
  40754a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40754e:	fb00 f808 	mul.w	r8, r0, r8
  407552:	45a0      	cmp	r8, r4
  407554:	d907      	bls.n	407566 <__udivmoddi4+0x26e>
  407556:	18e4      	adds	r4, r4, r3
  407558:	f100 35ff 	add.w	r5, r0, #4294967295
  40755c:	d229      	bcs.n	4075b2 <__udivmoddi4+0x2ba>
  40755e:	45a0      	cmp	r8, r4
  407560:	d927      	bls.n	4075b2 <__udivmoddi4+0x2ba>
  407562:	3802      	subs	r0, #2
  407564:	441c      	add	r4, r3
  407566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40756a:	eba4 0408 	sub.w	r4, r4, r8
  40756e:	fba0 8902 	umull	r8, r9, r0, r2
  407572:	454c      	cmp	r4, r9
  407574:	46c6      	mov	lr, r8
  407576:	464d      	mov	r5, r9
  407578:	d315      	bcc.n	4075a6 <__udivmoddi4+0x2ae>
  40757a:	d012      	beq.n	4075a2 <__udivmoddi4+0x2aa>
  40757c:	b156      	cbz	r6, 407594 <__udivmoddi4+0x29c>
  40757e:	ebba 030e 	subs.w	r3, sl, lr
  407582:	eb64 0405 	sbc.w	r4, r4, r5
  407586:	fa04 f707 	lsl.w	r7, r4, r7
  40758a:	40cb      	lsrs	r3, r1
  40758c:	431f      	orrs	r7, r3
  40758e:	40cc      	lsrs	r4, r1
  407590:	6037      	str	r7, [r6, #0]
  407592:	6074      	str	r4, [r6, #4]
  407594:	2100      	movs	r1, #0
  407596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40759a:	4618      	mov	r0, r3
  40759c:	e6f8      	b.n	407390 <__udivmoddi4+0x98>
  40759e:	4690      	mov	r8, r2
  4075a0:	e6e0      	b.n	407364 <__udivmoddi4+0x6c>
  4075a2:	45c2      	cmp	sl, r8
  4075a4:	d2ea      	bcs.n	40757c <__udivmoddi4+0x284>
  4075a6:	ebb8 0e02 	subs.w	lr, r8, r2
  4075aa:	eb69 0503 	sbc.w	r5, r9, r3
  4075ae:	3801      	subs	r0, #1
  4075b0:	e7e4      	b.n	40757c <__udivmoddi4+0x284>
  4075b2:	4628      	mov	r0, r5
  4075b4:	e7d7      	b.n	407566 <__udivmoddi4+0x26e>
  4075b6:	4640      	mov	r0, r8
  4075b8:	e791      	b.n	4074de <__udivmoddi4+0x1e6>
  4075ba:	4681      	mov	r9, r0
  4075bc:	e7be      	b.n	40753c <__udivmoddi4+0x244>
  4075be:	4601      	mov	r1, r0
  4075c0:	e778      	b.n	4074b4 <__udivmoddi4+0x1bc>
  4075c2:	3802      	subs	r0, #2
  4075c4:	443c      	add	r4, r7
  4075c6:	e745      	b.n	407454 <__udivmoddi4+0x15c>
  4075c8:	4608      	mov	r0, r1
  4075ca:	e708      	b.n	4073de <__udivmoddi4+0xe6>
  4075cc:	f1a8 0802 	sub.w	r8, r8, #2
  4075d0:	443d      	add	r5, r7
  4075d2:	e72b      	b.n	40742c <__udivmoddi4+0x134>

004075d4 <__aeabi_idiv0>:
  4075d4:	4770      	bx	lr
  4075d6:	bf00      	nop
  4075d8:	454c4449 	.word	0x454c4449
  4075dc:	00000000 	.word	0x00000000
  4075e0:	51726d54 	.word	0x51726d54
  4075e4:	00000000 	.word	0x00000000
  4075e8:	20726d54 	.word	0x20726d54
  4075ec:	00637653 	.word	0x00637653
  4075f0:	0a05000d 	.word	0x0a05000d
  4075f4:	0000004b 	.word	0x0000004b
  4075f8:	00001932 	.word	0x00001932
  4075fc:	0e00008b 	.word	0x0e00008b
  407600:	32800008 	.word	0x32800008
  407604:	030a0205 	.word	0x030a0205
  407608:	0f022003 	.word	0x0f022003
  40760c:	00000a0f 	.word	0x00000a0f
  407610:	18180000 	.word	0x18180000
  407614:	00002020 	.word	0x00002020
  407618:	0a000000 	.word	0x0a000000
  40761c:	02020000 	.word	0x02020000
  407620:	18180000 	.word	0x18180000
  407624:	00030000 	.word	0x00030000
  407628:	00000000 	.word	0x00000000
  40762c:	18010002 	.word	0x18010002
  407630:	1e1e1e1e 	.word	0x1e1e1e1e
  407634:	1e1e1e1e 	.word	0x1e1e1e1e
  407638:	1e1e1e1e 	.word	0x1e1e1e1e
  40763c:	00001e1e 	.word	0x00001e1e
	...

00407650 <ar>:
  407650:	0040765c 00460058 00000008              \v@.X.F.....

0040765c <image_data_ar>:
  40765c:	ffffffff ffffffff ffffffff ffffffff     ................
  40766c:	ffffffff ffffffff ffffffff ffffffff     ................
  40767c:	ffffffff ffffffff ffffffff ffffffff     ................
  40768c:	ffffffff ffffffff ffffffff ffffffff     ................
  40769c:	ffffffff ffffffff ffffffff ffffffff     ................
  4076ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4076bc:	c4ffffff 7676c4c4 4f4f4f76 23373737     ......vvvOOO777#
  4076cc:	18182323 10101018 05090909 03030505     ##..............
  4076dc:	00000003 03000000 05050303 09090905     ................
  4076ec:	18101010 23231818 37373723 774f4f4f     ......###777OOOw
  4076fc:	c4c47777 ffffffc4 ffffffff ffffffff     ww..............
  40770c:	ffffffff ffffffff ffffffff ffffffff     ................
  40771c:	ffffffff ffffffff ffffffff ffffffff     ................
  40772c:	ffffffff ffffffff ffffffff ffffffff     ................
  40773c:	ffffffff ffffffff ffffffff ffffffff     ................
  40774c:	ffffffff ffffffff ffffffff ffffffff     ................
  40775c:	ffffffff ffffffff ffffffff ffffffff     ................
  40776c:	ffffffff ffffffff ffffffff ffffffff     ................
  40777c:	ffffffff ffffffff ffffffff ffffffff     ................
  40778c:	ffffffff ffffffff ffffffff ffffffff     ................
  40779c:	ffffffff ffffffff ffffffff ffffffff     ................
  4077ac:	ffffffff ffffffff ffffffff 78dfdfdf     ...............x
  4077bc:	3f3f7878 1d1d1d3f 00070707 00000000     xx???...........
	...
  407808:	07070700 3f1d1d1d 78783f3f e2e2e278     .......???xxx...
  407818:	ffffffff ffffffff ffffffff ffffffff     ................
  407828:	ffffffff ffffffff ffffffff ffffffff     ................
  407838:	ffffffff ffffffff ffffffff ffffffff     ................
  407848:	ffffffff ffffffff ffffffff ffffffff     ................
  407858:	ffffffff ffffffff ffffffff ffffffff     ................
  407868:	ffffffff ffffffff ffffffff ffffffff     ................
  407878:	ffffffff ffffffff ffffffff ffffffff     ................
  407888:	ffffffff ffffffff ffffffff ffffffff     ................
  407898:	ffffffff ffffffff ffffffff ffffffff     ................
  4078a8:	ffffffff ffffffff ffffffff a9ffffff     ................
  4078b8:	4747a9a9 1b1b1b47 00020202 00000000     ..GGG...........
	...
  40791c:	03030300 491b1b1b a9a94949 ffffffa9     .......III......
  40792c:	ffffffff ffffffff ffffffff ffffffff     ................
  40793c:	ffffffff ffffffff ffffffff ffffffff     ................
  40794c:	ffffffff ffffffff ffffffff ffffffff     ................
  40795c:	ffffffff ffffffff ffffffff ffffffff     ................
  40796c:	ffffffff ffffffff ffffffff ffffffff     ................
  40797c:	ffffffff ffffffff ffffffff ffffffff     ................
  40798c:	ffffffff ffffffff ffffffff ffffffff     ................
  40799c:	ffffffff ffffffff ffffffff ffffffff     ................
  4079ac:	ffffffff ffffffff b7b7ffff 444444b7     .............DDD
  4079bc:	00121212 00000000 00000000 00000000     ................
	...
  407a30:	13131300 b9444444 ffffb9b9 ffffffff     ....DDD.........
  407a40:	ffffffff ffffffff ffffffff ffffffff     ................
  407a50:	ffffffff ffffffff ffffffff ffffffff     ................
  407a60:	ffffffff ffffffff ffffffff ffffffff     ................
  407a70:	ffffffff ffffffff ffffffff ffffffff     ................
  407a80:	ffffffff ffffffff ffffffff ffffffff     ................
  407a90:	ffffffff ffffffff ffffffff ffffffff     ................
  407aa0:	ffffffff ffffffff ffffffff ffffffff     ................
  407ab0:	ffffffff f9f9f9ff 1e6c6c6c 01011e1e     ........lll.....
  407ac0:	00000001 00000000 00000000 00000000     ................
	...
  407b3c:	01000000 1e1e0101 6c6c6c1e fff9f9f9     .........lll....
  407b4c:	ffffffff ffffffff ffffffff ffffffff     ................
  407b5c:	ffffffff ffffffff ffffffff ffffffff     ................
  407b6c:	ffffffff ffffffff ffffffff ffffffff     ................
  407b7c:	ffffffff ffffffff ffffffff ffffffff     ................
  407b8c:	ffffffff ffffffff ffffffff ffffffff     ................
  407b9c:	ffffffff ffffffff ffffffff ffffffff     ................
  407bac:	ffffffff ffffffff f3ffffff 5a5af3f3     ..............ZZ
  407bbc:	0f0f0f5a 00000000 00000000 00000000     Z...............
	...
  407bf0:	11040404 21211111 2c2c2c21 3a323232     ......!!!,,,222:
  407c00:	44443a3a 4e4e4e44 444e4e4e 3a3a4444     ::DDDNNNNNNDDD::
  407c10:	3232323a 212c2c2c 11112121 04040411     :222,,,!!!......
	...
  407c50:	5a0f0f0f f3f35a5a fffffff3 ffffffff     ...ZZZ..........
  407c60:	ffffffff ffffffff ffffffff ffffffff     ................
  407c70:	ffffffff ffffffff ffffffff ffffffff     ................
  407c80:	ffffffff ffffffff ffffffff ffffffff     ................
  407c90:	ffffffff ffffffff ffffffff ffffffff     ................
  407ca0:	ffffffff ffffffff ffffffff ffffffff     ................
  407cb0:	ffffffff ffffffff eaeaeaff 0c515151     ............QQQ.
  407cc0:	00000c0c 00000000 00000000 00000000     ................
	...
  407ce8:	0d0d0d00 54292929 81815454 bfbfbf81     ....)))TTT......
  407cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  407d08:	ffffffff ffffffff ffffffff ffffffff     ................
  407d18:	ffffffff ffffffff ffffffff ffffffff     ................
  407d28:	80bfbfbf 54548080 28282854 000c0c0c     ......TTT(((....
	...
  407d5c:	0c0c0000 5252520c ffeaeaea ffffffff     .....RRR........
  407d6c:	ffffffff ffffffff ffffffff ffffffff     ................
  407d7c:	ffffffff ffffffff ffffffff ffffffff     ................
  407d8c:	ffffffff ffffffff ffffffff ffffffff     ................
  407d9c:	ffffffff ffffffff ffffffff ffffffff     ................
  407dac:	ffffffff ffffffff ffffffff f9ffffff     ................
  407dbc:	5454f9f9 09090954 00000000 00000000     ..TTT...........
	...
  407de4:	09090900 622e2e2e bfbf6262 ffffffbf     .......bbb......
  407df4:	ffffffff ffffffff ffffffff ffffffff     ................
  407e04:	ffffffff ffffffff ffffffff ffffffff     ................
  407e14:	ffffffff ffffffff ffffffff ffffffff     ................
  407e24:	ffffffff ffffffff ffffffff ffffffff     ................
  407e34:	ffffffff ffffffff bdffffff 6161bdbd     ..............aa
  407e44:	2e2e2e61 00090909 00000000 00000000     a...............
	...
  407e6c:	54090909 fcfc5454 fffffffc ffffffff     ...TTT..........
  407e7c:	ffffffff ffffffff ffffffff ffffffff     ................
  407e8c:	ffffffff ffffffff ffffffff ffffffff     ................
  407e9c:	ffffffff ffffffff ffffffff ffffffff     ................
  407eac:	ffffffff ffffffff ffffffff ffffffff     ................
  407ebc:	ffffffff 15949494 00001515 00000000     ................
	...
  407ee4:	27060606 6b6b2727 f3f3f36b ffffffff     ...'''kkk.......
  407ef4:	ffffffff ffffffff ffffffff ffffffff     ................
  407f04:	ffffffff ffffffff ffffffff ffffffff     ................
  407f14:	ffffffff ffffffff ffffffff ffffffff     ................
  407f24:	ffffffff ffffffff ffffffff ffffffff     ................
  407f34:	ffffffff ffffffff ffffffff ffffffff     ................
  407f44:	ffffffff ffffffff ffffffff 81f9f9f9     ................
  407f54:	32328181 07070732 00000000 00000000     ..222...........
	...
  407f78:	13130000 8a8a8a13 ffffffff ffffffff     ................
  407f88:	ffffffff ffffffff ffffffff ffffffff     ................
  407f98:	ffffffff ffffffff ffffffff ffffffff     ................
  407fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  407fb8:	ffffffff ffffffff d5d5ffff 323232d5     .............222
  407fc8:	00010101 00000000 00000000 00000000     ................
	...
  407fe4:	1a1a0000 6c6c6c1a fff3f3f3 ffffffff     .....lll........
  407ff4:	ffffffff ffffffff ffffffff ffffffff     ................
  408004:	ffffffff ffffffff ffffffff ffffffff     ................
  408014:	ffffffff ffffffff ffffffff ffffffff     ................
  408024:	ffffffff ffffffff ffffffff ffffffff     ................
  408034:	ffffffff ffffffff ffffffff ffffffff     ................
  408044:	ffffffff ffffffff ffffffff ffffffff     ................
  408054:	ffffffff ffffffff ffffffff f3f3f3ff     ................
  408064:	1a6b6b6b 00001a1a 00000000 00000000     kkk.............
	...
  408084:	01010100 d7323232 ffffd7d7 ffffffff     ....222.........
  408094:	ffffffff ffffffff ffffffff ffffffff     ................
  4080a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4080b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4080c4:	6bffffff 09096b6b 00000009 00000000     ...kkk..........
	...
  4080e4:	02020200 94272727 ffff9494 ffffffff     ....'''.........
  4080f4:	ffffffff ffffffff ffffffff ffffffff     ................
  408104:	ffffffff ffffffff ffffffff ffffffff     ................
  408114:	ffffffff ffffffff ffffffff ffffffff     ................
  408124:	ffffffff ffffffff ffffffff ffffffff     ................
  408134:	ffffffff ffffffff ffffffff ffffffff     ................
  408144:	ffffffff ffffffff ffffffff ffffffff     ................
  408154:	ffffffff ffffffff ffffffff ffffffff     ................
  408164:	ffffffff ffffffff ffffffff 9393ffff     ................
  408174:	27272793 00020202 00000000 00000000     .'''............
	...
  408190:	09000000 6c6c0909 ffffff6c ffffffff     ......lll.......
  4081a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4081b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4081c0:	ffffffff ffffffff f0f0f0ff 00343434     ............444.
	...
  4081e4:	02000000 30300202 bbbbbb30 ffffffff     ......000.......
  4081f4:	ffffffff ffffffff ffffffff ffffffff     ................
  408204:	ffffffff ffffffff ffffffff ffffffff     ................
  408214:	ffffffff ffffffff ffffffff ffffffff     ................
  408224:	ffffffff ffffffff ffffffff ffffffff     ................
  408234:	ffffffff ffffffff ffffffff ffffffff     ................
  408244:	ffffffff ffffffff ffffffff ffffffff     ................
  408254:	ffffffff ffffffff ffffffff ffffffff     ................
  408264:	ffffffff ffffffff ffffffff ffffffff     ................
  408274:	ffffffff ffffffff ffffffff 2eb9b9b9     ................
  408284:	01012e2e 00000001 00000000 00000000     ................
	...
  4082a0:	34343400 fff0f0f0 ffffffff ffffffff     .444............
  4082b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4082c0:	ffffffff ffffffff ffffffff b5b5ffff     ................
  4082d0:	151515b5 00000000 00000000 00000000     ................
	...
  4082ec:	991a1a1a ffff9999 ffffffff ffffffff     ................
  4082fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40830c:	ffffffff ffffffff ffffffff ffffffff     ................
  40831c:	ffffffff ffffffff ffffffff ffffffff     ................
  40832c:	ffffffff ffffffff ffffffff ffffffff     ................
  40833c:	ffffffff ffffffff ffffffff ffffffff     ................
  40834c:	ffffffff ffffffff ffffffff ffffffff     ................
  40835c:	ffffffff ffffffff ffffffff ffffffff     ................
  40836c:	ffffffff ffffffff ffffffff ffffffff     ................
  40837c:	ffffffff ffffffff ffffffff ffffffff     ................
  40838c:	a2a2ffff 1e1e1ea2 00000000 00000000     ................
	...
  4083ac:	ad141414 ffffadad ffffffff ffffffff     ................
  4083bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4083cc:	ffffffff 6bffffff 06066b6b 00000006     .......kkk......
	...
  4083ec:	0f0f0000 7373730f ffffffff ffffffff     .....sss........
  4083fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40840c:	ffffffff ffffffff ffffffff ffffffff     ................
  40841c:	ffffffff ffffffff ffffffff ffffffff     ................
  40842c:	ffffffff ffffffff ffffffff ffffffff     ................
  40843c:	ffffffff ffffffff ffffffff ffffffff     ................
  40844c:	ffffffff ffffffff ffffffff ffffffff     ................
  40845c:	ffffffff ffffffff ffffffff ffffffff     ................
  40846c:	ffffffff ffffffff ffffffff ffffffff     ................
  40847c:	ffffffff ffffffff ffffffff ffffffff     ................
  40848c:	ffffffff ffffffff ffffffff ffffffff     ................
  40849c:	0f717171 00000f0f 00000000 00000000     qqq.............
	...
  4084b4:	06000000 6b6b0606 ffffff6b ffffffff     ......kkk.......
  4084c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084d4:	ffffffff 014c4c4c 00000101 00000000     ....LLL.........
	...
  4084f0:	32010101 eded3232 ffffffed ffffffff     ...222..........
  408500:	ffffffff ffffffff ffffffff ffffffff     ................
  408510:	ffffffff ffffffff ffffffff ffffffff     ................
  408520:	ffffffff ffffffff ffffffff ffffffff     ................
  408530:	ffffffff ffffffff ffffffff ffffffff     ................
  408540:	ffffffff ffffffff ffffffff ffffffff     ................
  408550:	ffffffff ffffffff ffffffff ffffffff     ................
  408560:	ffffffff ffffffff ffffffff ffffffff     ................
  408570:	ffffffff ffffffff ffffffff ffffffff     ................
  408580:	ffffffff ffffffff ffffffff ffffffff     ................
  408590:	ffffffff ffffffff ffffffff ffffffff     ................
  4085a0:	ffffffff f0ffffff 3d3df0f0 0101013d     ..........===...
	...
  4085c4:	45454500 ffffffff ffffffff ffffffff     .EEE............
  4085d4:	ffffffff fcfcffff 3d3d3dfc 00000000     .........===....
	...
  4085f4:	0b0b0b00 ff7c7c7c ffffffff ffffffff     ....|||.........
  408604:	ffffffff ffffffff ffffffff ffffffff     ................
  408614:	ffffffff ffffffff ffffffff ffffffff     ................
  408624:	ffffffff ffffffff ffffffff ffffffff     ................
  408634:	ffffffff ffffffff ffffffff ffffffff     ................
  408644:	ffffffff ffffffff ffffffff ffffffff     ................
  408654:	ffffffff ffffffff ffffffff ffffffff     ................
  408664:	ffffffff ffffffff ffffffff ffffffff     ................
  408674:	ffffffff ffffffff ffffffff ffffffff     ................
  408684:	ffffffff ffffffff ffffffff ffffffff     ................
  408694:	ffffffff ffffffff ffffffff ffffffff     ................
  4086a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4086b4:	858585ff 000c0c0c 00000000 00000000     ................
	...
  4086d0:	fc323232 fffffcfc ffffffff f3ffffff     222.............
  4086e0:	2a2af3f3 0000002a 00000000 00000000     ..***...........
	...
  4086f8:	28280000 d7d7d728 ffffffff ffffffff     ..(((...........
  408708:	ffffffff ffffffff ffffffff ffffffff     ................
  408718:	ffffffff ffffffff ffffffff ffffffff     ................
  408728:	ffffffff ffffffff ffffffff ffffffff     ................
  408738:	ffffffff ffffffff ffffffff ffffffff     ................
  408748:	ffffffff ffffffff ffffffff ffffffff     ................
  408758:	ffffffff ffffffff ffffffff ffffffff     ................
  408768:	ffffffff ffffffff ffffffff ffffffff     ................
  408778:	ffffffff ffffffff ffffffff ffffffff     ................
  408788:	ffffffff ffffffff ffffffff ffffffff     ................
  408798:	ffffffff ffffffff ffffffff ffffffff     ................
  4087a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4087b8:	ffffffff ffffffff 27d7d7d7 00002727     ...........'''..
	...
  4087d8:	29000000 f3f32929 fffffff3 1ee4e4e4     ...)))..........
  4087e8:	00001e1e 00000000 00000000 00000000     ................
  4087f8:	00000000 4f010101 ffff4f4f ffffffff     .......OOO......
  408808:	ffffffff ffffffff ffffffff ffffffff     ................
  408818:	ffffffff ffffffff ffffffff ffffffff     ................
  408828:	ffffffff ffffffff ffffffff ffffffff     ................
  408838:	ffffffff ffffffff ffffffff ffffffff     ................
  408848:	ffffffff ffffffff ffffffff ffffffff     ................
  408858:	ffffffff ffffffff ffffffff ffffffff     ................
  408868:	ffffffff ffffffff ffffffff ffffffff     ................
  408878:	ffffffff ffffffff ffffffff ffffffff     ................
  408888:	ffffffff ffffffff ffffffff ffffffff     ................
  408898:	ffffffff ffffffff ffffffff ffffffff     ................
  4088a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4088b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4088c8:	ffffffff 4c4cffff 0101014c 00000000     ......LLL.......
	...
  4088e4:	1e1e0000 e4e4e41e 002e2e2e 00000000     ................
	...
  408900:	04040400 ff737373 ffffffff ffffffff     ....sss.........
  408910:	ffffffff ffffffff ffffffff ffffffff     ................
  408920:	ffffffff ffffffff ffffffff ffffffff     ................
  408930:	ffffffff ffffffff ffffffff ffffffff     ................
  408940:	ffffffff ffffffff ffffffff ffffffff     ................
  408950:	ffffffff ffffffff ffffffff ffffffff     ................
  408960:	ffffffff ffffffff ffffffff ffffffff     ................
  408970:	ffffffff ffffffff ffffffff ffffffff     ................
  408980:	ffffffff ffffffff ffffffff ffffffff     ................
  408990:	ffffffff ffffffff ffffffff ffffffff     ................
  4089a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4089b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4089c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4089d0:	ffffffff ffffffff 707070ff 00040404     .........ppp....
	...
  4089f0:	2e2e2e00 00050505 00000000 00000000     ................
  408a00:	00000000 0b0b0000 9999990b ffffffff     ................
  408a10:	ffffffff ffffffff ffffffff ffffffff     ................
  408a20:	ffffffff ffffffff ffffffff ffffffff     ................
  408a30:	ffffffff ffffffff ffffffff ffffffff     ................
  408a40:	ffffffff ffffffff ffffffff ffffffff     ................
  408a50:	ffffffff ffffffff ffffffff ffffffff     ................
  408a60:	ffffffff ffffffff ffffffff ffffffff     ................
  408a70:	ffffffff ffffffff ffffffff ffffffff     ................
  408a80:	ffffffff ffffffff ffffffff ffffffff     ................
  408a90:	ffffffff ffffffff ffffffff ffffffff     ................
  408aa0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ab0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ac0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ad0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ae0:	ffffffff 0b989898 00000b0b 00000000     ................
	...
  408af8:	06060600 000b0b0b 00000000 00000000     ................
  408b08:	00000000 6d6d0000 ffffff6d ffffffff     ......mmm.......
  408b18:	ffffffff ffffffff ffffffff ffffffff     ................
  408b28:	ffffffff ffffffff ffffffff ffffffff     ................
  408b38:	ffffffff ffffffff ffffffff ffffffff     ................
  408b48:	ffffffff ffffffff ffffffff ffffffff     ................
  408b58:	ffffffff ffffffff ffffffff ffffffff     ................
  408b68:	ffffffff ffffffff ffffffff ffffffff     ................
  408b78:	ffffffff ffffffff ffffffff ffffffff     ................
  408b88:	ffffffff ffffffff ffffffff ffffffff     ................
  408b98:	ffffffff ffffffff ffffffff ffffffff     ................
  408ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  408bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  408bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  408bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  408be8:	ffffffff 6cffffff 00006c6c 00000000     .......lll......
	...
  408c00:	0b0b0b00 00464646 00000000 00000000     ....FFF.........
  408c10:	00000000 13130000 f9f9f913 ffffffff     ................
  408c20:	ffffffff ffffffff ffffffff ffffffff     ................
  408c30:	ffffffff ffffffff ffffffff ffffffff     ................
  408c40:	ffffffff ffffffff ffffffff ffffffff     ................
  408c50:	ffffffff ffffffff ffffffff ffffffff     ................
  408c60:	ffffffff ffffffff ffffffff ffffffff     ................
  408c70:	ffffffff ffffffff ffffffff ffffffff     ................
  408c80:	ffffffff ffffffff ffffffff ffffffff     ................
  408c90:	ffffffff ffffffff ffffffff ffffffff     ................
  408ca0:	ffffffff ffffffff ffffffff ffffffff     ................
  408cb0:	ffffffff ffffffff ffffffff ffffffff     ................
  408cc0:	ffffffff ffffffff ffffffff ffffffff     ................
  408cd0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ce0:	ffffffff ffffffff ffffffff ffffffff     ................
  408cf0:	ffffffff 13f9f9f9 00001313 00000000     ................
	...
  408d08:	46464600 0fededed 00000f0f 00000000     .FFF............
	...
  408d20:	52525200 ffffffff ffffffff ffffffff     .RRR............
  408d30:	ffffffff ffffffff ffffffff ffffffff     ................
  408d40:	ffffffff ffffffff ffffffff ffffffff     ................
  408d50:	ffffffff ffffffff ffffffff ffffffff     ................
  408d60:	ffffffff ffffffff ffffffff ffffffff     ................
  408d70:	ffffffff ffffffff ffffffff ffffffff     ................
  408d80:	ffffffff ffffffff ffffffff ffffffff     ................
  408d90:	ffffffff ffffffff ffffffff ffffffff     ................
  408da0:	ffffffff ffffffff ffffffff ffffffff     ................
  408db0:	ffffffff ffffffff ffffffff ffffffff     ................
  408dc0:	ffffffff ffffffff ffffffff ffffffff     ................
  408dd0:	ffffffff ffffffff ffffffff ffffffff     ................
  408de0:	ffffffff ffffffff ffffffff ffffffff     ................
  408df0:	ffffffff ffffffff ffffffff 00515151     ............QQQ.
	...
  408e0c:	0d0d0000 eaeaea0d 76ffffff 00007676     ...........vvv..
	...
  408e28:	06060600 ffcbcbcb ffffffff ffffffff     ................
  408e38:	ffffffff ffffffff ffffffff ffffffff     ................
  408e48:	ffffffff ffffffff ffffffff ffffffff     ................
  408e58:	ffffffff ffffffff ffffffff ffffffff     ................
  408e68:	ffffffff ffffffff ffffffff ffffffff     ................
  408e78:	ffffffff ffffffff ffffffff ffffffff     ................
  408e88:	ffffffff ffffffff ffffffff ffffffff     ................
  408e98:	ffffffff ffffffff ffffffff ffffffff     ................
  408ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  408eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ef8:	ffffffff ffffffff d0d0d0ff 00060606     ................
	...
  408f14:	71710000 ffffff71 ffffffff 2020ffff     ..qqq.........  
  408f24:	00000020 00000000 00000000 00000000      ...............
  408f34:	ff303030 ffffffff ffffffff ffffffff     000.............
  408f44:	ffffffff ffffffff ffffffff ffffffff     ................
  408f54:	ffffffff ffffffff ffffffff ffffffff     ................
  408f64:	ffffffff ffffffff ffffffff ffffffff     ................
  408f74:	ffffffff ffffffff ffffffff ffffffff     ................
  408f84:	ffffffff ffffffff ffffffff ffffffff     ................
  408f94:	ffffffff ffffffff ffffffff ffffffff     ................
  408fa4:	ffffffff ffffffff ffffffff ffffffff     ................
  408fb4:	ffffffff ffffffff ffffffff ffffffff     ................
  408fc4:	ffffffff ffffffff ffffffff ffffffff     ................
  408fd4:	ffffffff ffffffff ffffffff ffffffff     ................
  408fe4:	ffffffff ffffffff ffffffff ffffffff     ................
  408ff4:	ffffffff ffffffff ffffffff ffffffff     ................
  409004:	ffffffff 2e2e2eff 00000000 00000000     ................
  409014:	00000000 21000000 ffff2121 ffffffff     .......!!!......
  409024:	ffffffff b3b3ffff 030303b3 00000000     ................
	...
  40903c:	93010101 ffff9393 ffffffff ffffffff     ................
  40904c:	ffffffff ffffffff ffffffff ffffffff     ................
  40905c:	ffffffff ffffffff ffffffff ffffffff     ................
  40906c:	ffffffff ffffffff ffffffff ffffffff     ................
  40907c:	ffffffff ffffffff ffffffff ffffffff     ................
  40908c:	ffffffff ffffffff ffffffff ffffffff     ................
  40909c:	ffffffff ffffffff ffffffff ffffffff     ................
  4090ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4090bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4090cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4090dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4090ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4090fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40910c:	9191ffff 01010191 00000000 00000000     ................
  40911c:	00000000 ad030303 ffffadad ffffffff     ................
  40912c:	ffffffff ffffffff 3d3d3dff 00000000     .........===....
	...
  409144:	17000000 fcfc1717 fffffffc ffffffff     ................
  409154:	ffffffff ffffffff ffffffff ffffffff     ................
  409164:	ffffffff ffffffff ffffffff ffffffff     ................
  409174:	ffffffff ffffffff ffffffff 32dfdfdf     ...............2
  409184:	4e4e3232 ffffff4e ffffffff ffffffff     22NNN...........
  409194:	ffffffff ffffffff ffffffff ffffffff     ................
  4091a4:	ffffffff f6f6ffff 3d3d3df6 f63d3d3d     .........======.
  4091b4:	fffff6f6 ffffffff ffffffff ffffffff     ................
  4091c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4091d4:	4fffffff 32324f4f dfdfdf32 ffffffff     ...OOO222.......
  4091e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4091f4:	ffffffff ffffffff ffffffff ffffffff     ................
  409204:	ffffffff ffffffff ffffffff fcffffff     ................
  409214:	1717fcfc 00000017 00000000 00000000     ................
  409224:	00000000 ff3d3d3d ffffffff ffffffff     ....===.........
  409234:	ffffffff ffffffff e7e7e7ff 000c0c0c     ................
	...
  409250:	5b5b0000 ffffff5b ffffffff ffffffff     ..[[[...........
  409260:	ffffffff ffffffff ffffffff ffffffff     ................
  409270:	ffffffff ffffffff ffffffff ffffffff     ................
  409280:	ffffffff e2e2e2ff 00181818 00000000     ................
  409290:	36363600 ffffffff ffffffff ffffffff     .666............
  4092a0:	ffffffff ffffffff ffffffff f6ffffff     ................
  4092b0:	2727f6f6 00000027 23000000 f3f32323     ..'''......###..
  4092c0:	fffffff3 ffffffff ffffffff ffffffff     ................
  4092d0:	ffffffff ffffffff ffffffff 003d3d3d     ............===.
  4092e0:	00000000 17171700 ffdcdcdc ffffffff     ................
  4092f0:	ffffffff ffffffff ffffffff ffffffff     ................
  409300:	ffffffff ffffffff ffffffff ffffffff     ................
  409310:	ffffffff ffffffff 5affffff 00005a5a     ...........ZZZ..
	...
  40932c:	0a0a0a00 ffe2e2e2 ffffffff ffffffff     ................
  40933c:	ffffffff ffffffff ffffffff 00696969     ............iii.
	...
  409358:	07070000 d5d5d507 ffffffff ffffffff     ................
  409368:	ffffffff ffffffff ffffffff ffffffff     ................
  409378:	ffffffff ffffffff ffffffff ffffffff     ................
  409388:	e2e2ffff 181818e2 00000000 00000000     ................
  409398:	00000000 ff373737 ffffffff ffffffff     ....777.........
  4093a8:	ffffffff ffffffff ffffffff 27f6f6f6     ...............'
  4093b8:	00002727 00000000 00000000 23230000     ''............##
  4093c8:	f3f3f323 ffffffff ffffffff ffffffff     #...............
  4093d8:	ffffffff ffffffff 3d3d3dff 00000000     .........===....
	...
  4093f0:	dc171717 ffffdcdc ffffffff ffffffff     ................
  409400:	ffffffff ffffffff ffffffff ffffffff     ................
  409410:	ffffffff ffffffff ffffffff ffffffff     ................
  409420:	09dadada 00000909 00000000 00000000     ................
  409430:	00000000 6b6b6b00 ffffffff ffffffff     .....kkk........
  409440:	ffffffff ffffffff ffffffff ffffffff     ................
  409450:	1dffffff 00001d1d 00000000 00000000     ................
  409460:	00000000 34343400 ffffffff ffffffff     .....444........
  409470:	ffffffff ffffffff ffffffff ffffffff     ................
  409480:	ffffffff ffffffff ffffffff e2ffffff     ................
  409490:	1818e2e2 00000018 00000000 00000000     ................
  4094a0:	00000000 37000000 ffff3737 ffffffff     .......777......
  4094b0:	ffffffff ffffffff f6f6f6ff 00272727     ............'''.
	...
  4094d0:	23232300 fff3f3f3 ffffffff ffffffff     .###............
  4094e0:	ffffffff 3d3dffff 0000003d 00000000     ......===.......
	...
  4094f8:	17000000 dcdc1717 ffffffdc ffffffff     ................
  409508:	ffffffff ffffffff ffffffff ffffffff     ................
  409518:	ffffffff ffffffff ffffffff ffffffff     ................
  409528:	00343434 00000000 00000000 00000000     444.............
  409538:	1b1b0000 ffffff1b ffffffff ffffffff     ................
  409548:	ffffffff ffffffff ffffffff ffffffff     ................
  409558:	a8ffffff 0202a8a8 00000002 00000000     ................
  409568:	00000000 01010100 ff999999 ffffffff     ................
  409578:	ffffffff ffffffff ffffffff ffffffff     ................
  409588:	ffffffff ffffffff ffffffff 1ae2e2e2     ................
  409598:	00001a1a 00000000 00000000 00000000     ................
	...
  4095b0:	3d3d0000 ffffff3d ffffffff f6f6ffff     ..===...........
  4095c0:	272727f6 00000000 00000000 00000000     .'''............
	...
  4095dc:	f3232323 fffff3f3 ffffffff 3dffffff     ###............=
  4095ec:	00003d3d 00000000 00000000 00000000     ==..............
	...
  409604:	17170000 dcdcdc17 ffffffff ffffffff     ................
  409614:	ffffffff ffffffff ffffffff ffffffff     ................
  409624:	ffffffff ffffffff 9e9e9eff 00020202     ................
	...
  40963c:	02000000 a2a20202 ffffffa2 ffffffff     ................
  40964c:	ffffffff ffffffff ffffffff ffffffff     ................
  40965c:	ffffffff ffffffff 3838ffff 00000038     ..........888...
	...
  409678:	ff1a1a1a ffffffff ffffffff ffffffff     ................
  409688:	ffffffff ffffffff ffffffff ffffffff     ................
  409698:	f6f6f6ff 00181818 00000000 00000000     ................
	...
  4096bc:	45454500 ffffffff 2b2bffff 0000002b     .EEE......+++...
	...
  4096e4:	2b000000 ffff2b2b ffffffff 00444444     ...+++......DDD.
	...
  409710:	1a1a1a00 fff6f6f6 ffffffff ffffffff     ................
  409720:	ffffffff ffffffff ffffffff ffffffff     ................
  409730:	ffffffff 1a1a1aff 00000000 00000000     ................
  409740:	00000000 38000000 ffff3838 ffffffff     .......888......
  409750:	ffffffff ffffffff ffffffff ffffffff     ................
  409760:	ffffffff ffffffff ffffffff dcdcffff     ................
  409770:	0a0a0adc 00000000 00000000 00000000     ................
  409780:	65000000 ffff6565 ffffffff ffffffff     ...eee..........
  409790:	ffffffff ffffffff ffffffff ffffffff     ................
  4097a0:	999999ff 00000000 00000000 00000000     ................
	...
  4097c4:	0b0b0b00 e4ffffff 0101e4e4 00000001     ................
	...
  4097ec:	01000000 eaea0101 ffffffea 000b0b0b     ................
	...
  40981c:	ff9e9e9e ffffffff ffffffff ffffffff     ................
  40982c:	ffffffff ffffffff ffffffff 6464ffff     ..............dd
  40983c:	00000064 00000000 00000000 00000000     d...............
  40984c:	dc0a0a0a ffffdcdc ffffffff ffffffff     ................
  40985c:	ffffffff ffffffff ffffffff ffffffff     ................
  40986c:	ffffffff ffffffff ffffffff 5f5f5fff     .............___
	...
  409888:	0a000000 e2e20a0a ffffffe2 ffffffff     ................
  409898:	ffffffff ffffffff ffffffff ffffffff     ................
  4098a8:	ffffffff 2c4d4d4d 2c2c2c2c 0d0d0d2c     ....MMM,,,,,,...
	...
  4098c4:	27000000 2e2e2727 7b7b7b2e ffffffff     ...'''...{{{....
  4098d4:	6262ffff 2c2c2c62 0a2c2c2c 00000a0a     ..bbb,,,,,,.....
	...
  4098f0:	2b2b2b00 642c2c2c ffff6464 ffffffff     .+++,,,ddd......
  409900:	2e7a7a7a 2c2c2e2e 0707072c 00000000     zzz...,,,.......
	...
  409918:	2c030303 2c2c2c2c 4f4f4f2c ffffffff     ...,,,,,,OOO....
  409928:	ffffffff ffffffff ffffffff ffffffff     ................
  409938:	ffffffff e2ffffff 0a0ae2e2 0000000a     ................
	...
  409954:	ff5f5f5f ffffffff ffffffff ffffffff     ___.............
  409964:	ffffffff ffffffff ffffffff ffffffff     ................
  409974:	ffffffff ffffffff ffffffff ffffffff     ................
  409984:	00181818 00000000 00000000 00000000     ................
  409994:	3b3b0000 ffffff3b ffffffff ffffffff     ..;;;...........
  4099a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4099b4:	ffffffff ffffffff 525252ff 00000000     .........RRR....
	...
  4099cc:	69000000 ffff6969 ffffffff ffffffff     ...iii..........
  4099dc:	ffffffff ffffffff 41ffffff 00004141     ...........AAA..
	...
  4099f8:	85858500 ffffffff ffffffff ffffffff     ................
  409a08:	ffffffff ffffffff 323232ff 00000000     .........222....
	...
  409a20:	a5000000 ffffa5a5 ffffffff ffffffff     ................
  409a30:	ffffffff ffffffff ffffffff ffffffff     ................
  409a40:	ffffffff 3affffff 00003a3a 00000000     .......:::......
	...
  409a58:	17171700 fffcfcfc ffffffff ffffffff     ................
  409a68:	ffffffff ffffffff ffffffff ffffffff     ................
  409a78:	ffffffff ffffffff ffffffff ffffffff     ................
  409a88:	ffffffff 01999999 00000101 00000000     ................
  409a98:	00000000 03030000 a9a9a903 ffffffff     ................
  409aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  409ab8:	ffffffff ffffffff ffffffff c9c9c9ff     ................
  409ac8:	00010101 00000000 00000000 2c000000     ...............,
  409ad8:	ffff2c2c ffffffff ffffffff ffffffff     ,,..............
  409ae8:	ffffffff a8ffffff 0000a8a8 00000000     ................
	...
  409b00:	3a3a3a00 ffffffff ffffffff ffffffff     .:::............
  409b10:	ffffffff ffffffff 848484ff 00000000     ................
	...
  409b28:	4a000000 ffff4a4a ffffffff ffffffff     ...JJJ..........
  409b38:	ffffffff ffffffff ffffffff ffffffff     ................
  409b48:	ffffffff 03a9a9a9 00000303 00000000     ................
  409b58:	00000000 01010000 99999901 dfffffff     ................
  409b68:	b1b1dfdf ffffffb1 ffffffff ffffffff     ................
  409b78:	ffffffff ffffffff ffffffff ffffffff     ................
  409b88:	ffffffff ffffffff ffffffff 32ffffff     ...............2
  409b98:	00003232 00000000 00000000 00000000     22..............
  409ba8:	1e1e1e00 ffffffff ffffffff ffffffff     ................
  409bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  409bc8:	ffffffff ffffffff 001b1b1b 00000000     ................
  409bd8:	00000000 11000000 ffff1111 ffffffff     ................
  409be8:	ffffffff ffffffff ffffffff ffffffff     ................
  409bf8:	1111ffff 00000011 00000000 00000000     ................
  409c08:	1a1a1a00 ffffffff ffffffff ffffffff     ................
  409c18:	ffffffff ffffffff fcfcfcff 000a0a0a     ................
	...
  409c30:	25000000 ffff2525 ffffffff ffffffff     ...%%%..........
  409c40:	ffffffff ffffffff ffffffff ffffffff     ................
  409c50:	ffffffff 001e1e1e 00000000 00000000     ................
  409c60:	00000000 32320000 ffffff32 092c2c2c     ......222...,,,.
  409c70:	09090909 0d0d0d09 ff989898 ffffffff     ................
  409c80:	ffffffff ffffffff ffffffff ffffffff     ................
  409c90:	ffffffff ffffffff ffffffff d2ffffff     ................
  409ca0:	0707d2d2 00000007 00000000 00000000     ................
  409cb0:	00000000 ff6f6f6f ffffffff ffffffff     ....ooo.........
  409cc0:	ffffffff ffffffff ffffffff ffffffff     ................
  409cd0:	ffffffff ffffffff 00424242 00000000     ........BBB.....
  409ce0:	00000000 01000000 eaea0101 ffffffea     ................
  409cf0:	ffffffff ffffffff ffffffff ffffffff     ................
  409d00:	3434ffff 00000034 00000000 00000000     ..444...........
  409d10:	06060600 ffffffff ffffffff ffffffff     ................
  409d20:	ffffffff ffffffff ffffffff 00272727     ............'''.
	...
  409d38:	0f000000 ffff0f0f ffffffff ffffffff     ................
  409d48:	ffffffff ffffffff ffffffff ffffffff     ................
  409d58:	6d6d6dff 00000000 00000000 00000000     .mmm............
  409d68:	07000000 d2d20707 5a5a5ad2 00040404     .........ZZZ....
	...
  409d80:	ff0f0f0f ffffffff ffffffff ffffffff     ................
  409d90:	ffffffff ffffffff ffffffff ffffffff     ................
  409da0:	ffffffff ffffffff 5757ffff 00000057     ..........WWW...
	...
  409dbc:	ea0c0c0c ffffeaea ffffffff ffffffff     ................
  409dcc:	ffffffff ffffffff ffffffff ffffffff     ................
  409ddc:	ffffffff 006c6c6c 00000000 00000000     ....lll.........
  409dec:	00000000 b9b90000 ffffffb9 ffffffff     ................
  409dfc:	ffffffff ffffffff ffffffff 5757ffff     ..............WW
  409e0c:	00000057 00000000 00000000 00000000     W...............
  409e1c:	fff0f0f0 ffffffff ffffffff ffffffff     ................
  409e2c:	ffffffff ffffffff 00444444 00000000     ........DDD.....
  409e3c:	00000000 05000000 ffff0505 ffffffff     ................
  409e4c:	ffffffff ffffffff ffffffff ffffffff     ................
  409e5c:	eaeaffff 0c0c0cea 00000000 00000000     ................
  409e6c:	00000000 57000000 ffff5757 1d1d1dff     .......WWW......
	...
  409e88:	04000000 05050404 05050505 ffffffff     ................
  409e98:	ffffffff ffffffff ffffffff ffffffff     ................
  409ea8:	ffffffff ffffffff fcfcffff 151515fc     ................
	...
  409ec4:	41000000 ffff4141 ffffffff ffffffff     ...AAA..........
  409ed4:	ffffffff ffffffff ffffffff ffffffff     ................
  409ee4:	ffffffff 00848484 00000000 00000000     ................
  409ef4:	00000000 9d9d0000 ffffff9d ffffffff     ................
  409f04:	ffffffff ffffffff ffffffff 6969ffff     ..............ii
  409f14:	00000069 00000000 00000000 00000000     i...............
  409f24:	ffc6c6c6 ffffffff ffffffff ffffffff     ................
  409f34:	ffffffff ffffffff 00545454 00000000     ........TTT.....
	...
  409f4c:	fcfc0000 fffffffc ffffffff ffffffff     ................
  409f5c:	ffffffff ffffffff 4040ffff 00000040     ..........@@@...
	...
  409f78:	fc151515 fffffcfc 303030ff 00000000     .........000....
	...
  409f90:	4d050505 52524d4d 52525252 ffffffff     ...MMMRRRRRR....
  409fa0:	ffffffff ffffffff ffffffff ffffffff     ................
  409fb0:	ffffffff ffffffff ffffffff 8f8f8fff     ................
  409fc0:	00010101 00000000 00000000 03000000     ................
  409fd0:	b1b10303 ffffffb1 ffffffff ffffffff     ................
  409fe0:	ffffffff ffffffff ffffffff ffffffff     ................
  409ff0:	00747474 00000000 00000000 00000000     ttt.............
  40a000:	b3b30000 ffffffb3 ffffffff ffffffff     ................
  40a010:	ffffffff ffffffff 5c5cffff 0000005c     ..........\\\...
	...
  40a02c:	ffe4e4e4 ffffffff ffffffff ffffffff     ................
  40a03c:	ffffffff ffffffff 00494949 00000000     ........III.....
  40a04c:	00000000 03000000 ffff0303 ffffffff     ................
  40a05c:	ffffffff ffffffff ffffffff b7ffffff     ................
  40a06c:	0303b7b7 00000003 00000000 00000000     ................
  40a07c:	01010100 ff898989 ffffffff c2c2c2ff     ................
  40a08c:	000b0b0b 00000000 05050500 ff303030     ............000.
  40a09c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0bc:	ffffffff ffffffff ffffffff 002c2c2c     ............,,,.
	...
  40a0d8:	23230000 ffffff23 ffffffff ffffffff     ..###...........
  40a0e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0f8:	004f4f4f 00000000 00000000 00000000     OOO.............
  40a108:	dcdc0000 ffffffdc ffffffff ffffffff     ................
  40a118:	ffffffff ffffffff 3d3dffff 0000003d     ..........===...
	...
  40a130:	03030300 ffffffff ffffffff ffffffff     ................
  40a140:	ffffffff ffffffff ffffffff 00303030     ............000.
	...
  40a158:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40a168:	ffffffff ffffffff 23ffffff 00002323     ...........###..
	...
  40a184:	2c2c2c00 ffffffff ffffffff ffffffff     .,,,............
  40a194:	30c2c2c2 1e1e3030 6161611e ffffffff     ...000...aaa....
  40a1a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1c4:	ffffffff ffffffff ffffffff 06c9c9c9     ................
  40a1d4:	00000606 00000000 00000000 00000000     ................
  40a1e4:	78787800 ffffffff ffffffff ffffffff     .xxx............
  40a1f4:	ffffffff ffffffff ffffffff 00272727     ............'''.
	...
  40a20c:	0b000000 ffff0b0b ffffffff ffffffff     ................
  40a21c:	ffffffff ffffffff ffffffff 1c1cffff     ................
  40a22c:	0000001c 00000000 00000000 14141400     ................
  40a23c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a24c:	ffffffff ffffffff 00131313 00000000     ................
  40a25c:	00000000 1d000000 ffff1d1d ffffffff     ................
  40a26c:	ffffffff ffffffff ffffffff 00777777     ............www.
	...
  40a288:	06060000 c9c9c906 ffffffff ffffffff     ................
  40a298:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2d8:	4effffff 00004e4e 00000000 00000000     ...NNN..........
  40a2e8:	00000000 0f0f0f00 fff0f0f0 ffffffff     ................
  40a2f8:	ffffffff ffffffff ffffffff edededff     ................
  40a308:	00050505 00000000 00000000 21000000     ...............!
  40a318:	ffff2121 ffffffff ffffffff ffffffff     !!..............
  40a328:	ffffffff d0ffffff 0202d0d0 00000002     ................
	...
  40a340:	2e2e2e00 ffffffff ffffffff ffffffff     ................
  40a350:	ffffffff ffffffff afafafff 00000000     ................
	...
  40a368:	3c000000 ffff3c3c ffffffff ffffffff     ...<<<..........
  40a378:	ffffffff f0f0f0ff 000f0f0f 00000000     ................
	...
  40a390:	4e4e0000 ffffff4e ffffffff ffffffff     ..NNN...........
  40a3a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3e0:	f6ffffff 1111f6f6 00000011 00000000     ................
	...
  40a3f8:	ff494949 ffffffff ffffffff ffffffff     III.............
  40a408:	ffffffff 6b6b6bff 00000000 00000000     .....kkk........
  40a418:	00000000 57000000 ffff5757 ffffffff     .......WWW......
  40a428:	ffffffff ffffffff ffffffff 55ffffff     ...............U
  40a438:	00005555 00000000 00000000 00000000     UU..............
  40a448:	6f6f6f00 ffffffff ffffffff ffffffff     .ooo............
  40a458:	ffffffff ffffffff 444444ff 00000000     .........DDD....
	...
  40a470:	8a000000 ffff8a8a ffffffff ffffffff     ................
  40a480:	ffffffff 474747ff 00000000 00000000     .....GGG........
  40a490:	00000000 10000000 f3f31010 fffffff3     ................
  40a4a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4e0:	ffffffff ffffffff ffffffff 8181ffff     ................
  40a4f0:	00000081 00000000 00000000 00000000     ................
  40a500:	bf050505 ffffbfbf ffffffff ffffffff     ................
  40a510:	ffffffff 272727ff 00000000 00000000     .....'''........
  40a520:	00000000 d0020202 ffffd0d0 ffffffff     ................
  40a530:	ffffffff ffffffff ffffffff 1dffffff     ................
  40a540:	00001d1d 00000000 00000000 05050000     ................
  40a550:	ededed05 ffffffff ffffffff ffffffff     ................
  40a560:	ffffffff ffffffff 131313ff 00000000     ................
	...
  40a578:	fc0b0b0b fffffcfc ffffffff ffffffff     ................
  40a588:	bfbfffff 040404bf 00000000 00000000     ................
  40a598:	00000000 81000000 ffff8181 ffffffff     ................
  40a5a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5f8:	272727ff 00000000 00000000 00000000     .'''............
  40a608:	28000000 ffff2828 ffffffff ffffffff     ...(((..........
  40a618:	eaeaffff 050505ea 00000000 00000000     ................
  40a628:	00000000 ff1d1d1d ffffffff ffffffff     ................
  40a638:	ffffffff ffffffff ffffffff 02d0d0d0     ................
  40a648:	00000202 00000000 00000000 28280000     ..............((
  40a658:	ffffff28 ffffffff ffffffff ffffffff     (...............
  40a668:	ffffffff adadffff 000000ad 00000000     ................
	...
  40a680:	ff363636 ffffffff ffffffff ffffffff     666.............
  40a690:	2727ffff 00000027 00000000 00000000     ..'''...........
  40a6a0:	00000000 ff272727 ffffffff ffffffff     ....'''.........
  40a6b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a700:	bdbdbdff 00040404 00000000 00000000     ................
  40a710:	00000000 84840000 ffffff84 ffffffff     ................
  40a720:	6c6cffff 0000006c 00000000 00000000     ..lll...........
  40a730:	00000000 ff575757 ffffffff ffffffff     ....WWW.........
  40a740:	ffffffff ffffffff ffffffff 00575757     ............WWW.
	...
  40a75c:	6c6c0000 ffffff6c ffffffff ffffffff     ..lll...........
  40a76c:	ffffffff ffffffff 4444ffff 00000044     ..........DDD...
	...
  40a788:	ff898989 ffffffff ffffffff 84ffffff     ................
  40a798:	00008484 00000000 00000000 00000000     ................
  40a7a8:	04040400 ffbdbdbd ffffffff ffffffff     ................
  40a7b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a808:	ffffffff 00464646 00000000 00000000     ....FFF.........
  40a818:	00000000 11110000 f6f6f611 ffffffff     ................
  40a828:	2727ffff 00000027 00000000 00000000     ..'''...........
  40a838:	02020200 ffcdcdcd ffffffff ffffffff     ................
  40a848:	ffffffff ffffffff ffffffff 001c1c1c     ................
	...
  40a860:	05000000 eded0505 ffffffed ffffffff     ................
  40a870:	ffffffff ffffffff ffffffff 1313ffff     ................
  40a880:	00000013 00000000 00000000 0b0b0b00     ................
  40a890:	fffcfcfc ffffffff ffffffff 14f9f9f9     ................
  40a8a0:	00001414 00000000 00000000 00000000     ................
  40a8b0:	47474700 ffffffff ffffffff ffffffff     .GGG............
  40a8c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a900:	ffffffff ffffffff ffffffff ffffffff     ................
  40a910:	ffffffff 0ff0f0f0 00000f0f 00000000     ................
	...
  40a928:	4f4f4f00 ffffffff 0606ffff 00000006     .OOO............
	...
  40a940:	1e1e1e00 ffffffff ffffffff ffffffff     ................
  40a950:	ffffffff ffffffff e4e4e4ff 00020202     ................
	...
  40a968:	28000000 ffff2828 ffffffff ffffffff     ...(((..........
  40a978:	ffffffff ffffffff bdffffff 0000bdbd     ................
	...
  40a994:	36363600 ffffffff ffffffff ffffffff     .666............
  40a9a4:	004f4f4f 00000000 00000000 00000000     OOO.............
  40a9b4:	0f0f0000 f0f0f00f ffffffff ffffffff     ................
  40a9c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa04:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa14:	ffffffff ffffffff 76ffffff 00007676     ...........vvv..
	...
  40aa30:	06060600 b5cbcbcb 0000b5b5 00000000     ................
	...
  40aa48:	57575700 ffffffff ffffffff ffffffff     .WWW............
  40aa58:	ffffffff ffffffff 8f8f8fff 00000000     ................
	...
  40aa70:	6d000000 ffff6d6d ffffffff ffffffff     ...mmm..........
  40aa80:	ffffffff ffffffff 73ffffff 00007373     ...........sss..
	...
  40aa9c:	89898900 ffffffff ffffffff cbcbcbff     ................
  40aaac:	00060606 00000000 00000000 00000000     ................
  40aabc:	76760000 ffffff76 ffffffff ffffffff     ..vvv...........
  40aacc:	ffffffff ffffffff ffffffff ffffffff     ................
  40aadc:	ffffffff ffffffff ffffffff ffffffff     ................
  40aaec:	ffffffff ffffffff ffffffff ffffffff     ................
  40aafc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab1c:	ffffffff ffffffff ffffffff 2121ffff     ..............!!
  40ab2c:	00000021 00000000 00000000 00000000     !...............
  40ab3c:	6f2e2e2e 00006f6f 00000000 00000000     ...ooo..........
  40ab4c:	00000000 a8a8a800 ffffffff ffffffff     ................
  40ab5c:	ffffffff ffffffff ffffffff 585858ff     .............XXX
	...
  40ab78:	d0000000 ffffd0d0 ffffffff ffffffff     ................
  40ab88:	ffffffff ffffffff 46ffffff 00004646     ...........FFF..
	...
  40aba0:	03030000 f3f3f303 ffffffff ffffffff     ................
  40abb0:	2c2c2cff 00000000 00000000 00000000     .,,,............
  40abc0:	22000000 ffff2222 ffffffff ffffffff     ..."""..........
  40abd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40abe0:	ffffffff ffffffff ffffffff ffffffff     ................
  40abf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac30:	b3b3ffff 030303b3 00000000 00000000     ................
  40ac40:	00000000 0f010101 00000f0f 00000000     ................
	...
  40ac58:	1a1a1a00 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
  40ac68:	1a1a1a1a 1a1a1a1a 0c0c0c1a 00000000     ................
	...
  40ac80:	1a010101 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
  40ac90:	1a1a1a1a 1a1a1a1a 0a1a1a1a 00000a0a     ................
	...
  40aca8:	03030000 1a1a1a03 1a1a1a1a 1a1a1a1a     ................
  40acb8:	0101011a 00000000 00000000 00000000     ................
  40acc8:	b3030303 ffffb3b3 ffffffff ffffffff     ................
  40acd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ace8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad08:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad18:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad38:	ffffffff 3f3f3fff 00000000 00000000     .....???........
	...
  40add0:	ff3f3f3f ffffffff ffffffff ffffffff     ???.............
  40ade0:	ffffffff ffffffff ffffffff ffffffff     ................
  40adf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae40:	ffffffff eaeaeaff 000d0d0d 00000000     ................
	...
  40aed4:	0c0c0c00 ffe7e7e7 ffffffff ffffffff     ................
  40aee4:	ffffffff ffffffff ffffffff ffffffff     ................
  40aef4:	ffffffff ffffffff ffffffff ffffffff     ................
  40af04:	ffffffff ffffffff ffffffff ffffffff     ................
  40af14:	ffffffff ffffffff ffffffff ffffffff     ................
  40af24:	ffffffff ffffffff ffffffff ffffffff     ................
  40af34:	ffffffff ffffffff ffffffff ffffffff     ................
  40af44:	ffffffff ffffffff ffffffff 006b6b6b     ............kkk.
	...
  40afdc:	6c6c6c00 ffffffff ffffffff ffffffff     .lll............
  40afec:	ffffffff ffffffff ffffffff ffffffff     ................
  40affc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b00c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b01c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b02c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b03c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b04c:	ffffffff ffffffff ffffffff 23ffffff     ...............#
  40b05c:	00002323 00000000 00000000 00000000     ##..............
	...
  40b0e0:	23230000 ffffff23 ffffffff ffffffff     ..###...........
  40b0f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b100:	ffffffff ffffffff ffffffff ffffffff     ................
  40b110:	ffffffff ffffffff ffffffff ffffffff     ................
  40b120:	ffffffff ffffffff ffffffff ffffffff     ................
  40b130:	ffffffff ffffffff ffffffff ffffffff     ................
  40b140:	ffffffff ffffffff ffffffff ffffffff     ................
  40b150:	ffffffff ffffffff ffffffff ffffffff     ................
  40b160:	edffffff 4949eded 25252549 23232323     ......III%%%####
  40b170:	04042323 00000004 00000000 00000000     ##..............
  40b180:	05050500 23232323 23232323 23232323     ....############
  40b190:	23232323 23232323 23232323 00020202     ############....
	...
  40b1a8:	09000000 23230909 23232323 23232323     ......##########
  40b1b8:	23232323 23232323 21232323 00002121     ###########!!!..
	...
  40b1d4:	0b0b0b00 23232323 23232323 23232323     ....############
  40b1e4:	49252525 f0f04949 fffffff0 ffffffff     %%%III..........
  40b1f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b204:	ffffffff ffffffff ffffffff ffffffff     ................
  40b214:	ffffffff ffffffff ffffffff ffffffff     ................
  40b224:	ffffffff ffffffff ffffffff ffffffff     ................
  40b234:	ffffffff ffffffff ffffffff ffffffff     ................
  40b244:	ffffffff ffffffff ffffffff ffffffff     ................
  40b254:	ffffffff ffffffff ffffffff ffffffff     ................
  40b264:	ffffffff ffffffff ffffffff ffffffff     ................
  40b274:	ffffffff 2a2affff 0000002a 00000000     ......***.......
  40b284:	00000000 02020200 ffcdcdcd ffffffff     ................
  40b294:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2a4:	001e1e1e 00000000 00000000 05000000     ................
  40b2b4:	eaea0505 ffffffea ffffffff ffffffff     ................
  40b2c4:	ffffffff ffffffff 1414ffff 00000014     ................
	...
  40b2dc:	0b0b0b00 fffcfcfc ffffffff ffffffff     ................
  40b2ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b30c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b31c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b32c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b33c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b34c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b35c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b36c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b37c:	ffffffff 7171ffff 00000071 00000000     ......qqq.......
	...
  40b394:	ff525252 ffffffff ffffffff ffffffff     RRR.............
  40b3a4:	ffffffff ffffffff 005a5a5a 00000000     ........ZZZ.....
	...
  40b3bc:	68680000 ffffff68 ffffffff ffffffff     ..hhh...........
  40b3cc:	ffffffff ffffffff 4747ffff 00000047     ..........GGG...
	...
  40b3e8:	ff848484 ffffffff ffffffff ffffffff     ................
  40b3f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b408:	ffffffff ffffffff ffffffff ffffffff     ................
  40b418:	ffffffff ffffffff ffffffff ffffffff     ................
  40b428:	ffffffff ffffffff ffffffff ffffffff     ................
  40b438:	ffffffff ffffffff ffffffff ffffffff     ................
  40b448:	ffffffff ffffffff ffffffff ffffffff     ................
  40b458:	ffffffff ffffffff ffffffff ffffffff     ................
  40b468:	ffffffff ffffffff ffffffff ffffffff     ................
  40b478:	ffffffff ffffffff ffffffff ffffffff     ................
  40b488:	f0f0ffff 060606f0 00000000 00000000     ................
  40b498:	00000000 ff1b1b1b ffffffff ffffffff     ................
  40b4a8:	ffffffff ffffffff ffffffff 03d7d7d7     ................
  40b4b8:	00000303 00000000 00000000 25250000     ..............%%
  40b4c8:	ffffff25 ffffffff ffffffff ffffffff     %...............
  40b4d8:	ffffffff b5b5ffff 000000b5 00000000     ................
	...
  40b4f0:	ff323232 ffffffff ffffffff ffffffff     222.............
  40b500:	ffffffff ffffffff ffffffff ffffffff     ................
  40b510:	ffffffff ffffffff ffffffff ffffffff     ................
  40b520:	ffffffff ffffffff ffffffff ffffffff     ................
  40b530:	ffffffff ffffffff ffffffff ffffffff     ................
  40b540:	ffffffff ffffffff ffffffff ffffffff     ................
  40b550:	ffffffff ffffffff ffffffff ffffffff     ................
  40b560:	ffffffff ffffffff ffffffff ffffffff     ................
  40b570:	ffffffff ffffffff ffffffff ffffffff     ................
  40b580:	ffffffff ffffffff ffffffff ffffffff     ................
  40b590:	ffffffff 2a2a2aff 00000000 00000000     .....***........
  40b5a0:	00000000 c9010101 ffffc9c9 ffffffff     ................
  40b5b0:	ffffffff ffffffff ffffffff 1effffff     ................
  40b5c0:	00001e1e 00000000 00000000 04040000     ................
  40b5d0:	e7e7e704 ffffffff ffffffff ffffffff     ................
  40b5e0:	ffffffff ffffffff 151515ff 00000000     ................
	...
  40b5f8:	f90a0a0a fffff9f9 ffffffff ffffffff     ................
  40b608:	ffffffff ffffffff ffffffff ffffffff     ................
  40b618:	ffffffff ffffffff ffffffff ffffffff     ................
  40b628:	ffffffff ffffffff ffffffff ffffffff     ................
  40b638:	ffffffff ffffffff ffffffff ffffffff     ................
  40b648:	ffffffff ffffffff ffffffff ffffffff     ................
  40b658:	ffffffff ffffffff ffffffff ffffffff     ................
  40b668:	ffffffff ffffffff ffffffff ffffffff     ................
  40b678:	ffffffff ffffffff ffffffff ffffffff     ................
  40b688:	ffffffff ffffffff ffffffff ffffffff     ................
  40b698:	ffffffff 737373ff 00000000 00000000     .....sss........
  40b6a8:	00000000 52000000 ffff5252 ffffffff     .......RRR......
  40b6b8:	ffffffff ffffffff ffffffff 5bffffff     ...............[
  40b6c8:	00005b5b 00000000 00000000 00000000     [[..............
  40b6d8:	68686800 ffffffff ffffffff ffffffff     .hhh............
  40b6e8:	ffffffff ffffffff 474747ff 00000000     .........GGG....
	...
  40b700:	82000000 ffff8282 ffffffff ffffffff     ................
  40b710:	ffffffff ffffffff ffffffff ffffffff     ................
  40b720:	ffffffff ffffffff ffffffff ffffffff     ................
  40b730:	ffffffff ffffffff ffffffff ffffffff     ................
  40b740:	ffffffff ffffffff ffffffff ffffffff     ................
  40b750:	ffffffff ffffffff ffffffff ffffffff     ................
  40b760:	ffffffff ffffffff ffffffff ffffffff     ................
  40b770:	ffffffff ffffffff ffffffff ffffffff     ................
  40b780:	ffffffff ffffffff ffffffff ffffffff     ................
  40b790:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7a0:	ffffffff f0f0f0ff 00060606 00000000     ................
  40b7b0:	00000000 20000000 ffff2020 ffffffff     .......   ......
  40b7c0:	ffffffff ffffffff ffffffff d7ffffff     ................
  40b7d0:	0303d7d7 00000003 00000000 00000000     ................
  40b7e0:	2c2c2c00 ffffffff ffffffff ffffffff     .,,,............
  40b7f0:	ffffffff ffffffff b5b5b5ff 00000000     ................
	...
  40b808:	3a000000 ffff3a3a ffffffff ffffffff     ...:::..........
  40b818:	ffffffff ffffffff ffffffff ffffffff     ................
  40b828:	ffffffff ffffffff ffffffff ffffffff     ................
  40b838:	ffffffff ffffffff ffffffff ffffffff     ................
  40b848:	ffffffff ffffffff ffffffff ffffffff     ................
  40b858:	ffffffff ffffffff ffffffff ffffffff     ................
  40b868:	ffffffff ffffffff ffffffff ffffffff     ................
  40b878:	ffffffff ffffffff ffffffff ffffffff     ................
  40b888:	ffffffff ffffffff ffffffff ffffffff     ................
  40b898:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8a8:	ffffffff ffffffff 00292929 00000000     ........))).....
  40b8b8:	00000000 0a000000 ffff0a0a ffffffff     ................
  40b8c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8d8:	1e1effff 0000001e 00000000 00000000     ................
  40b8e8:	13131300 ffffffff ffffffff ffffffff     ................
  40b8f8:	ffffffff ffffffff ffffffff 00141414     ................
	...
  40b910:	1c000000 ffff1c1c ffffffff ffffffff     ................
  40b920:	ffffffff ffffffff ffffffff ffffffff     ................
  40b930:	ffffffff ffffffff ffffffff ffffffff     ................
  40b940:	ffffffff ffffffff ffffffff ffffffff     ................
  40b950:	ffffffff ffffffff ffffffff ffffffff     ................
  40b960:	ffffffff ffffffff ffffffff ffffffff     ................
  40b970:	ffffffff ffffffff ffffffff ffffffff     ................
  40b980:	ffffffff ffffffff ffffffff ffffffff     ................
  40b990:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9b0:	ffffffff ffffffff 00525252 00000000     ........RRR.....
	...
  40b9c8:	d7d70000 ffffffd7 ffffffff ffffffff     ................
  40b9d8:	ffffffff ffffffff 4040ffff 00000040     ..........@@@...
	...
  40b9f0:	03030300 ffffffff ffffffff ffffffff     ................
  40ba00:	ffffffff ffffffff ffffffff 00323232     ............222.
	...
  40ba18:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40ba28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba38:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba68:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba78:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba98:	ffffffff ffffffff ffffffff ffffffff     ................
  40baa8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bab8:	ffffffff ffffffff 00777777 00000000     ........www.....
	...
  40bad0:	adad0000 ffffffad ffffffff ffffffff     ................
  40bae0:	ffffffff ffffffff 5e5effff 0000005e     ..........^^^...
	...
  40bafc:	ffdfdfdf ffffffff ffffffff ffffffff     ................
  40bb0c:	ffffffff ffffffff 004a4a4a 00000000     ........JJJ.....
  40bb1c:	00000000 03000000 ffff0303 ffffffff     ................
  40bb2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbac:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbbc:	ffffffff ffffffff ffffffff 00a0a0a0     ................
	...
  40bbd8:	adad0000 ffffffad ffffffff ffffffff     ................
  40bbe8:	ffffffff ffffffff 7e7effff 0000007e     ..........~~~...
	...
  40bc04:	ffd7d7d7 ffffffff ffffffff ffffffff     ................
  40bc14:	ffffffff ffffffff 00656565 00000000     ........eee.....
  40bc24:	00000000 03000000 fcfc0303 fffffffc     ................
  40bc34:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc44:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc54:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc64:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc74:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc84:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc94:	ffffffff ffffffff ffffffff ffffffff     ................
  40bca4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcc4:	ffffffff ffffffff ffffffff 0df6f6f6     ................
  40bcd4:	00000d0d 00000000 0f000000 fcfc0f0f     ................
  40bce4:	fffffffc ffffffff ffffffff ffffffff     ................
  40bcf4:	ffffffff dcdcffff 090909dc 00000000     ................
  40bd04:	00000000 17171700 ffffffff ffffffff     ................
  40bd14:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd24:	04c2c2c2 00000404 00000000 22000000     ..............."
  40bd34:	ffff2222 ffffffff ffffffff ffffffff     ""..............
  40bd44:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd54:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd64:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd74:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd84:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd94:	ffffffff ffffffff ffffffff ffffffff     ................
  40bda4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdc4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdd4:	ffffffff 9effffff 18189e9e 04040418     ................
  40bde4:	a51a1a1a ffffa5a5 ffffffff ffffffff     ................
  40bdf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40be04:	8d8d8dff 04141414 1e1e0404 b7b7b71e     ................
  40be14:	ffffffff ffffffff ffffffff ffffffff     ................
  40be24:	ffffffff ffffffff 7bffffff 11117b7b     ...........{{{..
  40be34:	05050511 c9232323 ffffc9c9 ffffffff     ....###.........
  40be44:	ffffffff ffffffff ffffffff ffffffff     ................
  40be54:	ffffffff ffffffff ffffffff ffffffff     ................
  40be64:	ffffffff ffffffff ffffffff ffffffff     ................
  40be74:	ffffffff ffffffff ffffffff ffffffff     ................
  40be84:	ffffffff ffffffff                       ........

0040be8c <image_data_termometro>:
  40be8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40be9c:	ffffffff ffffffff ffffffff 9999ffff     ................
  40beac:	3b3b3b99 09141414 01010909 00000001     .;;;............
	...
  40bec8:	11070707 32321111 7c7c7c32 ffffffff     ......222|||....
  40bed8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bee8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bef8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf18:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf28:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf38:	ffffffff ffffffff ffffffff b5b5ffff     ................
  40bf48:	232323b5 00000000 00000000 00000000     .###............
	...
  40bf74:	17170000 8f8f8f17 ffffffff ffffffff     ................
  40bf84:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf94:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfa4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfc4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfd4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfe4:	818181ff 00070707 00000000 00000000     ................
	...
  40c018:	03000000 5a5a0303 ffffff5a ffffffff     ......ZZZ.......
  40c028:	ffffffff ffffffff ffffffff ffffffff     ................
  40c038:	ffffffff ffffffff ffffffff ffffffff     ................
  40c048:	ffffffff ffffffff ffffffff ffffffff     ................
  40c058:	ffffffff ffffffff ffffffff ffffffff     ................
  40c068:	ffffffff ffffffff ffffffff ffffffff     ................
  40c078:	ffffffff ffffffff ffffffff 03919191     ................
  40c088:	00000303 00000000 00000000 00000000     ................
	...
  40c0c0:	5c000000 ffff5c5c ffffffff ffffffff     ...\\\..........
  40c0d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c0e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c0f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c100:	ffffffff ffffffff ffffffff ffffffff     ................
  40c110:	ffffffff ffffffff ffffffff ffffffff     ................
  40c120:	d5ffffff 0909d5d5 00000009 00000000     ................
	...
  40c164:	03030300 ff999999 ffffffff ffffffff     ................
  40c174:	ffffffff ffffffff ffffffff ffffffff     ................
  40c184:	ffffffff ffffffff ffffffff ffffffff     ................
  40c194:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1c4:	383838ff 00000000 00000000 00000000     .888............
  40c1d4:	04000000 3b3b0404 8e8e8e3b d0c4c4c4     ......;;;.......
  40c1e4:	d0d0d0d0 d0d0d0d0 cbd0d0d0 9b9bcbcb     ................
  40c1f4:	4a4a4a9b 000a0a0a 00000000 00000000     .JJJ............
  40c204:	00000000 1c1c0000 ffffff1c ffffffff     ................
  40c214:	ffffffff ffffffff ffffffff ffffffff     ................
  40c224:	ffffffff ffffffff ffffffff ffffffff     ................
  40c234:	ffffffff ffffffff ffffffff ffffffff     ................
  40c244:	ffffffff ffffffff ffffffff ffffffff     ................
  40c254:	ffffffff ffffffff ffffffff ffffffff     ................
  40c264:	03e2e2e2 00000303 00000000 00000000     ................
  40c274:	0b0b0000 a9a9a90b ffffffff ffffffff     ................
  40c284:	ffffffff ffffffff ffffffff ffffffff     ................
  40c294:	ffffffff d2d2ffff 171717d2 00000000     ................
	...
  40c2ac:	94000000 ffff9494 ffffffff ffffffff     ................
  40c2bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2fc:	ffffffff ffffffff 6969ffff 00000069     ..........iii...
	...
  40c314:	01010100 ff8f8f8f ffffffff ffffffff     ................
  40c324:	ffffffff ffffffff ffffffff ffffffff     ................
  40c334:	ffffffff ffffffff cbffffff 0606cbcb     ................
  40c344:	00000006 00000000 00000000 3d3d3d00     .............===
  40c354:	ffffffff ffffffff ffffffff ffffffff     ................
  40c364:	ffffffff ffffffff ffffffff ffffffff     ................
  40c374:	ffffffff ffffffff ffffffff ffffffff     ................
  40c384:	ffffffff ffffffff ffffffff ffffffff     ................
  40c394:	ffffffff ffffffff ffffffff ffffffff     ................
  40c3a4:	ffffffff 00383838 00000000 00000000     ....888.........
  40c3b4:	1d000000 ffff1d1d ffffffff ffffffff     ................
  40c3c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c3e4:	00393939 00000000 00000000 1b000000     999.............
  40c3f4:	ffff1b1b ffffffff ffffffff ffffffff     ................
  40c404:	ffffffff ffffffff ffffffff ffffffff     ................
  40c414:	ffffffff ffffffff ffffffff ffffffff     ................
  40c424:	ffffffff ffffffff ffffffff ffffffff     ................
  40c434:	ffffffff ffffffff ffffffff ffffffff     ................
  40c444:	ffffffff 2727ffff 00000027 00000000     ......'''.......
  40c454:	00000000 3f3f3f00 ffffffff ffffffff     .....???........
  40c464:	ffffffff f3ffffff 6f6ff3f3 6262626f     ..........ooobbb
  40c474:	ffd7d7d7 ffffffff ffffffff ffffffff     ................
  40c484:	6d6dffff 0000006d 00000000 00000000     ..mmm...........
  40c494:	10101000 ffffffff ffffffff ffffffff     ................
  40c4a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4e4:	ffffffff ffffffff 00202020 00000000     ........   .....
  40c4f4:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40c504:	ffffffff f0f0ffff 171717f0 00000000     ................
  40c514:	0a0a0000 bdbdbd0a ffffffff ffffffff     ................
  40c524:	ffffffff 00848484 00000000 00000000     ................
  40c534:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40c544:	ffffffff ffffffff ffffffff ffffffff     ................
  40c554:	ffffffff ffffffff ffffffff ffffffff     ................
  40c564:	ffffffff ffffffff ffffffff ffffffff     ................
  40c574:	ffffffff ffffffff ffffffff ffffffff     ................
  40c584:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40c59c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40c5ac:	00656565 00000000 00000000 38000000     eee............8
  40c5bc:	ffff3838 ffffffff ffffffff 8484ffff     88..............
  40c5cc:	00000084 00000000 00000000 0a0a0a00     ................
  40c5dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c60c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c61c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c62c:	ffffffff 00202020 00000000 00000000     ....   .........
  40c63c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40c64c:	4646ffff 00000046 00000000 00000000     ..FFF...........
  40c65c:	23232300 ffffffff ffffffff ffffffff     .###............
  40c66c:	00848484 00000000 00000000 0a000000     ................
  40c67c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40c68c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c69c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6cc:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40c6dc:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40c6ec:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40c6fc:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40c70c:	8484ffff 00000084 00000000 00000000     ................
  40c71c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40c72c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c73c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c74c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c75c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c76c:	ffffffff ffffffff 00202020 00000000     ........   .....
  40c77c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40c78c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40c79c:	00000000 23232300 ffffffff ffffffff     .....###........
  40c7ac:	ffffffff 00848484 00000000 00000000     ................
  40c7bc:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40c7cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c80c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40c824:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40c834:	00454545 00000000 00000000 23000000     EEE............#
  40c844:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40c854:	00000084 00000000 00000000 0a0a0a00     ................
  40c864:	ffffffff ffffffff ffffffff ffffffff     ................
  40c874:	ffffffff ffffffff ffffffff ffffffff     ................
  40c884:	ffffffff ffffffff ffffffff ffffffff     ................
  40c894:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8b4:	ffffffff 00202020 00000000 00000000     ....   .........
  40c8c4:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40c8d4:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40c8e4:	23232300 ffffffff ffffffff ffffffff     .###............
  40c8f4:	00848484 00000000 00000000 0a000000     ................
  40c904:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40c914:	ffffffff ffffffff ffffffff ffffffff     ................
  40c924:	ffffffff ffffffff ffffffff ffffffff     ................
  40c934:	ffffffff ffffffff ffffffff ffffffff     ................
  40c944:	ffffffff ffffffff ffffffff ffffffff     ................
  40c954:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40c964:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40c974:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40c984:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40c994:	8484ffff 00000084 00000000 00000000     ................
  40c9a4:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40c9b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9f4:	ffffffff ffffffff 00202020 00000000     ........   .....
  40ca04:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40ca14:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40ca24:	00000000 23232300 ffffffff ffffffff     .....###........
  40ca34:	ffffffff 00848484 00000000 00000000     ................
  40ca44:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40ca54:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca64:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca74:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca84:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca94:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40caac:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40cabc:	00454545 00000000 00000000 23000000     EEE............#
  40cacc:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40cadc:	00000084 00000000 00000000 0a0a0a00     ................
  40caec:	ffffffff ffffffff ffffffff ffffffff     ................
  40cafc:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb3c:	ffffffff 00202020 00000000 00000000     ....   .........
  40cb4c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40cb5c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40cb6c:	23232300 ffffffff ffffffff ffffffff     .###............
  40cb7c:	00848484 00000000 00000000 0a000000     ................
  40cb8c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40cb9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbac:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbbc:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbcc:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbdc:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40cbec:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40cbfc:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40cc0c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40cc1c:	8484ffff 00000084 00000000 00000000     ................
  40cc2c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40cc3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc7c:	ffffffff ffffffff 00202020 00000000     ........   .....
  40cc8c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40cc9c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40ccac:	00000000 23232300 ffffffff ffffffff     .....###........
  40ccbc:	ffffffff 00848484 00000000 00000000     ................
  40cccc:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40ccdc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ccec:	ffffffff ffffffff ffffffff ffffffff     ................
  40ccfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd1c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40cd34:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40cd44:	00454545 00000000 00000000 23000000     EEE............#
  40cd54:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40cd64:	00000084 00000000 00000000 0a0a0a00     ................
  40cd74:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd84:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd94:	ffffffff ffffffff ffffffff ffffffff     ................
  40cda4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cdb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cdc4:	ffffffff 00202020 00000000 00000000     ....   .........
  40cdd4:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40cde4:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40cdf4:	23232300 ffffffff ffffffff ffffffff     .###............
  40ce04:	00848484 00000000 00000000 0a000000     ................
  40ce14:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40ce24:	ffffffff ffffffff ffffffff ffffffff     ................
  40ce34:	ffffffff ffffffff ffffffff ffffffff     ................
  40ce44:	ffffffff ffffffff ffffffff ffffffff     ................
  40ce54:	ffffffff ffffffff ffffffff ffffffff     ................
  40ce64:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40ce74:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40ce84:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40ce94:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40cea4:	8484ffff 00000084 00000000 00000000     ................
  40ceb4:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40cec4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ced4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cee4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cef4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf04:	ffffffff ffffffff 00202020 00000000     ........   .....
  40cf14:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40cf24:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40cf34:	00000000 23232300 ffffffff ffffffff     .....###........
  40cf44:	ffffffff 00848484 00000000 00000000     ................
  40cf54:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40cf64:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf74:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf84:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf94:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfa4:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40cfbc:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40cfcc:	00454545 00000000 00000000 23000000     EEE............#
  40cfdc:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40cfec:	00000084 00000000 00000000 0a0a0a00     ................
  40cffc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d00c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d01c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d02c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d03c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d04c:	ffffffff 00202020 00000000 00000000     ....   .........
  40d05c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40d06c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40d07c:	23232300 ffffffff ffffffff ffffffff     .###............
  40d08c:	00848484 00000000 00000000 0a000000     ................
  40d09c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40d0ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d0bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d0cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d0dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d0ec:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40d0fc:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40d10c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40d11c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40d12c:	8484ffff 00000084 00000000 00000000     ................
  40d13c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40d14c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d15c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d16c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d17c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d18c:	ffffffff ffffffff 00202020 00000000     ........   .....
  40d19c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40d1ac:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40d1bc:	00000000 23232300 ffffffff ffffffff     .....###........
  40d1cc:	ffffffff 00848484 00000000 00000000     ................
  40d1dc:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40d1ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40d1fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d20c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d21c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d22c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40d244:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40d254:	00454545 00000000 00000000 23000000     EEE............#
  40d264:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40d274:	00000084 00000000 00000000 0a0a0a00     ................
  40d284:	ffffffff ffffffff ffffffff ffffffff     ................
  40d294:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2d4:	ffffffff 00202020 00000000 00000000     ....   .........
  40d2e4:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40d2f4:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40d304:	23232300 ffffffff ffffffff ffffffff     .###............
  40d314:	00848484 00000000 00000000 0a000000     ................
  40d324:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40d334:	ffffffff ffffffff ffffffff ffffffff     ................
  40d344:	ffffffff ffffffff ffffffff ffffffff     ................
  40d354:	ffffffff ffffffff ffffffff ffffffff     ................
  40d364:	ffffffff ffffffff ffffffff ffffffff     ................
  40d374:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40d384:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40d394:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40d3a4:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40d3b4:	8484ffff 00000084 00000000 00000000     ................
  40d3c4:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40d3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d404:	ffffffff ffffffff ffffffff ffffffff     ................
  40d414:	ffffffff ffffffff 00202020 00000000     ........   .....
  40d424:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40d434:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40d444:	00000000 23232300 ffffffff ffffffff     .....###........
  40d454:	ffffffff 00848484 00000000 00000000     ................
  40d464:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40d474:	ffffffff ffffffff ffffffff ffffffff     ................
  40d484:	ffffffff ffffffff ffffffff ffffffff     ................
  40d494:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4b4:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40d4cc:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40d4dc:	00454545 00000000 00000000 23000000     EEE............#
  40d4ec:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40d4fc:	00000084 00000000 00000000 0a0a0a00     ................
  40d50c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d51c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d52c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d53c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d54c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d55c:	ffffffff 00202020 00000000 00000000     ....   .........
  40d56c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40d57c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40d58c:	23232300 ffffffff ffffffff ffffffff     .###............
  40d59c:	00848484 00000000 00000000 0a000000     ................
  40d5ac:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40d5bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5fc:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40d60c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40d61c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40d62c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40d63c:	8484ffff 00000084 00000000 00000000     ................
  40d64c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40d65c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d66c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d67c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d68c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d69c:	ffffffff ffffffff 00202020 00000000     ........   .....
  40d6ac:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40d6bc:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40d6cc:	00000000 23232300 ffffffff ffffffff     .....###........
  40d6dc:	ffffffff 00848484 00000000 00000000     ................
  40d6ec:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40d6fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d70c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d71c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d72c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d73c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40d754:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40d764:	00454545 00000000 00000000 23000000     EEE............#
  40d774:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40d784:	00000084 00000000 00000000 0a0a0a00     ................
  40d794:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7e4:	ffffffff 00202020 00000000 00000000     ....   .........
  40d7f4:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40d804:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40d814:	23232300 ffffffff ffffffff ffffffff     .###............
  40d824:	00848484 00000000 00000000 09000000     ................
  40d834:	85850909 4d4d4d85 232e2e2e 1b1b2323     .....MMM...###..
  40d844:	1b1b1b1b 34232323 54543434 a0a0a054     ....###444TTT...
  40d854:	ffffffff ffffffff ffffffff ffffffff     ................
  40d864:	ffffffff ffffffff ffffffff ffffffff     ................
  40d874:	ffffffff ffffffff ffffffff ffffffff     ................
  40d884:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40d894:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40d8a4:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40d8b4:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40d8c4:	8484ffff 00000084 00000000 00000000     ................
	...
  40d8f4:	0a0a0000 3636360a ffa2a2a2 ffffffff     .....666........
  40d904:	ffffffff ffffffff ffffffff ffffffff     ................
  40d914:	ffffffff ffffffff ffffffff ffffffff     ................
  40d924:	ffffffff ffffffff 00202020 00000000     ........   .....
  40d934:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40d944:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40d954:	00000000 23232300 ffffffff ffffffff     .....###........
  40d964:	ffffffff 00848484 00000000 00000000     ................
	...
  40d99c:	01010000 21212101 ffa2a2a2 ffffffff     .....!!!........
  40d9ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9cc:	2020ffff 00000020 00000000 00000000     ..   ...........
  40d9dc:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40d9ec:	00454545 00000000 00000000 23000000     EEE............#
  40d9fc:	ffff2323 ffffffff bbffffff 1c1cbbbb     ##..............
  40da0c:	0000001c 00000000 00000000 00000000     ................
	...
  40da44:	02020000 3b3b3b02 fff3f3f3 ffffffff     .....;;;........
  40da54:	ffffffff ffffffff ffffffff ffffffff     ................
  40da64:	ffffffff ffffffff ffffffff 00202020     ............   .
	...
  40da7c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40da8c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40da9c:	23232300 ffffffff 7878ffff 06060678     .###......xxx...
	...
  40daec:	17170000 bdbdbd17 ffffffff ffffffff     ................
  40dafc:	ffffffff ffffffff ffffffff ffffffff     ................
  40db0c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40db1c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40db2c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40db3c:	23000000 ffff2323 5e5e5eff 00010101     ...###...^^^....
	...
  40db60:	15010101 32321515 42424232 525a5a5a     ......222BBBZZZR
  40db70:	3d3d5252 2a2a2a3d 000b0b0b 00000000     RR===***........
	...
  40db90:	0b000000 a5a50b0b ffffffa5 ffffffff     ................
  40dba0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbb0:	ffffffff 00202020 00000000 00000000     ....   .........
  40dbc0:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40dbd0:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40dbe0:	23232300 01626262 00000101 00000000     .###bbb.........
	...
  40dbfc:	4f0b0b0b c2c24f4f ffffffc2 ffffffff     ...OOO..........
  40dc0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc1c:	949494ff 03343434 00000303 00000000     ....444.........
	...
  40dc38:	b70a0a0a ffffb7b7 ffffffff ffffffff     ................
  40dc48:	ffffffff ffffffff ffffffff 2020ffff     ..............  
  40dc58:	00000020 00000000 00000000 4c4c4c00      ............LLL
  40dc68:	ffffffff ffffffff ffffffff 00454545     ............EEE.
	...
  40dc80:	0f000000 03030f0f 00000003 00000000     ................
	...
  40dc98:	49040404 eaea4949 ffffffea ffffffff     ...III..........
  40dca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcb8:	ffffffff ffffffff ffffffff b7b7b7ff     ................
  40dcc8:	00272727 00000000 00000000 00000000     '''.............
  40dcd8:	00000000 10101000 ffe4e4e4 ffffffff     ................
  40dce8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcf8:	00202020 00000000 00000000 4c000000        ............L
  40dd08:	ffff4c4c ffffffff ffffffff 4545ffff     LL............EE
  40dd18:	00000045 00000000 00000000 00000000     E...............
	...
  40dd34:	0c000000 99990c0c ffffff99 ffffffff     ................
  40dd44:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd54:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd64:	ffffffff ffffffff 555555ff 00020202     .........UUU....
	...
  40dd80:	2c2c0000 ffffff2c ffffffff ffffffff     ..,,,...........
  40dd90:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40dda8:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40ddb8:	00454545 00000000 00000000 00000000     EEE.............
	...
  40ddd4:	11110000 cbcbcb11 ffffffff ffffffff     ................
  40dde4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40de04:	ffffffff ffffffff ffffffff 8080ffff     ................
  40de14:	03030380 00000000 00000000 00000000     ................
  40de24:	7c000000 ffff7c7c ffffffff ffffffff     ...|||..........
  40de34:	ffffffff ffffffff 001d1d1d 00000000     ................
  40de44:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40de54:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
	...
  40de74:	09090900 ffb5b5b5 ffffffff ffffffff     ................
  40de84:	ffffffff ffffffff ffffffff ffffffff     ................
  40de94:	ffffffff ffffffff ffffffff ffffffff     ................
  40dea4:	ffffffff ffffffff ffffffff ffffffff     ................
  40deb4:	61ffffff 00006161 00000000 00000000     ...aaa..........
  40dec4:	00000000 11111100 fffcfcfc ffffffff     ................
  40ded4:	ffffffff 77ffffff 01017777 00000001     .......www......
	...
  40deec:	4d4d4d00 ffffffff ffffffff ffffffff     .MMM............
  40defc:	00454545 00000000 00000000 00000000     EEE.............
	...
  40df14:	85010101 ffff8585 ffffffff ffffffff     ................
  40df24:	ffffffff ffffffff ffffffff ffffffff     ................
  40df34:	ffffffff ffffffff ffffffff ffffffff     ................
  40df44:	ffffffff ffffffff ffffffff ffffffff     ................
  40df54:	ffffffff ffffffff 00343434 00000000     ........444.....
	...
  40df6c:	6b6b0000 ffffff6b ffffffff bfbfffff     ..kkk...........
  40df7c:	070707bf 00000000 00000000 00000000     ................
  40df8c:	78000000 ffff7878 ffffffff ffffffff     ...xxx..........
  40df9c:	4545ffff 00000045 00000000 00000000     ..EEE...........
	...
  40dfb4:	27270000 ffffff27 ffffffff ffffffff     ..'''...........
  40dfc4:	ffffffff ffffffff ffffffff bdbdbdff     ................
  40dfd4:	6c737373 9e9e6c6c ffffff9e ffffffff     ssslll..........
  40dfe4:	ffffffff ffffffff ffffffff ffffffff     ................
  40dff4:	ffffffff ffffffff dadaffff 070707da     ................
	...
  40e010:	ff1c1c1c ffffffff ffffffff 00212121     ............!!!.
	...
  40e02c:	1e1e0000 ffffff1e ffffffff ffffffff     ................
  40e03c:	ffffffff 00454545 00000000 00000000     ....EEE.........
	...
  40e054:	02020200 ffb1b1b1 ffffffff ffffffff     ................
  40e064:	ffffffff ffffffff b1b1b1ff 01202020     ............   .
  40e074:	00000101 00000000 11000000 89891111     ................
  40e084:	ffffff89 ffffffff ffffffff ffffffff     ................
  40e094:	ffffffff ffffffff ffffffff 4cffffff     ...............L
  40e0a4:	00004c4c 00000000 00000000 01010000     LL..............
  40e0b4:	c2c2c201 9bffffff 01019b9b 00000001     ................
	...
  40e0cc:	0f0f0f00 ffd5d5d5 ffffffff ffffffff     ................
  40e0dc:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
	...
  40e0f4:	1e000000 ffff1e1e ffffffff ffffffff     ................
  40e104:	ffffffff ffffffff 09a8a8a8 00000909     ................
  40e114:	03030300 1e1c1c1c 06061e1e 00000006     ................
  40e124:	8d020202 ffff8d8d ffffffff ffffffff     ................
  40e134:	ffffffff ffffffff ffffffff ffffffff     ................
  40e144:	dcdcdcff 00030303 00000000 00000000     ................
  40e154:	5c000000 ffff5c5c 232323ff 00000000     ...\\\...###....
	...
  40e16c:	ab030303 ffffabab ffffffff ffffffff     ................
  40e17c:	ffffffff ffffffff 00454545 00000000     ........EEE.....
	...
  40e198:	55555500 ffffffff ffffffff ffffffff     .UUU............
  40e1a8:	ffffffff 1515ffff 00000015 a50c0c0c     ................
  40e1b8:	ffffa5a5 ffffffff 1ddcdcdc 09091d1d     ................
  40e1c8:	77777709 fcffffff 4040fcfc 0f0f0f40     .www......@@@...
  40e1d8:	7b151515 ffff7b7b ffffffff ffffffff     ...{{{..........
  40e1e8:	1d1dffff 0000001d 00000000 00000000     ................
  40e1f8:	2c2c2c00 01d5d5d5 00000101 00000000     .,,,............
  40e208:	00000000 36360000 ffffff36 ffffffff     ......666.......
  40e218:	ffffffff ffffffff ffffffff 4545ffff     ..............EE
  40e228:	00000045 00000000 00000000 00000000     E...............
  40e238:	bb000000 ffffbbbb ffffffff ffffffff     ................
  40e248:	ffffffff 828282ff 00000000 81810000     ................
  40e258:	ffffff81 ffffffff ffffffff cdcdcdff     ................
  40e268:	ffc9c9c9 ffffffff 656565ff 6b030303     .........eee...k
  40e278:	38386b6b 05050538 ffd7d7d7 ffffffff     kk888...........
  40e288:	ffffffff 004c4c4c 00000000 00000000     ....LLL.........
  40e298:	17000000 65651717 00000065 00000000     ......eee.......
  40e2a8:	00000000 03030300 ffd0d0d0 ffffffff     ................
  40e2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2c8:	00363636 00000000 00000000 00000000     666.............
  40e2d8:	02020000 fcfcfc02 ffffffff ffffffff     ................
  40e2e8:	ffffffff 3fffffff 00003f3f 0c0c0c00     .......???......
  40e2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e308:	ffffffff ffffffff 38ffffff 18183838     ...........888..
  40e318:	ffffff18 00c4c4c4 8d8d0000 ffffff8d     ................
  40e328:	ffffffff 6b6bffff 0000006b 00000000     ......kkk.......
  40e338:	00000000 09090900 002c2c2c 00000000     ........,,,.....
  40e348:	00000000 1e000000 ffff1e1e ffffffff     ................
  40e358:	ffffffff ffffffff ffffffff 3dffffff     ...............=
  40e368:	00003d3d 00000000 00000000 00000000     ==..............
  40e378:	00000000 ff0b0b0b ffffffff ffffffff     ................
  40e388:	ffffffff ffffffff 323232ff 18000000     .........222....
  40e398:	ffff1818 ffffffff ffffffff ffffffff     ................
  40e3a8:	ffffffff ffffffff ffffffff 656565ff     .............eee
  40e3b8:	6c040404 3a3a6c6c 0505053a ffd5d5d5     ...lll:::.......
  40e3c8:	ffffffff ffffffff 008f8f8f 00000000     ................
  40e3d8:	00000000 03000000 15150303 00000015     ................
	...
  40e3f0:	4f4f4f00 ffffffff ffffffff ffffffff     .OOO............
  40e400:	ffffffff 7474ffff 00000074 00000000     ......ttt.......
	...
  40e41c:	0f0f0000 ffffff0f ffffffff ffffffff     ................
  40e42c:	ffffffff 45ffffff 00004545 0a0a0a00     .......EEE......
  40e43c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e44c:	ffffffff ffffffff fcffffff 4141fcfc     ..............AA
  40e45c:	0f0f0f41 7a151515 ffff7a7a ffffffff     A......zzz......
  40e46c:	ffffffff a4a4ffff 000000a4 00000000     ................
  40e47c:	00000000 01010100 000c0c0c 00000000     ................
  40e48c:	00000000 76000000 ffff7676 ffffffff     .......vvv......
  40e49c:	ffffffff ffffffff ffffffff 001b1b1b     ................
	...
  40e4c0:	ff060606 ffffffff ffffffff ffffffff     ................
  40e4d0:	ffffffff 989898ff 00000000 77770000     ..............ww
  40e4e0:	ffffff77 ffffffff ffffffff dadadaff     w...............
  40e4f0:	ffb7b7b7 ffffffff ffffffff ffffffff     ................
  40e500:	ffffffff ffffffff ffffffff ffffffff     ................
  40e510:	ffffffff 007e7e7e 00000000 00000000     ....~~~.........
  40e520:	05000000 04040505 00000004 00000000     ................
  40e530:	00000000 9b9b9b00 ffffffff ffffffff     ................
  40e540:	ffffffff ffffffff 0707ffff 00000007     ................
	...
  40e564:	eaeaea00 ffffffff ffffffff ffffffff     ................
  40e574:	ffffffff 1e1effff 0000001e 990b0b0b     ................
  40e584:	ffff9999 ffffffff 23e7e7e7 03032323     ...........###..
  40e594:	4c4c4c03 ffffffff ffffffff ffffffff     .LLL............
  40e5a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5b4:	5f5fffff 0000005f 00000000 00000000     ..___...........
  40e5c4:	0d0d0d00 00020202 00000000 00000000     ................
  40e5d4:	9d000000 ffff9d9d ffffffff ffffffff     ................
  40e5e4:	ffffffff ffffffff 00050505 00000000     ................
	...
  40e604:	89000000 ffff8989 ffffffff ffffffff     ................
  40e614:	ffffffff ffffffff 0cc2c2c2 00000c0c     ................
  40e624:	03030300 231e1e1e 07072323 00000007     .......###......
  40e634:	74010101 ffff7474 ffffffff ffffffff     ...ttt..........
  40e644:	ffffffff ffffffff ffffffff ffffffff     ................
  40e654:	ffffffff 00363636 00000000 00000000     ....666.........
  40e664:	1e000000 06061e1e 00000006 00000000     ................
  40e674:	00000000 77777700 ffffffff ffffffff     .....www........
  40e684:	ffffffff ffffffff 1a1affff 0000001a     ................
	...
  40e6a8:	38383800 ffffffff ffffffff ffffffff     .888............
  40e6b8:	ffffffff ffffffff c2c2c2ff 01212121     ............!!!.
  40e6c8:	00000101 00000000 11000000 81811111     ................
  40e6d8:	ffffff81 ffffffff ffffffff ffffffff     ................
  40e6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6f8:	0d0dffff 0000000d 00000000 00000000     ................
  40e708:	3d3d3d00 00121212 00000000 00000000     .===............
  40e718:	52000000 ffff5252 ffffffff ffffffff     ...RRR..........
  40e728:	ffffffff ffffffff 006b6b6b 00000000     ........kkk.....
	...
  40e748:	0d000000 fcfc0d0d fffffffc ffffffff     ................
  40e758:	ffffffff ffffffff ffffffff ffffffff     ................
  40e768:	b3b3b3ff 686b6b6b a0a06868 ffffffa0     ....kkkhhh......
  40e778:	ffffffff ffffffff ffffffff ffffffff     ................
  40e788:	ffffffff ffffffff ffffffff ffffffff     ................
  40e798:	999999ff 00000000 00000000 00000000     ................
  40e7a8:	80000000 27278080 00000027 00000000     ......'''.......
  40e7b8:	00000000 1e1e1e00 ffffffff ffffffff     ................
  40e7c8:	ffffffff ffffffff ffffffff 363636ff     .............666
	...
  40e7f0:	ff616161 ffffffff ffffffff ffffffff     aaa.............
  40e800:	ffffffff ffffffff ffffffff ffffffff     ................
  40e810:	ffffffff ffffffff ffffffff ffffffff     ................
  40e820:	ffffffff ffffffff ffffffff ffffffff     ................
  40e830:	ffffffff ffffffff 23ffffff 00002323     ...........###..
	...
  40e848:	09090000 f3f3f309 00545454 00000000     ........TTT.....
  40e858:	00000000 03000000 d5d50303 ffffffd5     ................
  40e868:	ffffffff ffffffff ffffffff ffffffff     ................
  40e878:	6464ffff 14141464 00010101 00000000     ..ddd...........
	...
  40e890:	0c0c0000 ededed0c ffffffff ffffffff     ................
  40e8a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8d0:	ffffffff ffffffff 8888ffff 00000088     ................
	...
  40e8ec:	ff343434 bfbfffff 010101bf 00000000     444.............
	...
  40e904:	ff3a3a3a ffffffff ffffffff ffffffff     :::.............
  40e914:	ffffffff ffffffff ffffffff f0f0ffff     ................
  40e924:	494949f0 00000000 00000000 00000000     .III............
  40e934:	32000000 ffff3232 ffffffff ffffffff     ...222..........
  40e944:	ffffffff ffffffff ffffffff ffffffff     ................
  40e954:	ffffffff ffffffff ffffffff ffffffff     ................
  40e964:	ffffffff ffffffff ffffffff ffffffff     ................
  40e974:	ffffffff dadadaff 000f0f0f 00000000     ................
  40e984:	00000000 02000000 b7b70202 ffffffb7     ................
  40e994:	1effffff 00001e1e 00000000 00000000     ................
  40e9a4:	03030000 b1b1b103 ffffffff ffffffff     ................
  40e9b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9c4:	edffffff 0b0beded 0000000b 00000000     ................
	...
  40e9dc:	ff545454 ffffffff ffffffff ffffffff     TTT.............
  40e9ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea0c:	ffffffff ffffffff ffffffff 1ef9f9f9     ................
  40ea1c:	00001e1e 00000000 00000000 00000000     ................
  40ea2c:	32323200 ffffffff ffffffff 7e7e7eff     .222.........~~~
	...
  40ea48:	11000000 dfdf1111 ffffffdf ffffffff     ................
  40ea58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea68:	ffffffff 00707070 00000000 00000000     ....ppp.........
  40ea78:	00000000 02020000 54545402 ffffffff     .........TTT....
  40ea88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea98:	ffffffff ffffffff ffffffff ffffffff     ................
  40eaa8:	ffffffff ffffffff ffffffff e4ffffff     ................
  40eab8:	2525e4e4 00000025 00000000 00000000     ..%%%...........
  40eac8:	00000000 d5090909 ffffd5d5 ffffffff     ................
  40ead8:	ffffffff 1d1dffff 0000001d 00000000     ................
	...
  40eaf0:	e21e1e1e ffffe2e2 ffffffff ffffffff     ................
  40eb00:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb10:	2c2c2cff 00000000 00000000 00000000     .,,,............
  40eb20:	00000000 30300000 ededed30 ffffffff     ......000.......
  40eb30:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb40:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb50:	ffffffff b3b3ffff 131313b3 00000000     ................
	...
  40eb68:	01000000 74740101 ffffff74 ffffffff     ......ttt.......
  40eb78:	ffffffff ffffffff 04adadad 00000404     ................
	...
  40eb94:	11111100 ffafafaf ffffffff ffffffff     ................
  40eba4:	ffffffff ffffffff ffffffff eaffffff     ................
  40ebb4:	1515eaea 00000015 00000000 00000000     ................
  40ebc4:	00000000 0b000000 5d5d0b0b f9f9f95d     ..........]]]...
  40ebd4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ebe4:	ffffffff ffffffff ffffffff d2d2ffff     ................
  40ebf4:	383838d2 00030303 00000000 00000000     .888............
	...
  40ec0c:	40404000 ffffffff ffffffff ffffffff     .@@@............
  40ec1c:	ffffffff ffffffff 616161ff 00000000     .........aaa....
	...
  40ec38:	04040000 3a3a3a04 ffd2d2d2 ffffffff     .....:::........
  40ec48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec58:	10cdcdcd 00001010 00000000 00000000     ................
	...
  40ec70:	0d000000 37370d0d 85858537 ffededed     ......777.......
  40ec80:	ffffffff ffffffff d5ffffff 6565d5d5     ..............ee
  40ec90:	27272765 00050505 00000000 00000000     e'''............
	...
  40ecac:	ff303030 ffffffff ffffffff ffffffff     000.............
  40ecbc:	ffffffff ffffffff ffffffff 4242ffff     ..............BB
  40eccc:	00000042 00000000 00000000 00000000     B...............
  40ecdc:	00000000 04040000 20202004 82525252     .........   RRR.
  40ecec:	a2a28282 b7b7b7a2 5c858585 27275c5c     ...........\\\''
  40ecfc:	06060627 00000000 00000000 00000000     '...............
	...
  40ed20:	07070700 0f101010 04040f0f 00000004     ................
	...
  40ed48:	3b000000 fcfc3b3b fffffffc ffffffff     ...;;;..........
  40ed58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed68:	ffffffff 42ffffff 00004242 00000000     .......BBB......
	...
  40ede4:	05000000 64640505 ffffff64 ffffffff     ......ddd.......
  40edf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee04:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee14:	05646464 00000505 00000000 00000000     ddd.............
	...
  40ee84:	22220000 b5b5b522 ffffffff ffffffff     .."""...........
  40ee94:	ffffffff ffffffff ffffffff ffffffff     ................
  40eea4:	ffffffff ffffffff ffffffff ffffffff     ................
  40eeb4:	ffffffff b3b3b3ff 00212121 00000000     ........!!!.....
	...
  40eeec:	18000000 49491818 11111149 00000000     ......III.......
	...
  40ef1c:	01000000 1e1e0101 8686861e ffffffff     ................
  40ef2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef5c:	ffffffff 858585ff 02212121 00000202     ........!!!.....
	...
  40ef88:	1b010101 6d6d1b1b ffffff6d ffffffff     ......mmm.......
  40ef98:	8989ffff 39393989 03131313 00000303     .....999........
	...
  40efb8:	1e050505 4a4a1e1e bbbbbb4a ffffffff     ......JJJ.......
  40efc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40efd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40efe8:	ffffffff ffffffff ffffffff ffffffff     ................
  40eff8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f008:	cdcdcdff 2b5a5a5a 14142b2b 07070714     ....ZZZ+++......
  40f018:	02020202 09090202 11111109 52282828     ............(((R
  40f028:	b7b75252 ffffffb7 ffffffff ffffffff     RR..............
  40f038:	ffffffff ffffffff ffffffff f6f6f6ff     ................
  40f048:	85a4a4a4 73738585 76767673 bf888888     ......sssvvv....
  40f058:	ffffbfbf ffffffff ffffffff ffffffff     ................
  40f068:	ffffffff ffffffff ffffffff ffffffff     ................
  40f078:	ffffffff ffffffff ffffffff ffffffff     ................
  40f088:	0000ffff 0074786d 6c696146 74206465     ....mxt.Failed t
  40f098:	7263206f 65746165 73657420 656c2074     o create test le
  40f0a8:	61742064 0a0d6b73 00000000 0064636c     d task......lcd.
  40f0b8:	706d6574 00000000 6c696146 74206465     temp....Failed t
  40f0c8:	7263206f 65746165 73657420 65742074     o create test te
  40f0d8:	7420706d 0d6b7361 0000000a 616d6573     mp task.....sema
  40f0e8:	00000066 6c696146 74206465 7263206f     f...Failed to cr
  40f0f8:	65746165 73657420 65732074 2066616d     eate test semaf 
  40f108:	6b736174 00000a0d 64253a78 253a7920     task....x:%d y:%
  40f118:	00000a64 5f747562 6c6c6163 6b636162     d...but_callback
  40f128:	00000a20 616d6573 6f726166 20787420      ...semafaro tx 
  40f138:	0000000a 686c6166 6d652061 69726320     ....falha em cri
  40f148:	6f207261 6d657320 726f6661 000a206f     ar o semaforo ..
  40f158:	706d6554 74617265 20617275 000a6425     Temperatura %d..

0040f168 <termometro>:
  40f168:	0040be8c 004f0036 00000008 63617473     ..@.6.O.....stac
  40f178:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40f188:	00000a0d                                ....

0040f18c <_global_impure_ptr>:
  40f18c:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  40f19c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40f1ac:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40f1bc:	0000296c                                l)..

0040f1c0 <blanks.7217>:
  40f1c0:	20202020 20202020 20202020 20202020                     

0040f1d0 <zeroes.7218>:
  40f1d0:	30303030 30303030 30303030 30303030     0000000000000000
  40f1e0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040f1f0 <_ctype_>:
  40f1f0:	20202000 20202020 28282020 20282828     .         ((((( 
  40f200:	20202020 20202020 20202020 20202020                     
  40f210:	10108820 10101010 10101010 10101010      ...............
  40f220:	04040410 04040404 10040404 10101010     ................
  40f230:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40f240:	01010101 01010101 01010101 10101010     ................
  40f250:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40f260:	02020202 02020202 02020202 10101010     ................
  40f270:	00000020 00000000 00000000 00000000      ...............
	...

0040f2f4 <_init>:
  40f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f2f6:	bf00      	nop
  40f2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f2fa:	bc08      	pop	{r3}
  40f2fc:	469e      	mov	lr, r3
  40f2fe:	4770      	bx	lr

0040f300 <__init_array_start>:
  40f300:	00405f39 	.word	0x00405f39

0040f304 <__frame_dummy_init_array_entry>:
  40f304:	0040018d                                ..@.

0040f308 <_fini>:
  40f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f30a:	bf00      	nop
  40f30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f30e:	bc08      	pop	{r3}
  40f310:	469e      	mov	lr, r3
  40f312:	4770      	bx	lr

0040f314 <__fini_array_start>:
  40f314:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <last_state.11974>:
20400014:	00ff 0000                                   ....

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__malloc_av_>:
	...
20400450:	0448 2040 0448 2040 0450 2040 0450 2040     H.@ H.@ P.@ P.@ 
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 

20400850 <__malloc_sbrk_base>:
20400850:	ffff ffff                                   ....

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__atexit_recursive_mutex>:
20400858:	c88c 2040                                   ..@ 

2040085c <__global_locale>:
2040085c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	7031 0040 69c1 0040 0000 0000 f1f0 0040     1p@..i@.......@.
2040094c:	f1ec 0040 f0b0 0040 f0b0 0040 f0b0 0040     ..@...@...@...@.
2040095c:	f0b0 0040 f0b0 0040 f0b0 0040 f0b0 0040     ..@...@...@...@.
2040096c:	f0b0 0040 f0b0 0040 ffff ffff ffff ffff     ..@...@.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
